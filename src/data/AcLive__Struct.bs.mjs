// Generated by ReScript, PLEASE EDIT WITH CARE

import * as AcLive__Message from "./AcLive__Message.bs.mjs";
import * as S$RescriptStruct from "rescript-struct/src/S.bs.mjs";

function makeEmptyRequestStruct(type_) {
  return S$RescriptStruct.object(function (s) {
              s.t("type", type_);
              return {
                      requestID: s.f("requestID", S$RescriptStruct.string)
                    };
            });
}

function makeRequestStruct(type_, struct) {
  return S$RescriptStruct.object(function (s) {
              s.t("type", type_);
              return {
                      requestID: s.f("requestID", S$RescriptStruct.string),
                      data: s.f("data", struct)
                    };
            });
}

var loginRequestStruct = makeRequestStruct(2, S$RescriptStruct.object(function (s) {
          return {
                  account: s.f("account", S$RescriptStruct.string),
                  password: s.f("password", S$RescriptStruct.string)
                };
        }));

var setClientIDRequestStruct = makeRequestStruct(3, S$RescriptStruct.object(function (s) {
          return {
                  clientID: s.f("clientID", S$RescriptStruct.string)
                };
        }));

var forwardDataStruct = S$RescriptStruct.object(function (s) {
      return {
              clientID: s.f("clientID", S$RescriptStruct.string),
              message: s.f("message", S$RescriptStruct.string)
            };
    });

var requestForwardRequestStruct = makeRequestStruct(4, forwardDataStruct);

var tokenInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              userID: s.f("userID", S$RescriptStruct.$$float),
              securityKey: s.f("securityKey", S$RescriptStruct.string),
              serviceToken: s.f("serviceToken", S$RescriptStruct.string),
              deviceID: s.f("deviceID", S$RescriptStruct.string),
              cookies: s.f("cookies", S$RescriptStruct.array(S$RescriptStruct.string))
            };
    });

var setTokenRequestStruct = makeRequestStruct(6, tokenInfoStruct);

var liverUIDStruct = S$RescriptStruct.object(function (s) {
      return {
              liverUID: s.f("liverUID", S$RescriptStruct.$$int)
            };
    });

var getDanmakuRequestStruct = makeRequestStruct(100, liverUIDStruct);

var stopDanmakuRequestStruct = makeRequestStruct(101, liverUIDStruct);

var liveIDStruct = S$RescriptStruct.object(function (s) {
      return {
              liveID: s.f("liveID", S$RescriptStruct.string)
            };
    });

var getWatchingListRequestStruct = makeRequestStruct(102, liveIDStruct);

var getBillboardRequestStruct = makeRequestStruct(103, liverUIDStruct);

var getSummaryRequestStruct = makeRequestStruct(104, liveIDStruct);

var getLuckListRequestStruct = makeRequestStruct(105, S$RescriptStruct.object(function (s) {
          return {
                  liveID: s.f("liveID", S$RescriptStruct.string),
                  redpackID: s.f("redpackID", S$RescriptStruct.string),
                  redpackBizUnit: s.f("redpackBizUnit", S$RescriptStruct.string)
                };
        }));

var getPlaybackRequestStruct = makeRequestStruct(106, liveIDStruct);

var userIDStruct = S$RescriptStruct.object(function (s) {
      return {
              userID: s.f("userID", S$RescriptStruct.$$int)
            };
    });

var getUserLiveInfoRequestStruct = makeRequestStruct(109, userIDStruct);

var getLiveDataRequestStruct = makeRequestStruct(112, S$RescriptStruct.object(function (s) {
          return {
                  days: s.f("days", S$RescriptStruct.$$int)
                };
        }));

var getGiftListRequestStruct = makeRequestStruct(114, liveIDStruct);

var getUserInfoRequestStruct = makeRequestStruct(115, userIDStruct);

var getLiveCutInfoRequestStruct = makeRequestStruct(116, S$RescriptStruct.object(function (s) {
          return {
                  liverUID: s.f("liverUID", S$RescriptStruct.$$int),
                  liveID: s.f("liveID", S$RescriptStruct.string)
                };
        }));

var managerUIDStruct = S$RescriptStruct.object(function (s) {
      return {
              managerUID: s.f("managerUID", S$RescriptStruct.$$int)
            };
    });

var addManagerRequestStruct = makeRequestStruct(201, managerUIDStruct);

var deleteManagerRequestStruct = makeRequestStruct(202, managerUIDStruct);

var getAllKickHistoryRequestStruct = makeRequestStruct(203, liveIDStruct);

var kickUserStruct = S$RescriptStruct.object(function (s) {
      return {
              liveID: s.f("liveID", S$RescriptStruct.string),
              kickedUID: s.f("kickedUID", S$RescriptStruct.$$int)
            };
    });

var managerKickRequestStruct = makeRequestStruct(204, kickUserStruct);

var authorKickRequestStruct = makeRequestStruct(205, kickUserStruct);

var getMedalDetailRequestStruct = makeRequestStruct(300, liverUIDStruct);

var getMedalRankListRequestStruct = makeRequestStruct(302, liverUIDStruct);

var getUserMedalRequestStruct = makeRequestStruct(303, userIDStruct);

var wearMedalRequestStruct = makeRequestStruct(304, liverUIDStruct);

var getTranscodeInfoRequestStruct = makeRequestStruct(904, S$RescriptStruct.object(function (s) {
          return {
                  streamName: s.f("streamName", S$RescriptStruct.string)
                };
        }));

var startLiveRequestStruct = makeRequestStruct(905, S$RescriptStruct.object(function (s) {
          return {
                  title: s.f("title", S$RescriptStruct.string),
                  coverFile: s.f("coverFile", S$RescriptStruct.string),
                  streamName: s.f("streamName", S$RescriptStruct.string),
                  portrait: s.f("portrait", S$RescriptStruct.bool),
                  panoramic: s.f("panoramic", S$RescriptStruct.bool),
                  categoryID: s.f("categoryID", S$RescriptStruct.$$int),
                  subCategoryID: s.f("subCategoryID", S$RescriptStruct.$$int)
                };
        }));

var stopLiveRequestStruct = makeRequestStruct(906, liveIDStruct);

var changeTitleAndCoverRequestStruct = makeRequestStruct(907, S$RescriptStruct.object(function (s) {
          return {
                  title: s.f("title", S$RescriptStruct.string),
                  coverFile: s.f("coverFile", S$RescriptStruct.string),
                  liveID: s.f("liveID", S$RescriptStruct.string)
                };
        }));

var canCutLiveStruct = S$RescriptStruct.object(function (s) {
      return {
              canCut: s.f("canCut", S$RescriptStruct.bool)
            };
    });

var setLiveCutStatusRequestStruct = makeRequestStruct(909, canCutLiveStruct);

function serializeRequest(request) {
  switch (request.TAG) {
    case 2 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, loginRequestStruct, undefined);
    case 3 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, setClientIDRequestStruct, undefined);
    case 4 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, requestForwardRequestStruct, undefined);
    case 6 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, setTokenRequestStruct, undefined);
    case 100 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getDanmakuRequestStruct, undefined);
    case 101 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, stopDanmakuRequestStruct, undefined);
    case 102 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getWatchingListRequestStruct, undefined);
    case 103 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getBillboardRequestStruct, undefined);
    case 104 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getSummaryRequestStruct, undefined);
    case 105 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getLuckListRequestStruct, undefined);
    case 106 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getPlaybackRequestStruct, undefined);
    case 107 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(107), undefined);
    case 108 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(108), undefined);
    case 109 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getUserLiveInfoRequestStruct, undefined);
    case 110 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(110), undefined);
    case 112 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getLiveDataRequestStruct, undefined);
    case 114 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getGiftListRequestStruct, undefined);
    case 115 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getUserInfoRequestStruct, undefined);
    case 116 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getLiveCutInfoRequestStruct, undefined);
    case 200 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(200), undefined);
    case 201 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, addManagerRequestStruct, undefined);
    case 202 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, deleteManagerRequestStruct, undefined);
    case 203 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getAllKickHistoryRequestStruct, undefined);
    case 204 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, managerKickRequestStruct, undefined);
    case 205 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, authorKickRequestStruct, undefined);
    case 300 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getMedalDetailRequestStruct, undefined);
    case 301 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(301), undefined);
    case 302 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getMedalRankListRequestStruct, undefined);
    case 303 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getUserMedalRequestStruct, undefined);
    case 304 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, wearMedalRequestStruct, undefined);
    case 305 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(305), undefined);
    case 900 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(900), undefined);
    case 901 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(901), undefined);
    case 902 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(902), undefined);
    case 903 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(903), undefined);
    case 904 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, getTranscodeInfoRequestStruct, undefined);
    case 905 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, startLiveRequestStruct, undefined);
    case 906 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, stopLiveRequestStruct, undefined);
    case 907 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, changeTitleAndCoverRequestStruct, undefined);
    case 908 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, makeEmptyRequestStruct(908), undefined);
    case 909 :
        return S$RescriptStruct.serializeToJsonStringWith(request._0, setLiveCutStatusRequestStruct, undefined);
    
  }
}

var responseTypeStruct = S$RescriptStruct.variant(S$RescriptStruct.$$int, (function (v) {
        return AcLive__Message.intToResponseType(v);
      }));

var responseResultStruct = S$RescriptStruct.variant(S$RescriptStruct.$$int, (function (v) {
        return AcLive__Message.intToResponseResult(v);
      }));

var loginResponseStruct = S$RescriptStruct.object(function (s) {
      return s.f("tokenInfo", tokenInfoStruct);
    });

var streamURLStruct = S$RescriptStruct.object(function (s) {
      return {
              url: s.f("url", S$RescriptStruct.string),
              bitrate: s.f("bitrate", S$RescriptStruct.$$int),
              qualityType: s.f("qualityType", S$RescriptStruct.string),
              qualityName: s.f("qualityName", S$RescriptStruct.string)
            };
    });

var streamInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              liveID: s.f("liveID", S$RescriptStruct.string),
              title: s.f("title", S$RescriptStruct.string),
              liveStartTime: s.f("liveStartTime", S$RescriptStruct.$$float),
              panoramic: s.f("panoramic", S$RescriptStruct.bool),
              streamList: s.f("streamList", S$RescriptStruct.array(streamURLStruct)),
              streamName: s.f("streamName", S$RescriptStruct.string)
            };
    });

var getDanmakuResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              liverUID: s.f("liverUID", S$RescriptStruct.$$int),
              streamInfo: s.f("StreamInfo", S$RescriptStruct.option(streamInfoStruct))
            };
    });

var medalInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              uperID: s.f("uperID", S$RescriptStruct.$$int),
              userID: s.f("userID", S$RescriptStruct.$$int),
              clubName: s.f("clubName", S$RescriptStruct.string),
              level: s.f("level", S$RescriptStruct.$$int)
            };
    });

var userInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              userID: s.f("userID", S$RescriptStruct.$$float),
              nickname: s.f("nickname", S$RescriptStruct.string),
              avatar: s.f("avatar", S$RescriptStruct.string),
              medal: s.f("medal", medalInfoStruct),
              managerType: s.f("managerType", S$RescriptStruct.variant(S$RescriptStruct.$$int, (function (v) {
                          return AcLive__Message.intToManagerType(v);
                        })))
            };
    });

var watchingUserStruct = S$RescriptStruct.object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              anonymousUser: s.f("anonymousUser", S$RescriptStruct.bool),
              displaySendAmount: s.f("displaySendAmount", S$RescriptStruct.string),
              customData: s.f("customData", S$RescriptStruct.string)
            };
    });

var getWatchingListResponseStruct = S$RescriptStruct.array(watchingUserStruct);

var getBillboardResponseStruct = S$RescriptStruct.array(watchingUserStruct);

var getSummaryResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              duration: s.f("duration", S$RescriptStruct.$$int),
              likeCount: s.f("likeCount", S$RescriptStruct.string),
              watchCount: s.f("watchCount", S$RescriptStruct.string),
              giftCount: s.f("giftCount", S$RescriptStruct.$$int),
              diamondCount: s.f("diamondCount", S$RescriptStruct.$$int),
              bananaCount: s.f("bananaCount", S$RescriptStruct.$$int)
            };
    });

var luckyUserStruct = S$RescriptStruct.object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              grabAmount: s.f("grabAmount", S$RescriptStruct.$$int)
            };
    });

var getLuckListResponseStruct = S$RescriptStruct.array(luckyUserStruct);

var getPlaybackResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              duration: s.f("duration", S$RescriptStruct.$$int),
              url: s.f("url", S$RescriptStruct.string),
              backupURL: s.f("backupURL", S$RescriptStruct.string),
              m3u8Slice: s.f("m3u8Slice", S$RescriptStruct.string),
              width: s.f("width", S$RescriptStruct.$$int),
              height: s.f("height", S$RescriptStruct.$$int)
            };
    });

var giftDetailStruct = S$RescriptStruct.object(function (s) {
      return {
              giftID: s.f("giftID", S$RescriptStruct.$$int),
              giftName: s.f("giftName", S$RescriptStruct.string),
              arLiveName: s.f("arLiveName", S$RescriptStruct.string),
              payWalletType: s.f("payWalletType", S$RescriptStruct.variant(S$RescriptStruct.$$int, (function (v) {
                          return AcLive__Message.intToGiftPayType(v);
                        }))),
              price: s.f("price", S$RescriptStruct.$$int),
              webpPic: s.f("webpPic", S$RescriptStruct.string),
              pngPic: s.f("pngPic", S$RescriptStruct.string),
              smallPngPic: s.f("smallPngPic", S$RescriptStruct.string),
              allowBatchSendSizeList: s.f("allowBatchSendSizeList", S$RescriptStruct.$$null(S$RescriptStruct.array(S$RescriptStruct.$$int))),
              canCombo: s.f("canCombo", S$RescriptStruct.bool),
              canDraw: s.f("canDraw", S$RescriptStruct.bool),
              magicFaceID: s.f("magicFaceID", S$RescriptStruct.$$int),
              vupArID: s.f("vupArID", S$RescriptStruct.$$int),
              description: s.f("description", S$RescriptStruct.string),
              redpackPrice: s.f("redpackPrice", S$RescriptStruct.$$int),
              cornerMarkerText: s.f("cornerMarkerText", S$RescriptStruct.string)
            };
    });

var getAllGiftListResponseStruct = S$RescriptStruct.array(giftDetailStruct);

var getWalletBalanceResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              acCoin: s.f("acCoin", S$RescriptStruct.$$int),
              banana: s.f("banana", S$RescriptStruct.$$int)
            };
    });

var userProfileStruct = S$RescriptStruct.object(function (s) {
      return {
              userID: s.f("userID", S$RescriptStruct.$$int),
              nickname: s.f("nickname", S$RescriptStruct.string),
              avatar: s.f("avatar", S$RescriptStruct.string),
              avatarFrame: s.f("avatarFrame", S$RescriptStruct.string),
              followingCount: s.f("followingCount", S$RescriptStruct.$$int),
              fansCount: s.f("fansCount", S$RescriptStruct.$$int),
              contributeCount: s.f("contributeCount", S$RescriptStruct.$$int),
              signature: s.f("signature", S$RescriptStruct.string),
              verifiedText: s.f("verifiedText", S$RescriptStruct.string),
              isJoinUpCollege: s.f("isJoinUpCollege", S$RescriptStruct.bool),
              isFollowing: s.f("isFollowing", S$RescriptStruct.bool),
              isFollowed: s.f("isFollowed", S$RescriptStruct.bool)
            };
    });

var liveTypeStruct = S$RescriptStruct.object(function (s) {
      return {
              categoryID: s.f("categoryID", S$RescriptStruct.$$int),
              categoryName: s.f("categoryName", S$RescriptStruct.string),
              subCategoryID: s.f("subCategoryID", S$RescriptStruct.$$int),
              subCategoryName: s.f("subCategoryName", S$RescriptStruct.string)
            };
    });

var userLiveInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              profile: s.f("profile", userProfileStruct),
              liveType: s.f("liveType", liveTypeStruct),
              liveID: s.f("liveID", S$RescriptStruct.string),
              streamName: s.f("streamName", S$RescriptStruct.string),
              title: s.f("title", S$RescriptStruct.string),
              liveStartTime: s.f("liveStartTime", S$RescriptStruct.$$float),
              portrait: s.f("portrait", S$RescriptStruct.bool),
              panoramic: s.f("panoramic", S$RescriptStruct.bool),
              liveCover: s.f("liveCover", S$RescriptStruct.string),
              onlineCount: s.f("onlineCount", S$RescriptStruct.$$int),
              likeCount: s.f("likeCount", S$RescriptStruct.$$int),
              hasFansClub: s.f("hasFansClub", S$RescriptStruct.bool),
              disableDanmakuShow: s.f("disableDanmakuShow", S$RescriptStruct.bool),
              paidShowUserBuyStatus: s.f("paidShowUserBuyStatus", S$RescriptStruct.bool)
            };
    });

var getAllLiveListResponseStruct = S$RescriptStruct.array(userLiveInfoStruct);

var liveStatStruct = S$RescriptStruct.object(function (s) {
      return {
              duration: s.f("duration", S$RescriptStruct.$$int),
              maxPopularityValue: s.f("maxPopularityValue", S$RescriptStruct.$$int),
              watchCount: s.f("watchCount", S$RescriptStruct.$$int),
              diamondCount: s.f("diamondCount", S$RescriptStruct.$$int),
              commentCount: s.f("commentCount", S$RescriptStruct.$$int),
              bananaCount: s.f("bananaCount", S$RescriptStruct.$$int)
            };
    });

var liveDetailStruct = S$RescriptStruct.object(function (s) {
      return {
              liveStartTime: s.f("liveStartTime", S$RescriptStruct.$$float),
              liveEndTime: s.f("liveEndTime", S$RescriptStruct.$$float),
              liveStat: s.f("liveStat", liveStatStruct)
            };
    });

var dailyDataStruct = S$RescriptStruct.object(function (s) {
      return {
              date: s.f("date", S$RescriptStruct.string),
              liveTimes: s.f("liveTimes", S$RescriptStruct.$$int),
              liveStat: s.f("liveStat", liveStatStruct)
            };
    });

var getLiveDataResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              beginDate: s.f("beginDate", S$RescriptStruct.string),
              endDate: s.f("endDate", S$RescriptStruct.string),
              overview: s.f("overview", liveStatStruct),
              liveDetail: s.f("liveDetail", S$RescriptStruct.dict(liveDetailStruct)),
              dailyData: s.f("dailyData", S$RescriptStruct.$$null(S$RescriptStruct.array(dailyDataStruct)))
            };
    });

var getGiftListResponseStruct = S$RescriptStruct.array(giftDetailStruct);

var getUserInfoResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              userID: s.f("userID", S$RescriptStruct.$$int),
              nickname: s.f("nickname", S$RescriptStruct.string),
              avatar: s.f("avatar", S$RescriptStruct.string),
              avatarFrame: s.f("avatarFrame", S$RescriptStruct.string),
              followingCount: s.f("followingCount", S$RescriptStruct.string),
              fansCount: s.f("fansCount", S$RescriptStruct.string),
              contributeCount: s.f("contributeCount", S$RescriptStruct.string),
              signature: s.f("signature", S$RescriptStruct.string),
              verifiedText: s.f("verifiedText", S$RescriptStruct.string),
              isJoinUpCollege: s.f("isJoinUpCollege", S$RescriptStruct.bool),
              isFollowing: s.f("isFollowing", S$RescriptStruct.bool),
              isFollowed: s.f("isFollowed", S$RescriptStruct.bool),
              liveID: s.f("liveID", S$RescriptStruct.string),
              likeCount: s.f("likeCount", S$RescriptStruct.$$int)
            };
    });

var getLiveCutInfoResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              status: s.f("status", S$RescriptStruct.bool),
              url: s.f("url", S$RescriptStruct.string),
              redirectURL: s.f("redirectURL", S$RescriptStruct.string)
            };
    });

var managerStruct = S$RescriptStruct.object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              customData: s.f("customData", S$RescriptStruct.string),
              online: s.f("online", S$RescriptStruct.bool)
            };
    });

var getManagerListResponseStruct = S$RescriptStruct.array(managerStruct);

var kickHistoryStruct = S$RescriptStruct.object(function (s) {
      return {
              userID: s.f("userID", S$RescriptStruct.$$int),
              nickname: s.f("nickname", S$RescriptStruct.string),
              kickTime: s.f("kickTime", S$RescriptStruct.$$float)
            };
    });

var getAllKickHistoryResponseStruct = S$RescriptStruct.array(kickHistoryStruct);

var medalStruct = S$RescriptStruct.object(function (s) {
      return {
              medalInfo: s.f("medalInfo", medalInfoStruct),
              uperName: s.f("uperName", S$RescriptStruct.string),
              uperAvatar: s.f("uperAvatar", S$RescriptStruct.string),
              wearMedal: s.f("wearMedal", S$RescriptStruct.bool),
              friendshipDegree: s.f("friendshipDegree", S$RescriptStruct.$$int),
              joinClubTime: s.f("joinClubTime", S$RescriptStruct.$$float),
              currentDegreeLimit: s.f("currentDegreeLimit", S$RescriptStruct.$$int),
              medalCount: s.f("medalCount", S$RescriptStruct.$$int)
            };
    });

var medalDegreeStruct = S$RescriptStruct.object(function (s) {
      return {
              uperID: s.f("uperID", S$RescriptStruct.$$int),
              giftDegree: s.f("giftDegree", S$RescriptStruct.$$int),
              giftDegreeLimit: s.f("giftDegreeLimit", S$RescriptStruct.$$int),
              peachDegree: s.f("peachDegree", S$RescriptStruct.$$int),
              peachDegreeLimit: s.f("peachDegreeLimit", S$RescriptStruct.$$int),
              liveWatchDegree: s.f("liveWatchDegree", S$RescriptStruct.$$int),
              liveWatchDegreeLimit: s.f("liveWatchDegreeLimit", S$RescriptStruct.$$int),
              bananaDegree: s.f("bananaDegree", S$RescriptStruct.$$int),
              bananaDegreeLimit: s.f("bananaDegreeLimit", S$RescriptStruct.$$int)
            };
    });

var getMedalDetailResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              medal: s.f("medal", medalStruct),
              medalDegree: s.f("medalDegree", medalDegreeStruct),
              userRank: s.f("userRank", S$RescriptStruct.string)
            };
    });

var getMedalListResponseStruct = S$RescriptStruct.$$null(S$RescriptStruct.array(medalStruct));

var userMedalInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              profile: s.f("profile", userProfileStruct),
              friendshipDegree: s.f("friendshipDegree", S$RescriptStruct.$$int),
              level: s.f("level", S$RescriptStruct.$$int)
            };
    });

var getMedalRankListResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              hasFansClub: s.f("hasFansClub", S$RescriptStruct.bool),
              rankList: s.f("rankList", S$RescriptStruct.$$null(S$RescriptStruct.array(userMedalInfoStruct))),
              clubName: s.f("clubName", S$RescriptStruct.string),
              medalCount: s.f("medalCount", S$RescriptStruct.$$int),
              hasMedal: s.f("hasMedal", S$RescriptStruct.bool),
              userFriendshipDegree: s.f("userFriendshipDegree", S$RescriptStruct.$$int),
              userRank: s.f("userRank", S$RescriptStruct.string)
            };
    });

var checkLiveAuthResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              liveAuth: s.f("liveAuth", S$RescriptStruct.bool)
            };
    });

var getPushConfigResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              streamName: s.f("streamName", S$RescriptStruct.string),
              streamPullAddress: s.f("streamPullAddress", S$RescriptStruct.string),
              streamPushAddress: s.f("streamPushAddress", S$RescriptStruct.$$null(S$RescriptStruct.array(S$RescriptStruct.string))),
              panoramic: s.f("panoramic", S$RescriptStruct.bool),
              interval: s.f("interval", S$RescriptStruct.$$int),
              rtmpServer: s.f("rtmpServer", S$RescriptStruct.string),
              streamKey: s.f("streamKey", S$RescriptStruct.string)
            };
    });

var getLiveStatusResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              liveID: s.f("liveID", S$RescriptStruct.string),
              streamName: s.f("streamName", S$RescriptStruct.string),
              title: s.f("title", S$RescriptStruct.string),
              liveCover: s.f("liveCover", S$RescriptStruct.string),
              liveStartTime: s.f("liveStartTime", S$RescriptStruct.$$float),
              panoramic: s.f("panoramic", S$RescriptStruct.bool),
              bizUnit: s.f("bizUnit", S$RescriptStruct.string),
              bizCustomData: s.f("bizCustomData", S$RescriptStruct.string)
            };
    });

var transcodeInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              streamURL: s.f("streamURL", streamURLStruct),
              resolution: s.f("resolution", S$RescriptStruct.string),
              frameRate: s.f("frameRate", S$RescriptStruct.$$int),
              template: s.f("template", S$RescriptStruct.string)
            };
    });

var getTranscodeInfoResponseStruct = S$RescriptStruct.array(transcodeInfoStruct);

var stopLiveResponseStruct = S$RescriptStruct.object(function (s) {
      return {
              duration: s.f("duration", S$RescriptStruct.$$int),
              endReason: s.f("endReason", S$RescriptStruct.string)
            };
    });

var danmuInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              sendTime: s.f("sendTime", S$RescriptStruct.$$float),
              userInfo: s.f("userInfo", userInfoStruct)
            };
    });

var commentStruct = S$RescriptStruct.object(function (s) {
      return {
              danmuInfo: s.f("danmuInfo", danmuInfoStruct),
              content: s.f("content", S$RescriptStruct.string)
            };
    });

var throwBananaStruct = S$RescriptStruct.object(function (s) {
      return {
              danmuInfo: s.f("danmuInfo", danmuInfoStruct),
              bananaCount: s.f("bananaCount", S$RescriptStruct.$$int)
            };
    });

var drawPointStruct = S$RescriptStruct.object(function (s) {
      return {
              marginLeft: s.f("marginLeft", S$RescriptStruct.$$int),
              marginTop: s.f("marginTop", S$RescriptStruct.$$int),
              scaleRatio: s.f("scaleRatio", S$RescriptStruct.$$int),
              handup: s.f("handup", S$RescriptStruct.bool),
              pointWidth: s.f("pointWidth", S$RescriptStruct.$$int),
              pointHeight: s.f("pointHeight", S$RescriptStruct.$$int)
            };
    });

var drawGiftInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              screenWidth: s.f("screenWidth", S$RescriptStruct.$$int),
              screenHeight: s.f("screenHeight", S$RescriptStruct.$$int),
              drawPoint: s.f("drawPoint", S$RescriptStruct.$$null(S$RescriptStruct.array(drawPointStruct)))
            };
    });

var giftStruct = S$RescriptStruct.object(function (s) {
      return {
              danmuInfo: s.f("danmuInfo", danmuInfoStruct),
              giftDetail: s.f("giftDetail", giftDetailStruct),
              count: s.f("count", S$RescriptStruct.$$int),
              combo: s.f("combo", S$RescriptStruct.$$int),
              value: s.f("value", S$RescriptStruct.$$int),
              comboID: s.f("comboID", S$RescriptStruct.string),
              slotDisplayDuration: s.f("slotDisplayDuration", S$RescriptStruct.$$int),
              expireDuration: s.f("expireDuration", S$RescriptStruct.$$int),
              drawGiftInfo: s.f("drawGiftInfo", drawGiftInfoStruct)
            };
    });

var richTextUserInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              color: s.f("color", S$RescriptStruct.string)
            };
    });

var richTextPlainStruct = S$RescriptStruct.object(function (s) {
      return {
              text: s.f("text", S$RescriptStruct.string),
              color: s.f("color", S$RescriptStruct.string)
            };
    });

var richTextImageStruct = S$RescriptStruct.object(function (s) {
      return {
              pictures: s.f("pictures", S$RescriptStruct.array(S$RescriptStruct.string)),
              alternativeText: s.f("alternativeText", S$RescriptStruct.string),
              alternativeColor: s.f("alternativeColor", S$RescriptStruct.string)
            };
    });

var richTextSegmentStruct = S$RescriptStruct.union([
      S$RescriptStruct.object(function (s) {
            s.t("type", 1900);
            return {
                    type: "UserInfo",
                    segment: s.f("segment", richTextUserInfoStruct)
                  };
          }),
      S$RescriptStruct.object(function (s) {
            s.t("type", 1901);
            return {
                    type: "Plain",
                    segment: s.f("segment", richTextPlainStruct)
                  };
          }),
      S$RescriptStruct.object(function (s) {
            s.t("type", 1902);
            return {
                    type: "Image",
                    segment: s.f("segment", richTextImageStruct)
                  };
          })
    ]);

var richTextStruct = S$RescriptStruct.object(function (s) {
      return {
              sendTime: s.f("sendTime", S$RescriptStruct.$$float),
              segments: s.f("segments", S$RescriptStruct.array(richTextSegmentStruct))
            };
    });

var joinClubStruct = S$RescriptStruct.object(function (s) {
      return {
              joinTime: s.f("joinTime", S$RescriptStruct.$$float),
              fansInfo: s.f("fansInfo", userInfoStruct),
              uperInfo: s.f("uperInfo", userInfoStruct)
            };
    });

var shareLiveStruct = S$RescriptStruct.object(function (s) {
      return {
              danmuInfo: s.f("danmuInfo", danmuInfoStruct),
              sharePlatform: s.f("sharePlatform", S$RescriptStruct.variant(S$RescriptStruct.$$int, (function (v) {
                          return AcLive__Message.intToSharePlatformType(v);
                        }))),
              sharePlatformIcon: s.f("sharePlatformIcon", S$RescriptStruct.string)
            };
    });

var bananaCountStruct = S$RescriptStruct.object(function (s) {
      return {
              bananaCount: s.f("bananaCount", S$RescriptStruct.string)
            };
    });

var displayInfoStruct = S$RescriptStruct.object(function (s) {
      return {
              watchingCount: s.f("watchingCount", S$RescriptStruct.string),
              likeCount: s.f("likeCount", S$RescriptStruct.string),
              likeDelta: s.f("likeDelta", S$RescriptStruct.$$int)
            };
    });

var watchingUserStruct$1 = S$RescriptStruct.object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              anonymousUser: s.f("anonymousUser", S$RescriptStruct.bool),
              displaySendAmount: s.f("displaySendAmount", S$RescriptStruct.string),
              customData: s.f("customData", S$RescriptStruct.string)
            };
    });

var topUsersStruct = S$RescriptStruct.array(watchingUserStruct$1);

var recentCommentsStruct = S$RescriptStruct.array(commentStruct);

var redpackStruct = S$RescriptStruct.object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              displayStatus: s.f("displayStatus", S$RescriptStruct.variant(S$RescriptStruct.$$int, (function (v) {
                          return AcLive__Message.intToRedpackDisplayStatus(v);
                        }))),
              grabBeginTime: s.f("grabBeginTime", S$RescriptStruct.$$float),
              getTokenLatestTime: s.f("getTokenLatestTime", S$RescriptStruct.$$float),
              redpackID: s.f("redpackID", S$RescriptStruct.string),
              redpackBizUnit: s.f("redpackBizUnit", S$RescriptStruct.string),
              redpackAmount: s.f("redpackAmount", S$RescriptStruct.$$int),
              settleBeginTime: s.f("settleBeginTime", S$RescriptStruct.$$float)
            };
    });

var redpackListStruct = S$RescriptStruct.array(redpackStruct);

var chatCallStruct = S$RescriptStruct.object(function (s) {
      return {
              chatID: s.f("chatID", S$RescriptStruct.string),
              liveID: s.f("liveID", S$RescriptStruct.string),
              callTime: s.f("callTime", S$RescriptStruct.$$float)
            };
    });

var chatAcceptStruct = S$RescriptStruct.object(function (s) {
      return {
              chatID: s.f("chatID", S$RescriptStruct.string),
              mediaType: s.f("mediaType", S$RescriptStruct.variant(S$RescriptStruct.$$int, (function (v) {
                          return AcLive__Message.intToChatMediaType(v);
                        }))),
              signalInfo: s.f("signalInfo", S$RescriptStruct.string)
            };
    });

var chatReadyStruct = S$RescriptStruct.object(function (s) {
      return {
              chatID: s.f("chatID", S$RescriptStruct.string),
              guest: s.f("guest", userInfoStruct),
              mediaType: s.f("mediaType", S$RescriptStruct.variant(S$RescriptStruct.$$int, (function (v) {
                          return AcLive__Message.intToChatMediaType(v);
                        })))
            };
    });

var chatEndStruct = S$RescriptStruct.object(function (s) {
      return {
              chatID: s.f("chatID", S$RescriptStruct.string),
              endType: s.f("endType", S$RescriptStruct.variant(S$RescriptStruct.$$int, (function (v) {
                          return AcLive__Message.intToChatEndType(v);
                        })))
            };
    });

var danmakuStopErrorStruct = S$RescriptStruct.object(function (s) {
      return {
              error: s.f("error", S$RescriptStruct.string)
            };
    });

var kickedOutStruct = S$RescriptStruct.object(function (s) {
      return {
              kickedOutReason: s.f("kickedOutReason", S$RescriptStruct.string)
            };
    });

var violationAlertStruct = S$RescriptStruct.object(function (s) {
      return {
              violationContent: s.f("violationContent", S$RescriptStruct.string)
            };
    });

var managerStateStruct = S$RescriptStruct.object(function (s) {
      return {
              managerState: s.f("managerState", S$RescriptStruct.variant(S$RescriptStruct.$$int, (function (v) {
                          return AcLive__Message.intToManagerStateType(v);
                        })))
            };
    });

var responseModelStruct = S$RescriptStruct.object(function (s) {
      return {
              type_: s.f("type", responseTypeStruct),
              liverUID: s.o("liverUID", S$RescriptStruct.$$int, 0),
              requestID: s.o("requestID", S$RescriptStruct.string, ""),
              result: s.o("result", responseResultStruct, {
                    TAG: "UnknownResult",
                    _0: 0
                  }),
              error: s.o("error", S$RescriptStruct.string, "")
            };
    });

function makeEmptyResponseData(s, param, constructor) {
  var result = param.result;
  var requestID = param.requestID;
  if (typeof result !== "object") {
    if (result === "Success") {
      return constructor({
                  TAG: "Ok",
                  _0: {
                    requestID: requestID
                  }
                });
    } else {
      return constructor({
                  TAG: "Error",
                  _0: {
                    requestID: requestID,
                    result: result,
                    error: param.error
                  }
                });
    }
  } else {
    return s.fail("unknown result type: " + result._0.toString(), undefined);
  }
}

function makeResponseData(s, data, param, struct, constructor) {
  var result = param.result;
  var requestID = param.requestID;
  if (typeof result === "object") {
    return s.fail("unknown result type: " + result._0.toString(), undefined);
  }
  if (result !== "Success") {
    return constructor({
                TAG: "Error",
                _0: {
                  requestID: requestID,
                  result: result,
                  error: param.error
                }
              });
  }
  var d = S$RescriptStruct.parseAnyWith(data, S$RescriptStruct.object(function (s) {
            return s.f("data", struct);
          }));
  if (d.TAG !== "Ok") {
    return s.failWithError(d._0);
  }
  var message_data = d._0;
  var message = {
    requestID: requestID,
    data: message_data
  };
  return constructor({
              TAG: "Ok",
              _0: message
            });
}

function makeDanmakuData(s, data, param, struct, constructor) {
  var liverUID = param.liverUID;
  if (liverUID <= 0) {
    return s.fail("missing liverUID or illegal liverUID", undefined);
  }
  var d = S$RescriptStruct.parseAnyWith(data, S$RescriptStruct.object(function (s) {
            return s.f("data", struct);
          }));
  if (d.TAG === "Ok") {
    return constructor({
                liverUID: liverUID,
                data: d._0
              });
  } else {
    return s.failWithError(d._0);
  }
}

var responseDataStruct = S$RescriptStruct.custom("responseData", (function (s) {
        return {
                p: (function (data) {
                    var model = S$RescriptStruct.parseAnyWith(data, responseModelStruct);
                    if (model.TAG !== "Ok") {
                      return s.failWithError(model._0);
                    }
                    var model$1 = model._0;
                    var v = model$1.type_;
                    if (typeof v === "object") {
                      return s.fail("unsupported message type: " + v._0.toString(), undefined);
                    }
                    switch (v) {
                      case 2 :
                          return makeResponseData(s, data, model$1, loginResponseStruct, (function (v) {
                                        return {
                                                TAG: 2,
                                                _0: v
                                              };
                                      }));
                      case 3 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 3,
                                                _0: v
                                              };
                                      }));
                      case 4 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 4,
                                                _0: v
                                              };
                                      }));
                      case 6 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 6,
                                                _0: v
                                              };
                                      }));
                      case 100 :
                          return makeResponseData(s, data, model$1, getDanmakuResponseStruct, (function (v) {
                                        return {
                                                TAG: 100,
                                                _0: v
                                              };
                                      }));
                      case 101 :
                          return makeResponseData(s, data, model$1, liverUIDStruct, (function (v) {
                                        return {
                                                TAG: 101,
                                                _0: v
                                              };
                                      }));
                      case 102 :
                          return makeResponseData(s, data, model$1, getWatchingListResponseStruct, (function (v) {
                                        return {
                                                TAG: 102,
                                                _0: v
                                              };
                                      }));
                      case 103 :
                          return makeResponseData(s, data, model$1, getBillboardResponseStruct, (function (v) {
                                        return {
                                                TAG: 103,
                                                _0: v
                                              };
                                      }));
                      case 104 :
                          return makeResponseData(s, data, model$1, getSummaryResponseStruct, (function (v) {
                                        return {
                                                TAG: 104,
                                                _0: v
                                              };
                                      }));
                      case 105 :
                          return makeResponseData(s, data, model$1, getLuckListResponseStruct, (function (v) {
                                        return {
                                                TAG: 105,
                                                _0: v
                                              };
                                      }));
                      case 106 :
                          return makeResponseData(s, data, model$1, getPlaybackResponseStruct, (function (v) {
                                        return {
                                                TAG: 106,
                                                _0: v
                                              };
                                      }));
                      case 107 :
                          return makeResponseData(s, data, model$1, getAllGiftListResponseStruct, (function (v) {
                                        return {
                                                TAG: 107,
                                                _0: v
                                              };
                                      }));
                      case 108 :
                          return makeResponseData(s, data, model$1, getWalletBalanceResponseStruct, (function (v) {
                                        return {
                                                TAG: 108,
                                                _0: v
                                              };
                                      }));
                      case 109 :
                          return makeResponseData(s, data, model$1, userLiveInfoStruct, (function (v) {
                                        return {
                                                TAG: 109,
                                                _0: v
                                              };
                                      }));
                      case 110 :
                          return makeResponseData(s, data, model$1, getAllLiveListResponseStruct, (function (v) {
                                        return {
                                                TAG: 110,
                                                _0: v
                                              };
                                      }));
                      case 112 :
                          return makeResponseData(s, data, model$1, getLiveDataResponseStruct, (function (v) {
                                        return {
                                                TAG: 112,
                                                _0: v
                                              };
                                      }));
                      case 114 :
                          return makeResponseData(s, data, model$1, getGiftListResponseStruct, (function (v) {
                                        return {
                                                TAG: 114,
                                                _0: v
                                              };
                                      }));
                      case 115 :
                          return makeResponseData(s, data, model$1, getUserInfoResponseStruct, (function (v) {
                                        return {
                                                TAG: 115,
                                                _0: v
                                              };
                                      }));
                      case 116 :
                          return makeResponseData(s, data, model$1, getLiveCutInfoResponseStruct, (function (v) {
                                        return {
                                                TAG: 116,
                                                _0: v
                                              };
                                      }));
                      case 200 :
                          return makeResponseData(s, data, model$1, getManagerListResponseStruct, (function (v) {
                                        return {
                                                TAG: 200,
                                                _0: v
                                              };
                                      }));
                      case 201 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 201,
                                                _0: v
                                              };
                                      }));
                      case 202 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 202,
                                                _0: v
                                              };
                                      }));
                      case 203 :
                          return makeResponseData(s, data, model$1, getAllKickHistoryResponseStruct, (function (v) {
                                        return {
                                                TAG: 203,
                                                _0: v
                                              };
                                      }));
                      case 204 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 204,
                                                _0: v
                                              };
                                      }));
                      case 205 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 205,
                                                _0: v
                                              };
                                      }));
                      case 300 :
                          return makeResponseData(s, data, model$1, getMedalDetailResponseStruct, (function (v) {
                                        return {
                                                TAG: 300,
                                                _0: v
                                              };
                                      }));
                      case 301 :
                          return makeResponseData(s, data, model$1, getMedalListResponseStruct, (function (v) {
                                        return {
                                                TAG: 301,
                                                _0: v
                                              };
                                      }));
                      case 302 :
                          return makeResponseData(s, data, model$1, getMedalRankListResponseStruct, (function (v) {
                                        return {
                                                TAG: 302,
                                                _0: v
                                              };
                                      }));
                      case 303 :
                          return makeResponseData(s, data, model$1, medalStruct, (function (v) {
                                        return {
                                                TAG: 303,
                                                _0: v
                                              };
                                      }));
                      case 304 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 304,
                                                _0: v
                                              };
                                      }));
                      case 305 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 305,
                                                _0: v
                                              };
                                      }));
                      case 900 :
                          return makeResponseData(s, data, model$1, checkLiveAuthResponseStruct, (function (v) {
                                        return {
                                                TAG: 900,
                                                _0: v
                                              };
                                      }));
                      case 901 :
                          return makeResponseData(s, data, model$1, liveTypeStruct, (function (v) {
                                        return {
                                                TAG: 901,
                                                _0: v
                                              };
                                      }));
                      case 902 :
                          return makeResponseData(s, data, model$1, getPushConfigResponseStruct, (function (v) {
                                        return {
                                                TAG: 902,
                                                _0: v
                                              };
                                      }));
                      case 903 :
                          return makeResponseData(s, data, model$1, getLiveStatusResponseStruct, (function (v) {
                                        return {
                                                TAG: 903,
                                                _0: v
                                              };
                                      }));
                      case 904 :
                          return makeResponseData(s, data, model$1, getTranscodeInfoResponseStruct, (function (v) {
                                        return {
                                                TAG: 904,
                                                _0: v
                                              };
                                      }));
                      case 905 :
                          return makeResponseData(s, data, model$1, liveIDStruct, (function (v) {
                                        return {
                                                TAG: 905,
                                                _0: v
                                              };
                                      }));
                      case 906 :
                          return makeResponseData(s, data, model$1, stopLiveResponseStruct, (function (v) {
                                        return {
                                                TAG: 906,
                                                _0: v
                                              };
                                      }));
                      case 907 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 907,
                                                _0: v
                                              };
                                      }));
                      case 908 :
                          return makeResponseData(s, data, model$1, canCutLiveStruct, (function (v) {
                                        return {
                                                TAG: 908,
                                                _0: v
                                              };
                                      }));
                      case 909 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 909,
                                                _0: v
                                              };
                                      }));
                      case 1 :
                          return 1;
                      case 5 :
                          return makeResponseData(s, data, model$1, forwardDataStruct, (function (v) {
                                        return {
                                                TAG: 5,
                                                _0: v
                                              };
                                      }));
                      case 1000 :
                          return makeDanmakuData(s, data, model$1, commentStruct, (function (v) {
                                        return {
                                                TAG: 1000,
                                                _0: v
                                              };
                                      }));
                      case 1001 :
                          return makeDanmakuData(s, data, model$1, danmuInfoStruct, (function (v) {
                                        return {
                                                TAG: 1001,
                                                _0: v
                                              };
                                      }));
                      case 1002 :
                          return makeDanmakuData(s, data, model$1, danmuInfoStruct, (function (v) {
                                        return {
                                                TAG: 1002,
                                                _0: v
                                              };
                                      }));
                      case 1003 :
                          return makeDanmakuData(s, data, model$1, danmuInfoStruct, (function (v) {
                                        return {
                                                TAG: 1003,
                                                _0: v
                                              };
                                      }));
                      case 1004 :
                          return makeDanmakuData(s, data, model$1, throwBananaStruct, (function (v) {
                                        return {
                                                TAG: 1004,
                                                _0: v
                                              };
                                      }));
                      case 1005 :
                          return makeDanmakuData(s, data, model$1, giftStruct, (function (v) {
                                        return {
                                                TAG: 1005,
                                                _0: v
                                              };
                                      }));
                      case 1006 :
                          return makeDanmakuData(s, data, model$1, richTextStruct, (function (v) {
                                        return {
                                                TAG: 1006,
                                                _0: v
                                              };
                                      }));
                      case 1007 :
                          return makeDanmakuData(s, data, model$1, joinClubStruct, (function (v) {
                                        return {
                                                TAG: 1007,
                                                _0: v
                                              };
                                      }));
                      case 1008 :
                          return makeDanmakuData(s, data, model$1, shareLiveStruct, (function (v) {
                                        return {
                                                TAG: 1008,
                                                _0: v
                                              };
                                      }));
                      case 2000 :
                          var constructor = function (v) {
                            return {
                                    TAG: 2000,
                                    _0: v
                                  };
                          };
                          var liverUID = model$1.liverUID;
                          if (liverUID <= 0) {
                            return s.fail("missing liverUID or illegal liverUID", undefined);
                          }
                          var danmaku = {
                            liverUID: liverUID
                          };
                          return constructor(danmaku);
                      case 2001 :
                          return makeDanmakuData(s, data, model$1, bananaCountStruct, (function (v) {
                                        return {
                                                TAG: 2001,
                                                _0: v
                                              };
                                      }));
                      case 2002 :
                          return makeDanmakuData(s, data, model$1, displayInfoStruct, (function (v) {
                                        return {
                                                TAG: 2002,
                                                _0: v
                                              };
                                      }));
                      case 2003 :
                          return makeDanmakuData(s, data, model$1, topUsersStruct, (function (v) {
                                        return {
                                                TAG: 2003,
                                                _0: v
                                              };
                                      }));
                      case 2004 :
                          return makeDanmakuData(s, data, model$1, recentCommentsStruct, (function (v) {
                                        return {
                                                TAG: 2004,
                                                _0: v
                                              };
                                      }));
                      case 2005 :
                          return makeDanmakuData(s, data, model$1, redpackListStruct, (function (v) {
                                        return {
                                                TAG: 2005,
                                                _0: v
                                              };
                                      }));
                      case 2100 :
                          return makeDanmakuData(s, data, model$1, chatCallStruct, (function (v) {
                                        return {
                                                TAG: 2100,
                                                _0: v
                                              };
                                      }));
                      case 2101 :
                          return makeDanmakuData(s, data, model$1, chatAcceptStruct, (function (v) {
                                        return {
                                                TAG: 2101,
                                                _0: v
                                              };
                                      }));
                      case 2102 :
                          return makeDanmakuData(s, data, model$1, chatReadyStruct, (function (v) {
                                        return {
                                                TAG: 2102,
                                                _0: v
                                              };
                                      }));
                      case 2103 :
                          return makeDanmakuData(s, data, model$1, chatEndStruct, (function (v) {
                                        return {
                                                TAG: 2103,
                                                _0: v
                                              };
                                      }));
                      case 2999 :
                          return makeDanmakuData(s, data, model$1, danmakuStopErrorStruct, (function (v) {
                                        return {
                                                TAG: 2999,
                                                _0: v
                                              };
                                      }));
                      case 3000 :
                          return makeDanmakuData(s, data, model$1, kickedOutStruct, (function (v) {
                                        return {
                                                TAG: 3000,
                                                _0: v
                                              };
                                      }));
                      case 3001 :
                          return makeDanmakuData(s, data, model$1, violationAlertStruct, (function (v) {
                                        return {
                                                TAG: 3001,
                                                _0: v
                                              };
                                      }));
                      case 3002 :
                          return makeDanmakuData(s, data, model$1, managerStateStruct, (function (v) {
                                        return {
                                                TAG: 3002,
                                                _0: v
                                              };
                                      }));
                      
                    }
                  })
              };
      }));

function parseResponse(response) {
  return S$RescriptStruct.parseJsonStringWith(response, responseDataStruct);
}

export {
  serializeRequest ,
  parseResponse ,
}
/* loginRequestStruct Not a pure module */
