import * as Uuid from 'uuid';
import * as TauriPluginWebsocketApi from 'tauri-plugin-websocket-api';

// Generated by ReScript, PLEASE EDIT WITH CARE


function $$delete$1(dict, string) {
  delete(dict[string]);
}
/* No side effect */

function some(x) {
  if (x === undefined) {
    return {
            BS_PRIVATE_NESTED_SOME_NONE: 0
          };
  } else if (x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
    return {
            BS_PRIVATE_NESTED_SOME_NONE: x.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
          };
  } else {
    return x;
  }
}

function valFromOption(x) {
  if (!(x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== undefined)) {
    return x;
  }
  var depth = x.BS_PRIVATE_NESTED_SOME_NONE;
  if (depth === 0) {
    return ;
  } else {
    return {
            BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
          };
  }
}
/* No side effect */

// Generated by ReScript, PLEASE EDIT WITH CARE


function map(opt, f) {
  var f$1 = function (x) {
    return f(x);
  };
  if (opt !== undefined) {
    return some(f$1(valFromOption(opt)));
  }
  
}

function getWithDefault(opt, $$default) {
  if (opt !== undefined) {
    return valFromOption(opt);
  } else {
    return $$default;
  }
}

function isSome(x) {
  return x !== undefined;
}
/* No side effect */

// Generated by ReScript, PLEASE EDIT WITH CARE


function intToResponseType(i) {
  if (i >= 300) {
    if (i >= 2000) {
      if (i >= 2104) {
        if (i > 3002 || i < 2999) {
          return {
                  TAG: "UnknownResponse",
                  _0: i
                };
        } else {
          return i;
        }
      } else if (i > 2099 || i < 2006) {
        return i;
      } else {
        return {
                TAG: "UnknownResponse",
                _0: i
              };
      }
    } else if (i >= 910) {
      if (i > 1008 || i < 1000) {
        return {
                TAG: "UnknownResponse",
                _0: i
              };
      } else {
        return i;
      }
    } else if (i > 899 || i < 306) {
      return i;
    } else {
      return {
              TAG: "UnknownResponse",
              _0: i
            };
    }
  } else if (i >= 112) {
    if (i >= 117) {
      if (i > 205 || i < 200) {
        return {
                TAG: "UnknownResponse",
                _0: i
              };
      } else {
        return i;
      }
    } else if (i !== 113) {
      return i;
    } else {
      return {
              TAG: "UnknownResponse",
              _0: i
            };
    }
  } else if (i >= 7) {
    if (i > 110 || i < 100) {
      return {
              TAG: "UnknownResponse",
              _0: i
            };
    } else {
      return i;
    }
  } else if (i > 0) {
    return i;
  } else {
    return {
            TAG: "UnknownResponse",
            _0: i
          };
  }
}

function intToResponseResult(i) {
  switch (i) {
    case 1 :
        return "Success";
    case 2 :
    case 3 :
    case 4 :
    case 5 :
    case 6 :
    case 7 :
    case 8 :
    case 9 :
        return {
                TAG: "UnknownResult",
                _0: i
              };
    case 10 :
        return "JsonParseError";
    case 11 :
        return "InvalidRequestType";
    case 12 :
        return "InvalidRequestData";
    case 13 :
        return "HandleRequestError";
    case 14 :
        return "NeedLogin";
    default:
      return {
              TAG: "UnknownResult",
              _0: i
            };
  }
}

function makeMessage(data, requestIDOpt) {
  var requestID = requestIDOpt !== undefined ? requestIDOpt : "";
  return {
          requestID: requestID,
          data: data
        };
}

function makeEmptyMessage(requestIDOpt) {
  var requestID = requestIDOpt !== undefined ? requestIDOpt : "";
  return {
          requestID: requestID
        };
}

function getResponseRequestId(response) {
  return response._0.requestID;
}

function getEmptyResponseRequestId(response) {
  return response._0.requestID;
}

function getOptionalResponseRequestId(response) {
  return response._0.requestID;
}

function intToManagerType(i) {
  if (i !== 0) {
    if (i !== 1) {
      return {
              TAG: "UnknownManagerType",
              _0: i
            };
    } else {
      return "NormalManager";
    }
  } else {
    return "NotManager";
  }
}

function intToGiftPayType(i) {
  if (i !== 1) {
    if (i !== 2) {
      return {
              TAG: "UnknownGiftPayType",
              _0: i
            };
    } else {
      return "FreeGift";
    }
  } else {
    return "NonFreeGift";
  }
}

function intToSharePlatformType(i) {
  switch (i) {
    case 1 :
        return "QQ";
    case 2 :
        return "Qzone";
    case 3 :
        return "Weibo";
    case 4 :
        return "WeChat";
    case 5 :
        return "WeChatMoments";
    case 6 :
        return "AcFunMoment";
    default:
      return {
              TAG: "UnknownPlatform",
              _0: i
            };
  }
}

function intToRedpackDisplayStatus(i) {
  switch (i) {
    case 0 :
        return "RedpackShow";
    case 1 :
        return "RedpackGetToken";
    case 2 :
        return "RedpackGrab";
    default:
      return {
              TAG: "UnknownRedpackDisplayStatus",
              _0: i
            };
  }
}

function intToChatMediaType(i) {
  if (i !== 1) {
    if (i !== 2) {
      return {
              TAG: "UnknownChatMediaType",
              _0: i
            };
    } else {
      return "Video";
    }
  } else {
    return "Audio";
  }
}

function intToChatEndType(i) {
  switch (i) {
    case 1 :
        return "CancelByAuthor";
    case 2 :
        return "EndByAuthor";
    case 3 :
        return "EndByGuest";
    case 4 :
        return "GuestReject";
    case 5 :
        return "GuestTimeout";
    case 6 :
        return "GuestHeartbeatTimeout";
    case 7 :
        return "AuthorHeartbeatTimeout";
    case 8 :
        return "PeerLiveStopped";
    default:
      return {
              TAG: "UnknownChatEndType",
              _0: i
            };
  }
}

function intToManagerStateType(i) {
  switch (i) {
    case 0 :
        return "NotManager";
    case 1 :
        return "ManagerAdded";
    case 2 :
        return "ManagerRemoved";
    case 3 :
        return "IsManager";
    default:
      return {
              TAG: "UnknownManagerStateType",
              _0: i
            };
  }
}

var heartbeat = "{\"type\":1}";
/* No side effect */

var $$Error$1 = "JsError";
/* No side effect */

function get(dict, k) {
  if ((k in dict)) {
    return some(dict[k]);
  }
  
}
/* No side effect */

function classify(x) {
  var ty = typeof x;
  if (ty === "undefined") {
    return "JSUndefined";
  } else if (x === null) {
    return "JSNull";
  } else if (ty === "number") {
    return {
            TAG: "JSNumber",
            _0: x
          };
  } else if (ty === "bigint") {
    return {
            TAG: "JSBigInt",
            _0: x
          };
  } else if (ty === "string") {
    return {
            TAG: "JSString",
            _0: x
          };
  } else if (ty === "boolean") {
    if (x === true) {
      return "JSTrue";
    } else {
      return "JSFalse";
    }
  } else if (ty === "symbol") {
    return {
            TAG: "JSSymbol",
            _0: x
          };
  } else if (ty === "function") {
    return {
            TAG: "JSFunction",
            _0: x
          };
  } else {
    return {
            TAG: "JSObject",
            _0: x
          };
  }
}
/* No side effect */

var id = {
  contents: 0
};

function create(str) {
  id.contents = id.contents + 1 | 0;
  return str + ("/" + id.contents);
}

function is_extension(e) {
  if (e == null) {
    return false;
  } else {
    return typeof e.RE_EXN_ID === "string";
  }
}
/* No side effect */

function internalToOCamlException(e) {
  if (is_extension(e)) {
    return e;
  } else {
    return {
            RE_EXN_ID: "JsError",
            _1: e
          };
  }
}
/* No side effect */

// Generated by ReScript, PLEASE EDIT WITH CARE


function test(data) {
  if (typeof data === "number" && data < 2147483648 && data > -2147483649) {
    return data % 1 === 0;
  } else {
    return false;
  }
}

var Exception = /* @__PURE__ */create("S-RescriptStruct.Error.Internal.Exception");

function raise(expected, received, initialPathOpt, param) {
  var initialPath = initialPathOpt !== undefined ? initialPathOpt : "";
  throw {
        RE_EXN_ID: Exception,
        _1: {
          c: {
            TAG: "UnexpectedValue",
            expected: expected === undefined ? "undefined" : JSON.stringify(expected),
            received: received === undefined ? "undefined" : JSON.stringify(received)
          },
          p: initialPath
        },
        Error: new Error()
      };
}

function raise$1(code) {
  throw {
        RE_EXN_ID: Exception,
        _1: {
          c: code,
          p: ""
        },
        Error: new Error()
      };
}

function toParseError(internalError) {
  return {
          operation: "Parsing",
          code: internalError.c,
          path: internalError.p
        };
}

function toSerializeError(internalError) {
  return {
          operation: "Serializing",
          code: internalError.c,
          path: internalError.p
        };
}

function prependPath(error, path) {
  return {
          c: error.c,
          p: path + error.p
        };
}

function prependLocation(error, $$location) {
  return prependPath(error, "[" + JSON.stringify($$location) + "]");
}

function panic($$location) {
  throw new Error("[rescript-struct] " + ("For a " + $$location + " either a parser, or a serializer is required"));
}

function advancedFail(error) {
  throw {
        RE_EXN_ID: Exception,
        _1: {
          c: error.code,
          p: error.path
        },
        Error: new Error()
      };
}

function fail(pathOpt, message) {
  var path = pathOpt !== undefined ? pathOpt : "";
  throw {
        RE_EXN_ID: Exception,
        _1: {
          c: {
            TAG: "OperationFailed",
            _0: message
          },
          p: path
        },
        Error: new Error()
      };
}

var emptyMetadataMap = {};

function planSyncTransformation(ctx, transformation) {
  var prevSyncTransformation = ctx.t;
  var prevAsyncTransformation = ctx.a;
  var match = ctx.p;
  switch (match) {
    case "NoTransformation" :
        ctx.p = "OnlySync";
        ctx.t = transformation;
        return ;
    case "OnlySync" :
        ctx.t = (function (input) {
            return transformation(prevSyncTransformation(input));
          });
        return ;
    
  }
  ctx.a = (function (input) {
      return prevAsyncTransformation(input).then(transformation);
    });
}

function planAsyncTransformation(ctx, transformation) {
  var prevAsyncTransformation = ctx.a;
  var match = ctx.p;
  switch (match) {
    case "NoTransformation" :
        ctx.p = "OnlyAsync";
        ctx.a = transformation;
        return ;
    case "OnlySync" :
        ctx.p = "SyncAndAsync";
        ctx.a = transformation;
        return ;
    
  }
  ctx.a = (function (input) {
      return prevAsyncTransformation(input).then(transformation);
    });
}

function planMissingParserTransformation(ctx) {
  planSyncTransformation(ctx, (function (param) {
          return raise$1("MissingParser");
        }));
}

function planMissingSerializerTransformation(ctx) {
  planSyncTransformation(ctx, (function (param) {
          return raise$1("MissingSerializer");
        }));
}

function empty(param) {
  
}

function compile(transformationFactory, struct) {
  var ctx = {
    s: struct,
    p: "NoTransformation",
    t: undefined,
    a: undefined
  };
  transformationFactory(ctx);
  var match = ctx.p;
  switch (match) {
    case "NoTransformation" :
        return "NoOperation";
    case "OnlySync" :
        return {
                TAG: "SyncOperation",
                _0: ctx.t
              };
    case "OnlyAsync" :
        return {
                TAG: "AsyncOperation",
                _0: (function (input) {
                    return function () {
                      return ctx.a(input);
                    };
                  })
              };
    case "SyncAndAsync" :
        return {
                TAG: "AsyncOperation",
                _0: (function (input) {
                    var syncOutput = ctx.t(input);
                    return function () {
                      return ctx.a(syncOutput);
                    };
                  })
              };
    
  }
}

function getParseOperation(struct) {
  var parseOperationState = struct.r;
  if (typeof parseOperationState !== "number") {
    return parseOperationState;
  }
  if (parseOperationState === 2) {
    return {
            TAG: "SyncOperation",
            _0: (function (input) {
                return struct.p(input);
              })
          };
  }
  if (parseOperationState === 3) {
    return {
            TAG: "AsyncOperation",
            _0: (function (input) {
                return struct.a(input);
              })
          };
  }
  struct.r = parseOperationState === 1 ? 3 : 2;
  var compiledParseOperation = compile(struct.pf, struct);
  struct.r = compiledParseOperation;
  return compiledParseOperation;
}

function getSerializeOperation(struct) {
  var serializeOperationState = struct.e;
  if (typeof serializeOperationState !== "number") {
    return serializeOperationState;
  }
  if (serializeOperationState === 1) {
    return (function (input) {
              return struct.s(input);
            });
  }
  struct.e = 1;
  var fn = compile(struct.sf, struct);
  var compiledSerializeOperation;
  if (typeof fn !== "object") {
    compiledSerializeOperation = undefined;
  } else if (fn.TAG === "SyncOperation") {
    compiledSerializeOperation = fn._0;
  } else {
    throw new Error("[rescript-struct] Unreachable");
  }
  struct.e = compiledSerializeOperation;
  return compiledSerializeOperation;
}

function raiseUnexpectedTypeError(input, struct) {
  var number = classify(input);
  var tmp;
  if (typeof number !== "object") {
    switch (number) {
      case "JSFalse" :
      case "JSTrue" :
          tmp = "Bool";
          break;
      case "JSNull" :
          tmp = "Null";
          break;
      case "JSUndefined" :
          tmp = "Option";
          break;
      
    }
  } else {
    switch (number.TAG) {
      case "JSNumber" :
          tmp = Number.isNaN(number._0) ? "NaN Literal (NaN)" : "Float";
          break;
      case "JSString" :
          tmp = "String";
          break;
      case "JSFunction" :
          tmp = "Function";
          break;
      case "JSObject" :
          tmp = Array.isArray(number._0) ? "Array" : "Object";
          break;
      case "JSSymbol" :
          tmp = "Symbol";
          break;
      case "JSBigInt" :
          tmp = "BigInt";
          break;
      
    }
  }
  return raise$1({
              TAG: "UnexpectedType",
              expected: struct.n,
              received: tmp
            });
}

function noOperation(input) {
  return input;
}

function initialSerialize(input) {
  var struct = this;
  var fn = getSerializeOperation(struct);
  var compiledSerialize = fn !== undefined ? fn : noOperation;
  struct.s = compiledSerialize;
  return compiledSerialize(input);
}

function validateJsonableStruct(_struct, rootStruct, _isRootOpt, _param) {
  while(true) {
    var isRootOpt = _isRootOpt;
    var struct = _struct;
    var isRoot = isRootOpt !== undefined ? isRootOpt : false;
    if (!(isRoot || rootStruct !== struct)) {
      return ;
    }
    var childrenStructs = struct.t;
    var exit = 0;
    if (typeof childrenStructs !== "object") {
      if (childrenStructs !== "Unknown") {
        return ;
      }
      exit = 2;
    } else {
      switch (childrenStructs.TAG) {
        case "Literal" :
            var tmp = childrenStructs._0;
            if (typeof tmp === "object") {
              return ;
            }
            switch (tmp) {
              case "EmptyOption" :
              case "NaN" :
                  exit = 2;
                  break;
              default:
                return ;
            }
            break;
        case "Option" :
            exit = 2;
            break;
        case "Object" :
            var fieldNames = childrenStructs.fieldNames;
            var fields = childrenStructs.fields;
            for(var idx = 0 ,idx_finish = fieldNames.length; idx < idx_finish; ++idx){
              var fieldName = fieldNames[idx];
              var fieldStruct = fields[fieldName];
              try {
                var s = fieldStruct.t;
                var tmp$1;
                tmp$1 = typeof s !== "object" || s.TAG !== "Option" ? fieldStruct : s._0;
                validateJsonableStruct(tmp$1, rootStruct, undefined, undefined);
              }
              catch (raw_e){
                var e = internalToOCamlException(raw_e);
                if (e.RE_EXN_ID === Exception) {
                  throw {
                        RE_EXN_ID: Exception,
                        _1: prependLocation(e._1, fieldName),
                        Error: new Error()
                      };
                }
                throw e;
              }
            }
            return ;
        case "Tuple" :
            childrenStructs._0.forEach(function (childStruct, i) {
                  try {
                    return validateJsonableStruct(childStruct, rootStruct, undefined, undefined);
                  }
                  catch (raw_e){
                    var e = internalToOCamlException(raw_e);
                    if (e.RE_EXN_ID === Exception) {
                      throw {
                            RE_EXN_ID: Exception,
                            _1: prependLocation(e._1, i.toString()),
                            Error: new Error()
                          };
                    }
                    throw e;
                  }
                });
            return ;
        case "Union" :
            childrenStructs._0.forEach(function (childStruct) {
                  validateJsonableStruct(childStruct, rootStruct, undefined);
                });
            return ;
        case "Null" :
        case "Array" :
        case "Dict" :
            exit = 1;
            break;
        
      }
    }
    switch (exit) {
      case 1 :
          _isRootOpt = undefined;
          _struct = childrenStructs._0;
          continue ;
      case 2 :
          return raise$1({
                      TAG: "InvalidJsonStruct",
                      received: struct.n
                    });
      
    }
  }}

function initialSerializeToJson(input) {
  var struct = this;
  try {
    validateJsonableStruct(struct, struct, true, undefined);
    if (struct.s === initialSerialize) {
      var fn = getSerializeOperation(struct);
      var compiledSerialize = fn !== undefined ? fn : noOperation;
      struct.s = compiledSerialize;
    }
    struct.j = struct.s;
  }
  catch (raw_exn){
    var exn = internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Exception) {
      struct.j = (function (param) {
          throw exn;
        });
    } else {
      throw exn;
    }
  }
  return struct.j(input);
}

function intitialParse(input) {
  var struct = this;
  var fn = getParseOperation(struct);
  var compiledParse;
  compiledParse = typeof fn !== "object" ? noOperation : (
      fn.TAG === "SyncOperation" ? fn._0 : (function (param) {
            return raise$1("UnexpectedAsync");
          })
    );
  struct.p = compiledParse;
  return compiledParse(input);
}

function asyncNoopOperation(input) {
  return function () {
    return Promise.resolve(input);
  };
}

function intitialParseAsync(input) {
  var struct = this;
  var fn = getParseOperation(struct);
  var compiledParseAsync;
  if (typeof fn !== "object") {
    compiledParseAsync = asyncNoopOperation;
  } else if (fn.TAG === "SyncOperation") {
    var fn$1 = fn._0;
    compiledParseAsync = (function (input) {
        var syncValue = fn$1(input);
        return function () {
          return Promise.resolve(syncValue);
        };
      });
  } else {
    compiledParseAsync = fn._0;
  }
  struct.a = compiledParseAsync;
  return compiledParseAsync(input);
}

function parseAnyWith(any, struct) {
  try {
    return {
            TAG: "Ok",
            _0: struct.p(any)
          };
  }
  catch (raw_internalError){
    var internalError = internalToOCamlException(raw_internalError);
    if (internalError.RE_EXN_ID === Exception) {
      return {
              TAG: "Error",
              _0: toParseError(internalError._1)
            };
    }
    throw internalError;
  }
}

function serializeWith(value, struct) {
  try {
    return {
            TAG: "Ok",
            _0: struct.j(value)
          };
  }
  catch (raw_internalError){
    var internalError = internalToOCamlException(raw_internalError);
    if (internalError.RE_EXN_ID === Exception) {
      return {
              TAG: "Error",
              _0: toSerializeError(internalError._1)
            };
    }
    throw internalError;
  }
}

function serializeToJsonWith(value, spaceOpt, struct) {
  var space = spaceOpt !== undefined ? spaceOpt : 0;
  var json = serializeWith(value, struct);
  if (json.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: JSON.stringify(json._0, null, space)
          };
  } else {
    return json;
  }
}

function parseJsonWith(json, struct) {
  var json$1;
  try {
    json$1 = {
      TAG: "Ok",
      _0: JSON.parse(json)
    };
  }
  catch (raw_error){
    var error = internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === $$Error$1) {
      json$1 = {
        TAG: "Error",
        _0: {
          operation: "Parsing",
          code: {
            TAG: "OperationFailed",
            _0: error._1.message
          },
          path: ""
        }
      };
    } else {
      throw error;
    }
  }
  if (json$1.TAG === "Ok") {
    return parseAnyWith(json$1._0, struct);
  } else {
    return json$1;
  }
}

function set(struct, id, metadata) {
  var metadataMap = Object.assign({}, struct.m);
  metadataMap[id] = metadata;
  return {
          n: struct.n,
          t: struct.t,
          pf: struct.pf,
          sf: struct.sf,
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: undefined,
          m: metadataMap
        };
}

function custom(name, maybeParser, maybeAsyncParser, maybeSerializer, param) {
  if (maybeParser === undefined && maybeAsyncParser === undefined && maybeSerializer === undefined) {
    panic("Custom struct factory");
  }
  var planParser;
  if (maybeParser !== undefined) {
    if (maybeAsyncParser !== undefined) {
      throw new Error("[rescript-struct] The S.custom doesn't support the `parser` and `asyncParser` arguments simultaneously. Keep only `asyncParser`.");
    }
    planParser = (function (ctx) {
        planSyncTransformation(ctx, maybeParser);
      });
  } else {
    planParser = maybeAsyncParser !== undefined ? (function (ctx) {
          planAsyncTransformation(ctx, maybeAsyncParser);
        }) : planMissingParserTransformation;
  }
  return {
          n: name,
          t: "Unknown",
          pf: (function (ctx) {
              planParser(ctx);
            }),
          sf: (function (ctx) {
              if (maybeSerializer !== undefined) {
                return planSyncTransformation(ctx, maybeSerializer);
              } else {
                return planMissingSerializerTransformation(ctx);
              }
            }),
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: undefined,
          m: emptyMetadataMap
        };
}

function internalToInlinedValue(_struct) {
  while(true) {
    var struct = _struct;
    var unionStructs = struct.t;
    if (typeof unionStructs !== "object") {
      throw undefined;
    }
    switch (unionStructs.TAG) {
      case "Literal" :
          var string = unionStructs._0;
          if (typeof string === "object") {
            if (string.TAG === "String") {
              return JSON.stringify(string._0);
            } else {
              return string._0.toString();
            }
          }
          switch (string) {
            case "EmptyNull" :
                return "null";
            case "EmptyOption" :
                return "undefined";
            case "NaN" :
                return "NaN";
            
          }
      case "Object" :
          var fields = unionStructs.fields;
          return "{" + unionStructs.fieldNames.map((function(fields){
                      return function (fieldName) {
                        return JSON.stringify(fieldName) + ":" + internalToInlinedValue(fields[fieldName]);
                      }
                      }(fields))).join(",") + "}";
      case "Tuple" :
          return "[" + unionStructs._0.map(internalToInlinedValue).join(",") + "]";
      case "Union" :
          _struct = unionStructs._0[0];
          continue ;
      default:
        throw undefined;
    }
  }}

function analyzeDefinition(definition, definerCtx, path) {
  if (definition === definerCtx) {
    if (definerCtx.r) {
      throw new Error("[rescript-struct] The variant's value is registered multiple times. If you want to duplicate it, use S.transform instead.");
    }
    definerCtx.a = path;
    definerCtx.r = true;
    return ;
  }
  if (typeof definition === "object" && definition !== null) {
    var definitionFieldNames = Object.keys(definition);
    for(var idx = 0 ,idx_finish = definitionFieldNames.length; idx < idx_finish; ++idx){
      var definitionFieldName = definitionFieldNames[idx];
      var fieldDefinition = definition[definitionFieldName];
      analyzeDefinition(fieldDefinition, definerCtx, path + ("[" + JSON.stringify(definitionFieldName) + "]"));
    }
    return ;
  }
  definerCtx.c.push({
        v: definition,
        p: path
      });
}

function factory(struct, definer) {
  var definerCtx = {
    a: "",
    r: false,
    c: []
  };
  var definition = definer(definerCtx);
  analyzeDefinition(definition, definerCtx, "");
  return {
          n: struct.n,
          t: struct.t,
          pf: (function (ctx) {
              struct.pf(ctx);
              planSyncTransformation(ctx, definer);
            }),
          sf: (function (ctx) {
              ((function (ctx) {
                      try {
                        var valuePath = definerCtx.a;
                        var isValueRegistered = definerCtx.r;
                        var constantDefinitions = definerCtx.c;
                        var stringRef = "";
                        for(var idx = 0 ,idx_finish = constantDefinitions.length; idx < idx_finish; ++idx){
                          var match = constantDefinitions[idx];
                          var path = match.p;
                          var content = "r(" + idx.toString() + ",t" + path + ")";
                          var condition = "t" + path + "!==d[" + idx.toString() + "].v";
                          stringRef = stringRef + ("if(" + condition + "){" + content + "}");
                        }
                        var constants = stringRef;
                        var content$1 = constants + "return " + (
                          isValueRegistered ? "t" + valuePath : internalToInlinedValue(ctx.s)
                        );
                        var inlinedSerializeFunction = "function(t){" + content$1 + "}";
                        planSyncTransformation(ctx, new Function("d", "r", "return " + inlinedSerializeFunction)(constantDefinitions, (function (fieldDefinitionIdx, received) {
                                    var match = constantDefinitions[fieldDefinitionIdx];
                                    return raise(match.v, received, match.p, undefined);
                                  })));
                      }
                      catch (exn){
                        planSyncTransformation(ctx, (function (param) {
                                return raise$1("MissingSerializer");
                              }));
                      }
                    })(ctx));
              struct.sf(ctx);
            }),
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: undefined,
          m: struct.m
        };
}

function factory$1(innerLiteral, variant) {
  var tagged = {
    TAG: "Literal",
    _0: innerLiteral
  };
  var makeParseTransformationFactory = function (literalValue, test) {
    return function (ctx) {
      planSyncTransformation(ctx, (function (input) {
              if (test(input)) {
                if (literalValue === input) {
                  return variant;
                } else {
                  return raise(literalValue, input, undefined);
                }
              } else {
                return raiseUnexpectedTypeError(input, ctx.s);
              }
            }));
    };
  };
  var makeSerializeTransformationFactory = function (output) {
    return function (ctx) {
      planSyncTransformation(ctx, (function (input) {
              if (input === variant) {
                return output;
              } else {
                return raise(variant, input, undefined);
              }
            }));
    };
  };
  if (typeof innerLiteral !== "object") {
    switch (innerLiteral) {
      case "EmptyNull" :
          var serializeTransformationFactory = makeSerializeTransformationFactory(null);
          return {
                  n: "EmptyNull Literal (null)",
                  t: tagged,
                  pf: (function (ctx) {
                      planSyncTransformation(ctx, (function (input) {
                              if (input === null) {
                                return variant;
                              } else {
                                return raiseUnexpectedTypeError(input, ctx.s);
                              }
                            }));
                    }),
                  sf: serializeTransformationFactory,
                  r: 0,
                  e: 0,
                  s: initialSerialize,
                  j: initialSerializeToJson,
                  p: intitialParse,
                  a: intitialParseAsync,
                  i: undefined,
                  m: emptyMetadataMap
                };
      case "EmptyOption" :
          var serializeTransformationFactory$1 = makeSerializeTransformationFactory(undefined);
          return {
                  n: "EmptyOption Literal (undefined)",
                  t: tagged,
                  pf: (function (ctx) {
                      planSyncTransformation(ctx, (function (input) {
                              if (input === undefined) {
                                return variant;
                              } else {
                                return raiseUnexpectedTypeError(input, ctx.s);
                              }
                            }));
                    }),
                  sf: serializeTransformationFactory$1,
                  r: 0,
                  e: 0,
                  s: initialSerialize,
                  j: initialSerializeToJson,
                  p: intitialParse,
                  a: intitialParseAsync,
                  i: undefined,
                  m: emptyMetadataMap
                };
      case "NaN" :
          var serializeTransformationFactory$2 = makeSerializeTransformationFactory(NaN);
          return {
                  n: "NaN Literal (NaN)",
                  t: tagged,
                  pf: (function (ctx) {
                      planSyncTransformation(ctx, (function (input) {
                              if (Number.isNaN(input)) {
                                return variant;
                              } else {
                                return raiseUnexpectedTypeError(input, ctx.s);
                              }
                            }));
                    }),
                  sf: serializeTransformationFactory$2,
                  r: 0,
                  e: 0,
                  s: initialSerialize,
                  j: initialSerializeToJson,
                  p: intitialParse,
                  a: intitialParseAsync,
                  i: undefined,
                  m: emptyMetadataMap
                };
      
    }
  } else {
    switch (innerLiteral.TAG) {
      case "String" :
          var string = innerLiteral._0;
          var serializeTransformationFactory$3 = makeSerializeTransformationFactory(string);
          var parseTransformationFactory = makeParseTransformationFactory(string, (function (input) {
                  return typeof input === "string";
                }));
          return {
                  n: "String Literal (\"" + string + "\")",
                  t: tagged,
                  pf: parseTransformationFactory,
                  sf: serializeTransformationFactory$3,
                  r: 0,
                  e: 0,
                  s: initialSerialize,
                  j: initialSerializeToJson,
                  p: intitialParse,
                  a: intitialParseAsync,
                  i: undefined,
                  m: emptyMetadataMap
                };
      case "Int" :
          var $$int = innerLiteral._0;
          var serializeTransformationFactory$4 = makeSerializeTransformationFactory($$int);
          var parseTransformationFactory$1 = makeParseTransformationFactory($$int, test);
          var name = "Int Literal (" + $$int.toString() + ")";
          return {
                  n: name,
                  t: tagged,
                  pf: parseTransformationFactory$1,
                  sf: serializeTransformationFactory$4,
                  r: 0,
                  e: 0,
                  s: initialSerialize,
                  j: initialSerializeToJson,
                  p: intitialParse,
                  a: intitialParseAsync,
                  i: undefined,
                  m: emptyMetadataMap
                };
      case "Float" :
          var $$float = innerLiteral._0;
          var serializeTransformationFactory$5 = makeSerializeTransformationFactory($$float);
          var parseTransformationFactory$2 = makeParseTransformationFactory($$float, (function (input) {
                  return typeof input === "number";
                }));
          var name$1 = "Float Literal (" + $$float.toString() + ")";
          return {
                  n: name$1,
                  t: tagged,
                  pf: parseTransformationFactory$2,
                  sf: serializeTransformationFactory$5,
                  r: 0,
                  e: 0,
                  s: initialSerialize,
                  j: initialSerializeToJson,
                  p: intitialParse,
                  a: intitialParseAsync,
                  i: undefined,
                  m: emptyMetadataMap
                };
      case "Bool" :
          var bool = innerLiteral._0;
          var serializeTransformationFactory$6 = makeSerializeTransformationFactory(bool);
          var parseTransformationFactory$3 = makeParseTransformationFactory(bool, (function (input) {
                  return typeof input === "boolean";
                }));
          var name$2 = "Bool Literal (" + bool.toString() + ")";
          return {
                  n: name$2,
                  t: tagged,
                  pf: parseTransformationFactory$3,
                  sf: serializeTransformationFactory$6,
                  r: 0,
                  e: 0,
                  s: initialSerialize,
                  j: initialSerializeToJson,
                  p: intitialParse,
                  a: intitialParseAsync,
                  i: undefined,
                  m: emptyMetadataMap
                };
      
    }
  }
}

function factory$2(innerLiteral) {
  if (typeof innerLiteral === "object") {
    return factory$1(innerLiteral, innerLiteral._0);
  }
  switch (innerLiteral) {
    case "EmptyNull" :
    case "EmptyOption" :
    case "NaN" :
        return factory$1(innerLiteral, undefined);
    
  }
}

var metadataId = "rescript-struct:Object.UnknownKeys";

function classify$1(struct) {
  var t = get(struct.m, metadataId);
  if (t !== undefined) {
    return t;
  } else {
    return "Strip";
  }
}

function analyzeDefinition$1(definition, definerCtx, path) {
  if (definerCtx.s.has(definition)) {
    if (definition.r) {
      throw new Error("[rescript-struct] " + ("The field \"" + definition.n + "\" is registered multiple times. If you want to duplicate a field, use S.transform instead."));
    }
    definition.p = path;
    definition.r = true;
    return ;
  }
  if (typeof definition === "object" && definition !== null) {
    definerCtx.p.push(path);
    definerCtx.v.push(Array.isArray(definition) ? "[]" : "{}");
    var definitionFieldNames = Object.keys(definition);
    for(var idx = 0 ,idx_finish = definitionFieldNames.length; idx < idx_finish; ++idx){
      var definitionFieldName = definitionFieldNames[idx];
      var fieldDefinition = definition[definitionFieldName];
      analyzeDefinition$1(fieldDefinition, definerCtx, path + ("[" + JSON.stringify(definitionFieldName) + "]"));
    }
    return ;
  }
  definerCtx.c.push({
        v: definition,
        p: path
      });
}

function factory$3(definer) {
  var definerCtx_n = [];
  var definerCtx_f = {};
  var definerCtx_d = [];
  var definerCtx_p = [];
  var definerCtx_v = [];
  var definerCtx_c = [];
  var definerCtx_s = new Set();
  var definerCtx = {
    n: definerCtx_n,
    f: definerCtx_f,
    d: definerCtx_d,
    p: definerCtx_p,
    v: definerCtx_v,
    c: definerCtx_c,
    s: definerCtx_s
  };
  var definition = definer(definerCtx);
  analyzeDefinition$1(definition, definerCtx, "");
  return {
          n: "Object",
          t: {
            TAG: "Object",
            fields: definerCtx_f,
            fieldNames: definerCtx_n
          },
          pf: (function (ctx) {
              var constantDefinitions = definerCtx_c;
              var inlinedPreparationValues = definerCtx_v;
              var preparationPathes = definerCtx_p;
              var fieldDefinitions = definerCtx_d;
              var withUnknownKeysRefinement = classify$1(ctx.s) === "Strict";
              var asyncFieldDefinitions = [];
              var parseFnsByInstructionIdx = {};
              var withFieldDefinitions = fieldDefinitions.length !== 0;
              var refinement = "if(!(typeof o===\"object\"&&o!==null&&!Array.isArray(o))){u(o)}";
              var stringRef = "var t;";
              for(var idx = 0 ,idx_finish = preparationPathes.length; idx < idx_finish; ++idx){
                var preparationPath = preparationPathes[idx];
                var preparationInlinedValue = inlinedPreparationValues[idx];
                stringRef = stringRef + ("t" + preparationPath + "=" + preparationInlinedValue + ";");
              }
              var preparation = stringRef;
              var transformedObjectConstruction;
              if (withFieldDefinitions) {
                var stringRef$1 = "";
                for(var idx$1 = 0 ,idx_finish$1 = fieldDefinitions.length; idx$1 < idx_finish$1; ++idx$1){
                  var fieldDefinition = fieldDefinitions[idx$1];
                  var inlinedFieldName = fieldDefinition.i;
                  var fieldStruct = fieldDefinition.s;
                  var path = fieldDefinition.p;
                  var isRegistered = fieldDefinition.r;
                  var inlinedIdx = idx$1.toString();
                  var parseOperation = getParseOperation(fieldStruct);
                  var maybeParseFn;
                  maybeParseFn = typeof parseOperation !== "object" ? undefined : parseOperation._0;
                  var isAsync;
                  isAsync = typeof parseOperation !== "object" || parseOperation.TAG === "SyncOperation" ? false : true;
                  var inlinedInputData = "o[" + inlinedFieldName + "]";
                  var maybeInlinedDestination;
                  if (isAsync) {
                    if (asyncFieldDefinitions.length === 0) {
                      stringRef$1 = stringRef$1 + "var a={};";
                    }
                    if (isRegistered) {
                      stringRef$1 = stringRef$1 + ("t" + path + "=undefined;");
                    }
                    var inlinedDestination = "a[" + asyncFieldDefinitions.length.toString() + "]";
                    asyncFieldDefinitions.push(fieldDefinition);
                    maybeInlinedDestination = inlinedDestination;
                  } else {
                    maybeInlinedDestination = isRegistered ? "t" + path : undefined;
                  }
                  var match = fieldStruct.i;
                  stringRef$1 = stringRef$1 + (
                    maybeParseFn !== undefined ? (
                        match !== undefined ? "var v=" + inlinedInputData + ";if(" + match + "){" + (
                            maybeInlinedDestination !== undefined ? maybeInlinedDestination + "=v" : ""
                          ) + "}else{i=" + inlinedIdx + ";s(v,f[" + inlinedFieldName + "])}" : (parseFnsByInstructionIdx[inlinedIdx] = maybeParseFn, "i=" + inlinedIdx + ";" + (
                              maybeInlinedDestination !== undefined ? maybeInlinedDestination + "=" : ""
                            ) + "p[" + inlinedIdx + "](" + inlinedInputData + ");")
                      ) : (
                        maybeInlinedDestination !== undefined ? maybeInlinedDestination + "=" + inlinedInputData + ";" : ""
                      )
                  );
                }
                var tryContent = stringRef$1;
                transformedObjectConstruction = "var i;" + ("try{" + tryContent + "}catch(e){c(e,i)}");
              } else {
                transformedObjectConstruction = "";
              }
              var unknownKeysRefinement;
              if (withUnknownKeysRefinement) {
                if (withFieldDefinitions) {
                  var stringRef$2 = "for(var k in o){if(!(";
                  for(var idx$2 = 0 ,idx_finish$2 = fieldDefinitions.length; idx$2 < idx_finish$2; ++idx$2){
                    var fieldDefinition$1 = fieldDefinitions[idx$2];
                    if (idx$2 !== 0) {
                      stringRef$2 = stringRef$2 + "||";
                    }
                    stringRef$2 = stringRef$2 + ("k===" + fieldDefinition$1.i);
                  }
                  unknownKeysRefinement = stringRef$2 + ")){x(k)}}";
                } else {
                  unknownKeysRefinement = "for(var k in o){x(k)}";
                }
              } else {
                unknownKeysRefinement = "";
              }
              var stringRef$3 = "";
              for(var idx$3 = 0 ,idx_finish$3 = constantDefinitions.length; idx$3 < idx_finish$3; ++idx$3){
                var constantDefinition = constantDefinitions[idx$3];
                stringRef$3 = stringRef$3 + ("t" + constantDefinition.p + "=d[" + idx$3.toString() + "].v;");
              }
              var constants = stringRef$3;
              var returnValue = asyncFieldDefinitions.length === 0 ? "t" : "a.t=t,a";
              var inlinedParseFunction = "function(o){" + (refinement + preparation + transformedObjectConstruction + unknownKeysRefinement + constants + "return " + returnValue) + "}";
              planSyncTransformation(ctx, new Function("c", "p", "f", "d", "u", "s", "x", "return " + inlinedParseFunction)((function (exn, fieldDefinitionIdx) {
                          throw exn.RE_EXN_ID === Exception ? ({
                                    RE_EXN_ID: Exception,
                                    _1: prependLocation(exn._1, fieldDefinitions[fieldDefinitionIdx].n)
                                  }) : exn;
                        }), parseFnsByInstructionIdx, definerCtx_f, constantDefinitions, (function (input) {
                          return raiseUnexpectedTypeError(input, ctx.s);
                        }), raiseUnexpectedTypeError, (function (exccessFieldName) {
                          return raise$1({
                                      TAG: "ExcessField",
                                      _0: exccessFieldName
                                    });
                        })));
              if (asyncFieldDefinitions.length <= 0) {
                return ;
              }
              var resolveVar = "rs";
              var rejectVar = "rj";
              var contentRef = "var y=" + asyncFieldDefinitions.length.toString() + ",t=a.t;";
              for(var idx$4 = 0 ,idx_finish$4 = asyncFieldDefinitions.length; idx$4 < idx_finish$4; ++idx$4){
                var fieldDefinition$2 = asyncFieldDefinitions[idx$4];
                var path$1 = fieldDefinition$2.p;
                var isRegistered$1 = fieldDefinition$2.r;
                var inlinedIdx$1 = idx$4.toString();
                var fieldValueVar = "z";
                var inlinedFieldValueAssignment = isRegistered$1 ? "t" + path$1 + "=" + fieldValueVar : "";
                var inlinedIteration = "if(y--===1){" + (resolveVar + "(t)") + "}";
                var onFieldSuccessInlinedFnContent = inlinedFieldValueAssignment + ";" + inlinedIteration;
                var onFieldSuccessInlinedFn = "function(" + fieldValueVar + "){" + onFieldSuccessInlinedFnContent + "}";
                var errorVar = "z";
                var onFieldErrorInlinedFn = "function(" + errorVar + "){" + (rejectVar + "(j(" + errorVar + "," + inlinedIdx$1 + "))") + "}";
                contentRef = contentRef + ("a[" + inlinedIdx$1 + "]().then(" + onFieldSuccessInlinedFn + "," + onFieldErrorInlinedFn + ");");
              }
              var content = contentRef;
              var inlinedAsyncParseFunction = "function(a){return " + ("new Promise(function(" + resolveVar + "," + rejectVar + "){" + content + "})") + "}";
              planAsyncTransformation(ctx, new Function("j", "return " + inlinedAsyncParseFunction)(function (exn, asyncFieldDefinitionIdx) {
                        if (exn.RE_EXN_ID === Exception) {
                          return {
                                  RE_EXN_ID: Exception,
                                  _1: prependLocation(exn._1, asyncFieldDefinitions[asyncFieldDefinitionIdx].n)
                                };
                        } else {
                          return exn;
                        }
                      }));
            }),
          sf: (function (ctx) {
              var inliningFieldNameRef = undefined;
              try {
                var constantDefinitions = definerCtx_c;
                var fieldDefinitions = definerCtx_d;
                var serializeFnsByFieldDefinitionIdx = {};
                var stringRef = "";
                for(var idx = 0 ,idx_finish = constantDefinitions.length; idx < idx_finish; ++idx){
                  var match = constantDefinitions[idx];
                  var path = match.p;
                  var content = "r(" + idx.toString() + ",t" + path + ")";
                  var condition = "t" + path + "!==d[" + idx.toString() + "].v";
                  stringRef = stringRef + ("if(" + condition + "){" + content + "}");
                }
                var constants = stringRef;
                var contentRef = "var i;return{";
                for(var idx$1 = 0 ,idx_finish$1 = fieldDefinitions.length; idx$1 < idx_finish$1; ++idx$1){
                  var fieldDefinition = fieldDefinitions[idx$1];
                  var inlinedFieldName = fieldDefinition.i;
                  var fieldStruct = fieldDefinition.s;
                  var path$1 = fieldDefinition.p;
                  var isRegistered = fieldDefinition.r;
                  var inlinedIdx = idx$1.toString();
                  var tmp;
                  if (isRegistered) {
                    var fn = getSerializeOperation(fieldStruct);
                    if (fn !== undefined) {
                      serializeFnsByFieldDefinitionIdx[inlinedIdx] = fn;
                      tmp = inlinedFieldName + ":(i=" + inlinedIdx + ",s[" + inlinedIdx + "](t" + path$1 + ")),";
                    } else {
                      tmp = inlinedFieldName + ":t" + path$1 + ",";
                    }
                  } else {
                    inliningFieldNameRef = fieldDefinition.n;
                    tmp = inlinedFieldName + ":" + internalToInlinedValue(fieldStruct) + ",";
                  }
                  contentRef = contentRef + tmp;
                }
                var tryContent = contentRef + "}";
                var originalObjectConstructionAndReturn = "try{" + tryContent + "}catch(e){c(e,i)}";
                var inlinedSerializeFunction = "function(t){" + (constants + originalObjectConstructionAndReturn) + "}";
                planSyncTransformation(ctx, new Function("s", "d", "r", "c", "return " + inlinedSerializeFunction)(serializeFnsByFieldDefinitionIdx, constantDefinitions, (function (fieldDefinitionIdx, received) {
                            var match = constantDefinitions[fieldDefinitionIdx];
                            return raise(match.v, received, match.p, undefined);
                          }), (function (exn, fieldDefinitionIdx) {
                            var tmp;
                            if (exn.RE_EXN_ID === Exception) {
                              var match = fieldDefinitions[fieldDefinitionIdx];
                              var path = match.p;
                              tmp = {
                                RE_EXN_ID: Exception,
                                _1: prependPath(exn._1, path)
                              };
                            } else {
                              tmp = exn;
                            }
                            throw tmp;
                          })));
              }
              catch (exn){
                var inliningOriginalFieldName = inliningFieldNameRef;
                planSyncTransformation(ctx, (function (param) {
                        throw {
                              RE_EXN_ID: Exception,
                              _1: {
                                c: "MissingSerializer",
                                p: "[" + JSON.stringify(inliningOriginalFieldName) + "]"
                              },
                              Error: new Error()
                            };
                      }));
              }
            }),
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: undefined,
          m: emptyMetadataMap
        };
}

function field(definerCtx, fieldName, struct) {
  if (definerCtx.f.hasOwnProperty(fieldName)) {
    throw new Error("[rescript-struct] " + ("The field \"" + fieldName + "\" is defined multiple times. If you want to duplicate a field, use S.transform instead."));
  }
  var fieldDefinition = {
    s: struct,
    i: JSON.stringify(fieldName),
    n: fieldName,
    p: "",
    r: false
  };
  definerCtx.f[fieldName] = struct;
  definerCtx.n.push(fieldName);
  definerCtx.d.push(fieldDefinition);
  definerCtx.s.add(fieldDefinition);
  return fieldDefinition;
}

function parseTransformationFactory(ctx) {
  planSyncTransformation(ctx, (function (input) {
          if (typeof input === "string") {
            return input;
          } else {
            return raiseUnexpectedTypeError(input, ctx.s);
          }
        }));
}

function factory$6() {
  return {
          n: "String",
          t: "String",
          pf: parseTransformationFactory,
          sf: empty,
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: "typeof v===\"string\"",
          m: emptyMetadataMap
        };
}

function parseTransformationFactory$1(ctx) {
  planSyncTransformation(ctx, (function (input) {
          if (typeof input === "boolean") {
            return input;
          } else {
            return raiseUnexpectedTypeError(input, ctx.s);
          }
        }));
}

function factory$8() {
  return {
          n: "Bool",
          t: "Bool",
          pf: parseTransformationFactory$1,
          sf: empty,
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: "typeof v===\"boolean\"",
          m: emptyMetadataMap
        };
}

function parseTransformationFactory$2(ctx) {
  planSyncTransformation(ctx, (function (input) {
          if (typeof input === "number" && input < 2147483648 && input > -2147483649 && input % 1 === 0) {
            return input;
          } else {
            return raiseUnexpectedTypeError(input, ctx.s);
          }
        }));
}

function factory$9() {
  return {
          n: "Int",
          t: "Int",
          pf: parseTransformationFactory$2,
          sf: empty,
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: "typeof v===\"number\"&&v<2147483648&&v>-2147483649&&v%1===0",
          m: emptyMetadataMap
        };
}

function parseTransformationFactory$3(ctx) {
  planSyncTransformation(ctx, (function (input) {
          if (typeof input === "number" && !Number.isNaN(input)) {
            return input;
          } else {
            return raiseUnexpectedTypeError(input, ctx.s);
          }
        }));
}

function factory$10() {
  return {
          n: "Float",
          t: "Float",
          pf: parseTransformationFactory$3,
          sf: empty,
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: "typeof v===\"number\"&&!Number.isNaN(v)",
          m: emptyMetadataMap
        };
}

function factory$11(innerStruct) {
  return {
          n: "Null",
          t: {
            TAG: "Null",
            _0: innerStruct
          },
          pf: (function (ctx) {
              var planSyncTransformation$1 = function (fn) {
                planSyncTransformation(ctx, (function (input) {
                        if (input !== null) {
                          return some(fn(input));
                        }
                        
                      }));
              };
              var fn = getParseOperation(innerStruct);
              if (typeof fn !== "object") {
                return planSyncTransformation(ctx, (function ($$null) {
                              if ($$null === null) {
                                return ;
                              } else {
                                return some($$null);
                              }
                            }));
              }
              if (fn.TAG === "SyncOperation") {
                return planSyncTransformation$1(fn._0);
              }
              planSyncTransformation$1(fn._0);
              planAsyncTransformation(ctx, (function (input) {
                      if (input !== undefined) {
                        return input(undefined).then(function (value) {
                                    return some(value);
                                  });
                      } else {
                        return Promise.resolve(undefined);
                      }
                    }));
            }),
          sf: (function (ctx) {
              var fn = getSerializeOperation(innerStruct);
              if (fn !== undefined) {
                return planSyncTransformation(ctx, (function (input) {
                              if (input !== undefined) {
                                return fn(valFromOption(input));
                              } else {
                                return null;
                              }
                            }));
              } else {
                return planSyncTransformation(ctx, (function (input) {
                              if (input !== undefined) {
                                return valFromOption(input);
                              } else {
                                return null;
                              }
                            }));
              }
            }),
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: undefined,
          m: emptyMetadataMap
        };
}

function factory$12(innerStruct) {
  return {
          n: "Option",
          t: {
            TAG: "Option",
            _0: innerStruct
          },
          pf: (function (ctx) {
              var planSyncTransformation$1 = function (fn) {
                planSyncTransformation(ctx, (function (input) {
                        if (input !== undefined) {
                          return some(fn(valFromOption(input)));
                        }
                        
                      }));
              };
              var fn = getParseOperation(innerStruct);
              if (typeof fn !== "object") {
                return ;
              }
              if (fn.TAG === "SyncOperation") {
                return planSyncTransformation$1(fn._0);
              }
              planSyncTransformation$1(fn._0);
              planAsyncTransformation(ctx, (function (input) {
                      if (input !== undefined) {
                        return input(undefined).then(function (value) {
                                    return some(value);
                                  });
                      } else {
                        return Promise.resolve(undefined);
                      }
                    }));
            }),
          sf: (function (ctx) {
              var fn = getSerializeOperation(innerStruct);
              if (fn !== undefined) {
                return planSyncTransformation(ctx, (function (input) {
                              if (input !== undefined) {
                                return fn(valFromOption(input));
                              }
                              
                            }));
              } else {
                return planSyncTransformation(ctx, (function (input) {
                              if (input !== undefined) {
                                return valFromOption(input);
                              }
                              
                            }));
              }
            }),
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: undefined,
          m: emptyMetadataMap
        };
}

function factory$13(innerStruct) {
  return {
          n: "Array",
          t: {
            TAG: "Array",
            _0: innerStruct
          },
          pf: (function (ctx) {
              planSyncTransformation(ctx, (function (input) {
                      if (Array.isArray(input) === false) {
                        return raiseUnexpectedTypeError(input, ctx.s);
                      } else {
                        return input;
                      }
                    }));
              var planSyncTransformation$1 = function (fn) {
                planSyncTransformation(ctx, (function (input) {
                        var newArray = [];
                        for(var idx = 0 ,idx_finish = input.length; idx < idx_finish; ++idx){
                          var innerData = input[idx];
                          try {
                            var value = fn(innerData);
                            newArray.push(value);
                          }
                          catch (raw_internalError){
                            var internalError = internalToOCamlException(raw_internalError);
                            if (internalError.RE_EXN_ID === Exception) {
                              throw {
                                    RE_EXN_ID: Exception,
                                    _1: prependLocation(internalError._1, idx.toString()),
                                    Error: new Error()
                                  };
                            }
                            throw internalError;
                          }
                        }
                        return newArray;
                      }));
              };
              var fn = getParseOperation(innerStruct);
              if (typeof fn !== "object") {
                return ;
              }
              if (fn.TAG === "SyncOperation") {
                return planSyncTransformation$1(fn._0);
              }
              planSyncTransformation$1(fn._0);
              planAsyncTransformation(ctx, (function (input) {
                      return Promise.all(input.map(function (asyncFn, idx) {
                                      return asyncFn(undefined).catch(function (exn) {
                                                  throw exn.RE_EXN_ID === Exception ? ({
                                                            RE_EXN_ID: Exception,
                                                            _1: prependLocation(exn._1, idx.toString())
                                                          }) : exn;
                                                });
                                    }));
                    }));
            }),
          sf: (function (ctx) {
              var fn = getSerializeOperation(innerStruct);
              if (fn !== undefined) {
                return planSyncTransformation(ctx, (function (input) {
                              var newArray = [];
                              for(var idx = 0 ,idx_finish = input.length; idx < idx_finish; ++idx){
                                var innerData = input[idx];
                                try {
                                  var value = fn(innerData);
                                  newArray.push(value);
                                }
                                catch (raw_internalError){
                                  var internalError = internalToOCamlException(raw_internalError);
                                  if (internalError.RE_EXN_ID === Exception) {
                                    throw {
                                          RE_EXN_ID: Exception,
                                          _1: prependLocation(internalError._1, idx.toString()),
                                          Error: new Error()
                                        };
                                  }
                                  throw internalError;
                                }
                              }
                              return newArray;
                            }));
              }
              
            }),
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: undefined,
          m: emptyMetadataMap
        };
}

function factory$14(innerStruct) {
  return {
          n: "Dict",
          t: {
            TAG: "Dict",
            _0: innerStruct
          },
          pf: (function (ctx) {
              var planSyncTransformation$1 = function (fn) {
                planSyncTransformation(ctx, (function (input) {
                        var newDict = {};
                        var keys = Object.keys(input);
                        for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                          var key = keys[idx];
                          var innerData = input[key];
                          try {
                            var value = fn(innerData);
                            newDict[key] = value;
                          }
                          catch (raw_internalError){
                            var internalError = internalToOCamlException(raw_internalError);
                            if (internalError.RE_EXN_ID === Exception) {
                              throw {
                                    RE_EXN_ID: Exception,
                                    _1: prependLocation(internalError._1, key),
                                    Error: new Error()
                                  };
                            }
                            throw internalError;
                          }
                        }
                        return newDict;
                      }));
              };
              planSyncTransformation(ctx, (function (input) {
                      if ((typeof input === "object" && input !== null && !Array.isArray(input)) === false) {
                        return raiseUnexpectedTypeError(input, ctx.s);
                      } else {
                        return input;
                      }
                    }));
              var fn = getParseOperation(innerStruct);
              if (typeof fn !== "object") {
                return ;
              }
              if (fn.TAG === "SyncOperation") {
                return planSyncTransformation$1(fn._0);
              }
              planSyncTransformation$1(fn._0);
              planAsyncTransformation(ctx, (function (input) {
                      var keys = Object.keys(input);
                      return Promise.all(keys.map(function (key) {
                                        var asyncFn = input[key];
                                        try {
                                          return asyncFn(undefined).catch(function (exn) {
                                                      throw exn.RE_EXN_ID === Exception ? ({
                                                                RE_EXN_ID: Exception,
                                                                _1: prependLocation(exn._1, key)
                                                              }) : exn;
                                                    });
                                        }
                                        catch (raw_internalError){
                                          var internalError = internalToOCamlException(raw_internalError);
                                          if (internalError.RE_EXN_ID === Exception) {
                                            throw {
                                                  RE_EXN_ID: Exception,
                                                  _1: prependLocation(internalError._1, key),
                                                  Error: new Error()
                                                };
                                          }
                                          throw internalError;
                                        }
                                      })).then(function (values) {
                                  var tempDict = {};
                                  values.forEach(function (value, idx) {
                                        var key = keys[idx];
                                        tempDict[key] = value;
                                      });
                                  return tempDict;
                                });
                    }));
            }),
          sf: (function (ctx) {
              var fn = getSerializeOperation(innerStruct);
              if (fn !== undefined) {
                return planSyncTransformation(ctx, (function (input) {
                              var newDict = {};
                              var keys = Object.keys(input);
                              for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                                var key = keys[idx];
                                var innerData = input[key];
                                try {
                                  var value = fn(innerData);
                                  newDict[key] = value;
                                }
                                catch (raw_internalError){
                                  var internalError = internalToOCamlException(raw_internalError);
                                  if (internalError.RE_EXN_ID === Exception) {
                                    throw {
                                          RE_EXN_ID: Exception,
                                          _1: prependLocation(internalError._1, key),
                                          Error: new Error()
                                        };
                                  }
                                  throw internalError;
                                }
                              }
                              return newDict;
                            }));
              }
              
            }),
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: undefined,
          m: emptyMetadataMap
        };
}

var metadataId$5 = "rescript-struct:Default";

function factory$15(innerStruct, getDefaultValue) {
  return set({
              n: innerStruct.n,
              t: innerStruct.t,
              pf: (function (ctx) {
                  var fn = getParseOperation(innerStruct);
                  if (typeof fn !== "object") {
                    return planSyncTransformation(ctx, (function (input) {
                                  if (input !== undefined) {
                                    return valFromOption(input);
                                  } else {
                                    return getDefaultValue(undefined);
                                  }
                                }));
                  }
                  if (fn.TAG === "SyncOperation") {
                    var fn$1 = fn._0;
                    return planSyncTransformation(ctx, (function (input) {
                                  var v = fn$1(input);
                                  if (v !== undefined) {
                                    return valFromOption(v);
                                  } else {
                                    return getDefaultValue(undefined);
                                  }
                                }));
                  }
                  planSyncTransformation(ctx, fn._0);
                  planAsyncTransformation(ctx, (function (asyncFn) {
                          return asyncFn(undefined).then(function (value) {
                                      if (value !== undefined) {
                                        return valFromOption(value);
                                      } else {
                                        return getDefaultValue(undefined);
                                      }
                                    });
                        }));
                }),
              sf: (function (ctx) {
                  var fn = getSerializeOperation(innerStruct);
                  if (fn !== undefined) {
                    return planSyncTransformation(ctx, (function (input) {
                                  var value = some(input);
                                  return fn(value);
                                }));
                  } else {
                    return planSyncTransformation(ctx, (function (input) {
                                  return some(input);
                                }));
                  }
                }),
              r: 0,
              e: 0,
              s: initialSerialize,
              j: initialSerializeToJson,
              p: intitialParse,
              a: intitialParseAsync,
              i: undefined,
              m: emptyMetadataMap
            }, metadataId$5, getDefaultValue);
}

var HackyValidValue = /* @__PURE__ */create("S-RescriptStruct.Union.HackyValidValue");

function factory$17(structs) {
  if (structs.length < 2) {
    throw new Error("[rescript-struct] A Union struct factory require at least two structs.");
  }
  return {
          n: "Union",
          t: {
            TAG: "Union",
            _0: structs
          },
          pf: (function (ctx) {
              var structs = ctx.s.t._0;
              var noopOps = [];
              var syncOps = [];
              var asyncOps = [];
              for(var idx = 0 ,idx_finish = structs.length; idx < idx_finish; ++idx){
                var innerStruct = structs[idx];
                var fn = getParseOperation(innerStruct);
                if (typeof fn !== "object") {
                  noopOps.push(undefined);
                } else if (fn.TAG === "SyncOperation") {
                  syncOps.push([
                        idx,
                        fn._0
                      ]);
                } else {
                  asyncOps.push([
                        idx,
                        fn._0
                      ]);
                }
              }
              var withAsyncOps = asyncOps.length > 0;
              if (noopOps.length === 0) {
                planSyncTransformation(ctx, (function (input) {
                        var idxRef = 0;
                        var errorsRef = [];
                        var maybeNewValueRef;
                        while(idxRef < syncOps.length && maybeNewValueRef === undefined) {
                          var idx = idxRef;
                          var match = syncOps[idx];
                          try {
                            var newValue = match[1](input);
                            maybeNewValueRef = some(newValue);
                          }
                          catch (raw_internalError){
                            var internalError = internalToOCamlException(raw_internalError);
                            if (internalError.RE_EXN_ID === Exception) {
                              errorsRef[match[0]] = internalError._1;
                              idxRef = idxRef + 1;
                            } else {
                              throw internalError;
                            }
                          }
                        }                        var match$1 = maybeNewValueRef;
                        if (match$1 !== undefined) {
                          if (withAsyncOps) {
                            return {
                                    maybeSyncValue: match$1,
                                    tempErrors: errorsRef,
                                    originalInput: input
                                  };
                          } else {
                            return valFromOption(match$1);
                          }
                        } else if (withAsyncOps) {
                          return {
                                  maybeSyncValue: match$1,
                                  tempErrors: errorsRef,
                                  originalInput: input
                                };
                        } else {
                          return raise$1({
                                      TAG: "InvalidUnion",
                                      _0: errorsRef.map(toParseError)
                                    });
                        }
                      }));
                if (withAsyncOps) {
                  return planAsyncTransformation(ctx, (function (input) {
                                var syncValue = input.maybeSyncValue;
                                if (syncValue !== undefined) {
                                  return Promise.resolve(valFromOption(syncValue));
                                } else {
                                  return Promise.all(asyncOps.map(function (param) {
                                                    var originalIdx = param[0];
                                                    try {
                                                      return param[1](input.originalInput)(undefined).then((function (value) {
                                                                    throw {
                                                                          RE_EXN_ID: HackyValidValue,
                                                                          _1: value,
                                                                          Error: new Error()
                                                                        };
                                                                  }), (function (exn) {
                                                                    if (exn.RE_EXN_ID === Exception) {
                                                                      var array = input.tempErrors;
                                                                      array[originalIdx] = exn._1;
                                                                      return ;
                                                                    }
                                                                    throw exn;
                                                                  }));
                                                    }
                                                    catch (raw_internalError){
                                                      var internalError = internalToOCamlException(raw_internalError);
                                                      if (internalError.RE_EXN_ID === Exception) {
                                                        var array = input.tempErrors;
                                                        return Promise.resolve((array[originalIdx] = internalError._1, undefined));
                                                      }
                                                      throw internalError;
                                                    }
                                                  })).then((function (param) {
                                                return raise$1({
                                                            TAG: "InvalidUnion",
                                                            _0: input.tempErrors.map(toParseError)
                                                          });
                                              }), (function (exn) {
                                                if (exn.RE_EXN_ID === HackyValidValue) {
                                                  return exn._1;
                                                }
                                                throw exn;
                                              }));
                                }
                              }));
                } else {
                  return ;
                }
              }
              
            }),
          sf: (function (ctx) {
              var serializeOperations = [];
              for(var idx = 0 ,idx_finish = structs.length; idx < idx_finish; ++idx){
                serializeOperations.push(getSerializeOperation(structs[idx]));
              }
              planSyncTransformation(ctx, (function (input) {
                      var idxRef = 0;
                      var errors = [];
                      var maybeNewValueRef;
                      while(idxRef < serializeOperations.length && maybeNewValueRef === undefined) {
                        var idx = idxRef;
                        var serializeOperation = serializeOperations[idx];
                        try {
                          var newValue = serializeOperation !== undefined ? serializeOperation(input) : input;
                          maybeNewValueRef = some(newValue);
                        }
                        catch (raw_internalError){
                          var internalError = internalToOCamlException(raw_internalError);
                          if (internalError.RE_EXN_ID === Exception) {
                            errors.push(internalError._1);
                            idxRef = idxRef + 1;
                          } else {
                            throw internalError;
                          }
                        }
                      }                      var ok = maybeNewValueRef;
                      if (ok !== undefined) {
                        return valFromOption(ok);
                      } else {
                        return raise$1({
                                    TAG: "InvalidUnion",
                                    _0: errors.map(toSerializeError)
                                  });
                      }
                    }));
            }),
          r: 0,
          e: 0,
          s: initialSerialize,
          j: initialSerializeToJson,
          p: intitialParse,
          a: intitialParseAsync,
          i: undefined,
          m: emptyMetadataMap
        };
}

var string = factory$6;

var bool = factory$8;

var $$int = factory$9;

var $$float = factory$10;

var literal = factory$2;

var array = factory$13;

var dict = factory$14;

var option = factory$12;

var $$null = factory$11;

var union = factory$17;

var $$default = factory$15;

var variant = factory;

var object = factory$3;
/* No side effect */

// Generated by ReScript, PLEASE EDIT WITH CARE


function makeEmptyRequestStruct(type_) {
  return object(function (o) {
              field(o, "type", literal({
                        TAG: "Int",
                        _0: type_
                      }));
              return {
                      requestID: field(o, "requestID", string())
                    };
            });
}

function makeRequestStruct(type_, struct) {
  return object(function (o) {
              field(o, "type", literal({
                        TAG: "Int",
                        _0: type_
                      }));
              return {
                      requestID: field(o, "requestID", string()),
                      data: field(o, "data", struct)
                    };
            });
}

var loginRequestStruct = makeRequestStruct(2, object(function (o) {
          return {
                  account: field(o, "account", string()),
                  password: field(o, "password", string())
                };
        }));

var setClientIDRequestStruct = makeRequestStruct(3, object(function (o) {
          return {
                  clientID: field(o, "clientID", string())
                };
        }));

var forwardDataStruct = object(function (o) {
      return {
              clientID: field(o, "clientID", string()),
              message: field(o, "message", string())
            };
    });

var requestForwardRequestStruct = makeRequestStruct(4, forwardDataStruct);

var tokenInfoStruct = object(function (o) {
      return {
              userID: field(o, "userID", $$float()),
              securityKey: field(o, "securityKey", string()),
              serviceToken: field(o, "serviceToken", string()),
              deviceID: field(o, "deviceID", string()),
              cookies: field(o, "cookies", array(string()))
            };
    });

var setTokenRequestStruct = makeRequestStruct(6, tokenInfoStruct);

var liverUIDStruct = object(function (o) {
      return {
              liverUID: field(o, "liverUID", $$int())
            };
    });

var getDanmakuRequestStruct = makeRequestStruct(100, liverUIDStruct);

var stopDanmakuRequestStruct = makeRequestStruct(101, liverUIDStruct);

var liveIDStruct = object(function (o) {
      return {
              liveID: field(o, "liveID", string())
            };
    });

var getWatchingListRequestStruct = makeRequestStruct(102, liveIDStruct);

var getBillboardRequestStruct = makeRequestStruct(103, liverUIDStruct);

var getSummaryRequestStruct = makeRequestStruct(104, liveIDStruct);

var getLuckListRequestStruct = makeRequestStruct(105, object(function (o) {
          return {
                  liveID: field(o, "liveID", string()),
                  redpackID: field(o, "redpackID", string()),
                  redpackBizUnit: field(o, "redpackBizUnit", string())
                };
        }));

var getPlaybackRequestStruct = makeRequestStruct(106, liveIDStruct);

var userIDStruct = object(function (o) {
      return {
              userID: field(o, "userID", $$int())
            };
    });

var getUserLiveInfoRequestStruct = makeRequestStruct(109, userIDStruct);

var getLiveDataRequestStruct = makeRequestStruct(112, object(function (o) {
          return {
                  days: field(o, "days", $$int())
                };
        }));

var getGiftListRequestStruct = makeRequestStruct(114, liveIDStruct);

var getUserInfoRequestStruct = makeRequestStruct(115, userIDStruct);

var getLiveCutInfoRequestStruct = makeRequestStruct(116, object(function (o) {
          return {
                  liverUID: field(o, "liverUID", $$int()),
                  liveID: field(o, "liveID", string())
                };
        }));

var managerUIDStruct = object(function (o) {
      return {
              managerUID: field(o, "managerUID", $$int())
            };
    });

var addManagerRequestStruct = makeRequestStruct(201, managerUIDStruct);

var deleteManagerRequestStruct = makeRequestStruct(202, managerUIDStruct);

var getAllKickHistoryRequestStruct = makeRequestStruct(203, liveIDStruct);

var kickUserStruct = object(function (o) {
      return {
              liveID: field(o, "liveID", string()),
              kickedUID: field(o, "kickedUID", $$int())
            };
    });

var managerKickRequestStruct = makeRequestStruct(204, kickUserStruct);

var authorKickRequestStruct = makeRequestStruct(205, kickUserStruct);

var getMedalDetailRequestStruct = makeRequestStruct(300, liverUIDStruct);

var getMedalRankListRequestStruct = makeRequestStruct(302, liverUIDStruct);

var getUserMedalRequestStruct = makeRequestStruct(303, userIDStruct);

var wearMedalRequestStruct = makeRequestStruct(304, liverUIDStruct);

var getTranscodeInfoRequestStruct = makeRequestStruct(904, object(function (o) {
          return {
                  streamName: field(o, "streamName", string())
                };
        }));

var startLiveRequestStruct = makeRequestStruct(905, object(function (o) {
          return {
                  title: field(o, "title", string()),
                  coverFile: field(o, "coverFile", string()),
                  streamName: field(o, "streamName", string()),
                  portrait: field(o, "portrait", bool()),
                  panoramic: field(o, "panoramic", bool()),
                  categoryID: field(o, "categoryID", $$int()),
                  subCategoryID: field(o, "subCategoryID", $$int())
                };
        }));

var stopLiveRequestStruct = makeRequestStruct(906, liveIDStruct);

var changeTitleAndCoverRequestStruct = makeRequestStruct(907, object(function (o) {
          return {
                  title: field(o, "title", string()),
                  coverFile: field(o, "coverFile", string()),
                  liveID: field(o, "liveID", string())
                };
        }));

var canCutLiveStruct = object(function (o) {
      return {
              canCut: field(o, "canCut", bool())
            };
    });

var setLiveCutStatusRequestStruct = makeRequestStruct(909, canCutLiveStruct);

function serializeRequest(request) {
  switch (request.TAG) {
    case 2 :
        return serializeToJsonWith(request._0, undefined, loginRequestStruct);
    case 3 :
        return serializeToJsonWith(request._0, undefined, setClientIDRequestStruct);
    case 4 :
        return serializeToJsonWith(request._0, undefined, requestForwardRequestStruct);
    case 6 :
        return serializeToJsonWith(request._0, undefined, setTokenRequestStruct);
    case 100 :
        return serializeToJsonWith(request._0, undefined, getDanmakuRequestStruct);
    case 101 :
        return serializeToJsonWith(request._0, undefined, stopDanmakuRequestStruct);
    case 102 :
        return serializeToJsonWith(request._0, undefined, getWatchingListRequestStruct);
    case 103 :
        return serializeToJsonWith(request._0, undefined, getBillboardRequestStruct);
    case 104 :
        return serializeToJsonWith(request._0, undefined, getSummaryRequestStruct);
    case 105 :
        return serializeToJsonWith(request._0, undefined, getLuckListRequestStruct);
    case 106 :
        return serializeToJsonWith(request._0, undefined, getPlaybackRequestStruct);
    case 107 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(107));
    case 108 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(108));
    case 109 :
        return serializeToJsonWith(request._0, undefined, getUserLiveInfoRequestStruct);
    case 110 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(110));
    case 112 :
        return serializeToJsonWith(request._0, undefined, getLiveDataRequestStruct);
    case 114 :
        return serializeToJsonWith(request._0, undefined, getGiftListRequestStruct);
    case 115 :
        return serializeToJsonWith(request._0, undefined, getUserInfoRequestStruct);
    case 116 :
        return serializeToJsonWith(request._0, undefined, getLiveCutInfoRequestStruct);
    case 200 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(200));
    case 201 :
        return serializeToJsonWith(request._0, undefined, addManagerRequestStruct);
    case 202 :
        return serializeToJsonWith(request._0, undefined, deleteManagerRequestStruct);
    case 203 :
        return serializeToJsonWith(request._0, undefined, getAllKickHistoryRequestStruct);
    case 204 :
        return serializeToJsonWith(request._0, undefined, managerKickRequestStruct);
    case 205 :
        return serializeToJsonWith(request._0, undefined, authorKickRequestStruct);
    case 300 :
        return serializeToJsonWith(request._0, undefined, getMedalDetailRequestStruct);
    case 301 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(301));
    case 302 :
        return serializeToJsonWith(request._0, undefined, getMedalRankListRequestStruct);
    case 303 :
        return serializeToJsonWith(request._0, undefined, getUserMedalRequestStruct);
    case 304 :
        return serializeToJsonWith(request._0, undefined, wearMedalRequestStruct);
    case 305 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(305));
    case 900 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(900));
    case 901 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(901));
    case 902 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(902));
    case 903 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(903));
    case 904 :
        return serializeToJsonWith(request._0, undefined, getTranscodeInfoRequestStruct);
    case 905 :
        return serializeToJsonWith(request._0, undefined, startLiveRequestStruct);
    case 906 :
        return serializeToJsonWith(request._0, undefined, stopLiveRequestStruct);
    case 907 :
        return serializeToJsonWith(request._0, undefined, changeTitleAndCoverRequestStruct);
    case 908 :
        return serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(908));
    case 909 :
        return serializeToJsonWith(request._0, undefined, setLiveCutStatusRequestStruct);
    
  }
}

var responseTypeStruct = variant($$int(), (function (v) {
        return intToResponseType(v);
      }));

var responseResultStruct = variant($$int(), (function (v) {
        return intToResponseResult(v);
      }));

var loginResponseStruct = object(function (o) {
      return field(o, "tokenInfo", tokenInfoStruct);
    });

var streamURLStruct = object(function (o) {
      return {
              url: field(o, "url", string()),
              bitrate: field(o, "bitrate", $$int()),
              qualityType: field(o, "qualityType", string()),
              qualityName: field(o, "qualityName", string())
            };
    });

var streamInfoStruct = object(function (o) {
      return {
              liveID: field(o, "liveID", string()),
              title: field(o, "title", string()),
              liveStartTime: field(o, "liveStartTime", $$float()),
              panoramic: field(o, "panoramic", bool()),
              streamList: field(o, "streamList", array(streamURLStruct)),
              streamName: field(o, "streamName", string())
            };
    });

var getDanmakuResponse = object(function (o) {
      return field(o, "StreamInfo", streamInfoStruct);
    });

var medalInfoStruct = object(function (o) {
      return {
              uperID: field(o, "uperID", $$int()),
              userID: field(o, "userID", $$int()),
              clubName: field(o, "clubName", string()),
              level: field(o, "level", $$int())
            };
    });

var userInfoStruct = object(function (o) {
      return {
              userID: field(o, "userID", $$float()),
              nickname: field(o, "nickname", string()),
              avatar: field(o, "avatar", string()),
              medal: field(o, "medal", medalInfoStruct),
              managerType: field(o, "managerType", variant($$int(), (function (v) {
                          return intToManagerType(v);
                        })))
            };
    });

var watchingUserStruct = object(function (o) {
      return {
              userInfo: field(o, "userInfo", userInfoStruct),
              anonymousUser: field(o, "anonymousUser", bool()),
              displaySendAmount: field(o, "displaySendAmount", string()),
              customData: field(o, "customData", string())
            };
    });

var getWatchingListResponseStruct = array(watchingUserStruct);

var getBillboardResponseStruct = array(watchingUserStruct);

var getSummaryResponseStruct = object(function (o) {
      return {
              duration: field(o, "duration", $$int()),
              likeCount: field(o, "likeCount", string()),
              watchCount: field(o, "watchCount", string()),
              giftCount: field(o, "giftCount", $$int()),
              diamondCount: field(o, "diamondCount", $$int()),
              bananaCount: field(o, "bananaCount", $$int())
            };
    });

var luckyUserStruct = object(function (o) {
      return {
              userInfo: field(o, "userInfo", userInfoStruct),
              grabAmount: field(o, "grabAmount", $$int())
            };
    });

var getLuckListResponseStruct = array(luckyUserStruct);

var getPlaybackResponseStruct = object(function (o) {
      return {
              duration: field(o, "duration", $$int()),
              url: field(o, "url", string()),
              backupURL: field(o, "backupURL", string()),
              m3u8Slice: field(o, "m3u8Slice", string()),
              width: field(o, "width", $$int()),
              height: field(o, "height", $$int())
            };
    });

var giftDetailStruct = object(function (o) {
      return {
              giftID: field(o, "giftID", $$int()),
              giftName: field(o, "giftName", string()),
              arLiveName: field(o, "arLiveName", string()),
              payWalletType: field(o, "payWalletType", variant($$int(), (function (v) {
                          return intToGiftPayType(v);
                        }))),
              price: field(o, "price", $$int()),
              webpPic: field(o, "webpPic", string()),
              pngPic: field(o, "pngPic", string()),
              smallPngPic: field(o, "smallPngPic", string()),
              allowBatchSendSizeList: field(o, "allowBatchSendSizeList", $$null(array($$int()))),
              canCombo: field(o, "canCombo", bool()),
              canDraw: field(o, "canDraw", bool()),
              magicFaceID: field(o, "magicFaceID", $$int()),
              vupArID: field(o, "vupArID", $$int()),
              description: field(o, "description", string()),
              redpackPrice: field(o, "redpackPrice", $$int()),
              cornerMarkerText: field(o, "cornerMarkerText", string())
            };
    });

var getAllGiftListResponseStruct = array(giftDetailStruct);

var getWalletBalanceResponseStruct = object(function (o) {
      return {
              acCoin: field(o, "acCoin", $$int()),
              banana: field(o, "banana", $$int())
            };
    });

var userProfileStruct = object(function (o) {
      return {
              userID: field(o, "userID", $$int()),
              nickname: field(o, "nickname", string()),
              avatar: field(o, "avatar", string()),
              avatarFrame: field(o, "avatarFrame", string()),
              followingCount: field(o, "followingCount", $$int()),
              fansCount: field(o, "fansCount", $$int()),
              contributeCount: field(o, "contributeCount", $$int()),
              signature: field(o, "signature", string()),
              verifiedText: field(o, "verifiedText", string()),
              isJoinUpCollege: field(o, "isJoinUpCollege", bool()),
              isFollowing: field(o, "isFollowing", bool()),
              isFollowed: field(o, "isFollowed", bool())
            };
    });

var liveTypeStruct = object(function (o) {
      return {
              categoryID: field(o, "categoryID", $$int()),
              categoryName: field(o, "categoryName", string()),
              subCategoryID: field(o, "subCategoryID", $$int()),
              subCategoryName: field(o, "subCategoryName", string())
            };
    });

var userLiveInfoStruct = object(function (o) {
      return {
              profile: field(o, "profile", userProfileStruct),
              liveType: field(o, "liveType", liveTypeStruct),
              liveID: field(o, "liveID", string()),
              streamName: field(o, "streamName", string()),
              title: field(o, "title", string()),
              liveStartTime: field(o, "liveStartTime", $$float()),
              portrait: field(o, "portrait", bool()),
              panoramic: field(o, "panoramic", bool()),
              liveCover: field(o, "liveCover", string()),
              onlineCount: field(o, "onlineCount", $$int()),
              likeCount: field(o, "likeCount", $$int()),
              hasFansClub: field(o, "hasFansClub", bool()),
              disableDanmakuShow: field(o, "disableDanmakuShow", bool()),
              paidShowUserBuyStatus: field(o, "paidShowUserBuyStatus", bool())
            };
    });

var getAllLiveListResponseStruct = array(userLiveInfoStruct);

var liveStatStruct = object(function (o) {
      return {
              duration: field(o, "duration", $$int()),
              maxPopularityValue: field(o, "maxPopularityValue", $$int()),
              watchCount: field(o, "watchCount", $$int()),
              diamondCount: field(o, "diamondCount", $$int()),
              commentCount: field(o, "commentCount", $$int()),
              bananaCount: field(o, "bananaCount", $$int())
            };
    });

var liveDetailStruct = object(function (o) {
      return {
              liveStartTime: field(o, "liveStartTime", $$float()),
              liveEndTime: field(o, "liveEndTime", $$float()),
              liveStat: field(o, "liveStat", liveStatStruct)
            };
    });

var dailyDataStruct = object(function (o) {
      return {
              date: field(o, "date", string()),
              liveTimes: field(o, "liveTimes", $$int()),
              liveStat: field(o, "liveStat", liveStatStruct)
            };
    });

var getLiveDataResponseStruct = object(function (o) {
      return {
              beginDate: field(o, "beginDate", string()),
              endDate: field(o, "endDate", string()),
              overview: field(o, "overview", liveStatStruct),
              liveDetail: field(o, "liveDetail", dict(liveDetailStruct)),
              dailyData: field(o, "dailyData", $$null(array(dailyDataStruct)))
            };
    });

var getGiftListResponseStruct = array(giftDetailStruct);

var getUserInfoResponseStruct = object(function (o) {
      return {
              userID: field(o, "userID", $$int()),
              nickname: field(o, "nickname", string()),
              avatar: field(o, "avatar", string()),
              avatarFrame: field(o, "avatarFrame", string()),
              followingCount: field(o, "followingCount", string()),
              fansCount: field(o, "fansCount", string()),
              contributeCount: field(o, "contributeCount", string()),
              signature: field(o, "signature", string()),
              verifiedText: field(o, "verifiedText", string()),
              isJoinUpCollege: field(o, "isJoinUpCollege", bool()),
              isFollowing: field(o, "isFollowing", bool()),
              isFollowed: field(o, "isFollowed", bool()),
              liveID: field(o, "liveID", string()),
              likeCount: field(o, "likeCount", $$int())
            };
    });

var getLiveCutInfoResponseStruct = object(function (o) {
      return {
              status: field(o, "status", bool()),
              url: field(o, "url", string()),
              redirectURL: field(o, "redirectURL", string())
            };
    });

var managerStruct = object(function (o) {
      return {
              userInfo: field(o, "userInfo", userInfoStruct),
              customData: field(o, "customData", string()),
              online: field(o, "online", bool())
            };
    });

var getManagerListResponseStruct = array(managerStruct);

var kickHistoryStruct = object(function (o) {
      return {
              userID: field(o, "userID", $$int()),
              nickname: field(o, "nickname", string()),
              kickTime: field(o, "kickTime", $$float())
            };
    });

var getAllKickHistoryResponseStruct = array(kickHistoryStruct);

var medalStruct = object(function (o) {
      return {
              medalInfo: field(o, "medalInfo", medalInfoStruct),
              uperName: field(o, "uperName", string()),
              uperAvatar: field(o, "uperAvatar", string()),
              wearMedal: field(o, "wearMedal", bool()),
              friendshipDegree: field(o, "friendshipDegree", $$int()),
              joinClubTime: field(o, "joinClubTime", $$float()),
              currentDegreeLimit: field(o, "currentDegreeLimit", $$int()),
              medalCount: field(o, "medalCount", $$int())
            };
    });

var medalDegreeStruct = object(function (o) {
      return {
              uperID: field(o, "uperID", $$int()),
              giftDegree: field(o, "giftDegree", $$int()),
              giftDegreeLimit: field(o, "giftDegreeLimit", $$int()),
              peachDegree: field(o, "peachDegree", $$int()),
              peachDegreeLimit: field(o, "peachDegreeLimit", $$int()),
              liveWatchDegree: field(o, "liveWatchDegree", $$int()),
              liveWatchDegreeLimit: field(o, "liveWatchDegreeLimit", $$int()),
              bananaDegree: field(o, "bananaDegree", $$int()),
              bananaDegreeLimit: field(o, "bananaDegreeLimit", $$int())
            };
    });

var getMedalDetailResponseStruct = object(function (o) {
      return {
              medal: field(o, "medal", medalStruct),
              medalDegree: field(o, "medalDegree", medalDegreeStruct),
              userRank: field(o, "userRank", string())
            };
    });

var getMedalListResponseStruct = $$null(array(medalStruct));

var userMedalInfoStruct = object(function (o) {
      return {
              profile: field(o, "profile", userProfileStruct),
              friendshipDegree: field(o, "friendshipDegree", $$int()),
              level: field(o, "level", $$int())
            };
    });

var getMedalRankListResponseStruct = object(function (o) {
      return {
              hasFansClub: field(o, "hasFansClub", bool()),
              rankList: field(o, "rankList", $$null(array(userMedalInfoStruct))),
              clubName: field(o, "clubName", string()),
              medalCount: field(o, "medalCount", $$int()),
              hasMedal: field(o, "hasMedal", bool()),
              userFriendshipDegree: field(o, "userFriendshipDegree", $$int()),
              userRank: field(o, "userRank", string())
            };
    });

var checkLiveAuthResponseStruct = object(function (o) {
      return {
              liveAuth: field(o, "liveAuth", bool())
            };
    });

var getPushConfigResponseStruct = object(function (o) {
      return {
              streamName: field(o, "streamName", string()),
              streamPullAddress: field(o, "streamPullAddress", string()),
              streamPushAddress: field(o, "streamPushAddress", $$null(array(string()))),
              panoramic: field(o, "panoramic", bool()),
              interval: field(o, "interval", $$int()),
              rtmpServer: field(o, "rtmpServer", string()),
              streamKey: field(o, "streamKey", string())
            };
    });

var getLiveStatusResponseStruct = object(function (o) {
      return {
              liveID: field(o, "liveID", string()),
              streamName: field(o, "streamName", string()),
              title: field(o, "title", string()),
              liveCover: field(o, "liveCover", string()),
              liveStartTime: field(o, "liveStartTime", $$float()),
              panoramic: field(o, "panoramic", bool()),
              bizUnit: field(o, "bizUnit", string()),
              bizCustomData: field(o, "bizCustomData", string())
            };
    });

var transcodeInfoStruct = object(function (o) {
      return {
              streamURL: field(o, "streamURL", streamURLStruct),
              resolution: field(o, "resolution", string()),
              frameRate: field(o, "frameRate", $$int()),
              template: field(o, "template", string())
            };
    });

var getTranscodeInfoResponseStruct = array(transcodeInfoStruct);

var stopLiveResponseStruct = object(function (o) {
      return {
              duration: field(o, "duration", $$int()),
              endReason: field(o, "endReason", string())
            };
    });

var danmuInfoStruct = object(function (o) {
      return {
              sendTime: field(o, "sendTime", $$float()),
              userInfo: field(o, "userInfo", userInfoStruct)
            };
    });

var commentStruct = object(function (o) {
      return {
              danmuInfo: field(o, "danmuInfo", danmuInfoStruct),
              content: field(o, "content", string())
            };
    });

var throwBananaStruct = object(function (o) {
      return {
              danmuInfo: field(o, "danmuInfo", danmuInfoStruct),
              bananaCount: field(o, "bananaCount", $$int())
            };
    });

var drawPointStruct = object(function (o) {
      return {
              marginLeft: field(o, "marginLeft", $$int()),
              marginTop: field(o, "marginTop", $$int()),
              scaleRatio: field(o, "scaleRatio", $$int()),
              handup: field(o, "handup", bool()),
              pointWidth: field(o, "pointWidth", $$int()),
              pointHeight: field(o, "pointHeight", $$int())
            };
    });

var drawGiftInfoStruct = object(function (o) {
      return {
              screenWidth: field(o, "screenWidth", $$int()),
              screenHeight: field(o, "screenHeight", $$int()),
              drawPoint: field(o, "drawPoint", $$null(array(drawPointStruct)))
            };
    });

var giftStruct = object(function (o) {
      return {
              danmuInfo: field(o, "danmuInfo", danmuInfoStruct),
              giftDetail: field(o, "giftDetail", giftDetailStruct),
              count: field(o, "count", $$int()),
              combo: field(o, "combo", $$int()),
              value: field(o, "value", $$int()),
              comboID: field(o, "comboID", string()),
              slotDisplayDuration: field(o, "slotDisplayDuration", $$int()),
              expireDuration: field(o, "expireDuration", $$int()),
              drawGiftInfo: field(o, "drawGiftInfo", drawGiftInfoStruct)
            };
    });

var richTextUserInfoStruct = object(function (o) {
      return {
              userInfo: field(o, "userInfo", userInfoStruct),
              color: field(o, "color", string())
            };
    });

var richTextPlainStruct = object(function (o) {
      return {
              text: field(o, "text", string()),
              color: field(o, "color", string())
            };
    });

var richTextImageStruct = object(function (o) {
      return {
              pictures: field(o, "pictures", array(string())),
              alternativeText: field(o, "alternativeText", string()),
              alternativeColor: field(o, "alternativeColor", string())
            };
    });

var richTextSegmentStruct = union([
      object(function (o) {
            field(o, "type", literal({
                      TAG: "Int",
                      _0: 1900
                    }));
            return {
                    type: "UserInfo",
                    segment: field(o, "segment", richTextUserInfoStruct)
                  };
          }),
      object(function (o) {
            field(o, "type", literal({
                      TAG: "Int",
                      _0: 1901
                    }));
            return {
                    type: "Plain",
                    segment: field(o, "segment", richTextPlainStruct)
                  };
          }),
      object(function (o) {
            field(o, "type", literal({
                      TAG: "Int",
                      _0: 1902
                    }));
            return {
                    type: "Image",
                    segment: field(o, "segment", richTextImageStruct)
                  };
          })
    ]);

var richTextStruct = object(function (o) {
      return {
              sendTime: field(o, "sendTime", $$float()),
              segments: field(o, "segments", array(richTextSegmentStruct))
            };
    });

var joinClubStruct = object(function (o) {
      return {
              joinTime: field(o, "joinTime", $$float()),
              fansInfo: field(o, "fansInfo", userInfoStruct),
              uperInfo: field(o, "uperInfo", userInfoStruct)
            };
    });

var shareLiveStruct = object(function (o) {
      return {
              danmuInfo: field(o, "danmuInfo", danmuInfoStruct),
              sharePlatform: field(o, "sharePlatform", variant($$int(), (function (v) {
                          return intToSharePlatformType(v);
                        }))),
              sharePlatformIcon: field(o, "sharePlatformIcon", string())
            };
    });

var bananaCountStruct = object(function (o) {
      return {
              bananaCount: field(o, "bananaCount", string())
            };
    });

var displayInfoStruct = object(function (o) {
      return {
              watchingCount: field(o, "watchingCount", string()),
              likeCount: field(o, "likeCount", string()),
              likeDelta: field(o, "likeDelta", $$int())
            };
    });

var watchingUserStruct$1 = object(function (o) {
      return {
              userInfo: field(o, "userInfo", userInfoStruct),
              anonymousUser: field(o, "anonymousUser", bool()),
              displaySendAmount: field(o, "displaySendAmount", string()),
              customData: field(o, "customData", string())
            };
    });

var topUsersStruct = array(watchingUserStruct$1);

var recentCommentsStruct = array(commentStruct);

var redpackStruct = object(function (o) {
      return {
              userInfo: field(o, "userInfo", userInfoStruct),
              displayStatus: field(o, "displayStatus", variant($$int(), (function (v) {
                          return intToRedpackDisplayStatus(v);
                        }))),
              grabBeginTime: field(o, "grabBeginTime", $$float()),
              getTokenLatestTime: field(o, "getTokenLatestTime", $$float()),
              redpackID: field(o, "redpackID", string()),
              redpackBizUnit: field(o, "redpackBizUnit", string()),
              redpackAmount: field(o, "redpackAmount", $$int()),
              settleBeginTime: field(o, "settleBeginTime", $$float())
            };
    });

var redpackListStruct = array(redpackStruct);

var chatCallStruct = object(function (o) {
      return {
              chatID: field(o, "chatID", string()),
              liveID: field(o, "liveID", string()),
              callTime: field(o, "callTime", $$float())
            };
    });

var chatAcceptStruct = object(function (o) {
      return {
              chatID: field(o, "chatID", string()),
              mediaType: field(o, "mediaType", variant($$int(), (function (v) {
                          return intToChatMediaType(v);
                        }))),
              signalInfo: field(o, "signalInfo", string())
            };
    });

var chatReadyStruct = object(function (o) {
      return {
              chatID: field(o, "chatID", string()),
              guest: field(o, "guest", userInfoStruct),
              mediaType: field(o, "mediaType", variant($$int(), (function (v) {
                          return intToChatMediaType(v);
                        })))
            };
    });

var chatEndStruct = object(function (o) {
      return {
              chatID: field(o, "chatID", string()),
              endType: field(o, "endType", variant($$int(), (function (v) {
                          return intToChatEndType(v);
                        })))
            };
    });

var danmakuStopErrorStruct = object(function (o) {
      return {
              error: field(o, "error", string())
            };
    });

var kickedOutStruct = object(function (o) {
      return {
              kickedOutReason: field(o, "kickedOutReason", string())
            };
    });

var violationAlertStruct = object(function (o) {
      return {
              violationContent: field(o, "violationContent", string())
            };
    });

var managerStateStruct = object(function (o) {
      return {
              managerState: field(o, "managerState", variant($$int(), (function (v) {
                          return intToManagerStateType(v);
                        })))
            };
    });

var responseModelStruct = object(function (o) {
      return {
              type_: field(o, "type", responseTypeStruct),
              liverUID: field(o, "liverUID", $$default(option($$int()), (function () {
                          return 0;
                        }))),
              requestID: field(o, "requestID", $$default(option(string()), (function () {
                          return "";
                        }))),
              result: field(o, "result", $$default(option(responseResultStruct), (function () {
                          return {
                                  TAG: "UnknownResult",
                                  _0: 0
                                };
                        }))),
              error: field(o, "error", $$default(option(string()), (function () {
                          return "";
                        })))
            };
    });

function makeEmptyResponseData(param, constructor) {
  var result = param.result;
  var requestID = param.requestID;
  if (typeof result !== "object") {
    if (result === "Success") {
      return constructor({
                  TAG: "Ok",
                  _0: {
                    requestID: requestID
                  }
                });
    } else {
      return constructor({
                  TAG: "Error",
                  _0: {
                    requestID: requestID,
                    result: result,
                    error: param.error
                  }
                });
    }
  } else {
    return fail(undefined, "unknown result type: " + result._0.toString());
  }
}

function makeResponseData(data, param, struct, constructor) {
  var result = param.result;
  var requestID = param.requestID;
  if (typeof result === "object") {
    return fail(undefined, "unknown result type: " + result._0.toString());
  }
  if (result !== "Success") {
    return constructor({
                TAG: "Error",
                _0: {
                  requestID: requestID,
                  result: result,
                  error: param.error
                }
              });
  }
  var d = parseAnyWith(data, object(function (o) {
            return field(o, "data", struct);
          }));
  if (d.TAG !== "Ok") {
    return advancedFail(d._0);
  }
  var message_data = d._0;
  var message = {
    requestID: requestID,
    data: message_data
  };
  return constructor({
              TAG: "Ok",
              _0: message
            });
}

function makeDanmakuData(data, param, struct, constructor) {
  var liverUID = param.liverUID;
  if (liverUID <= 0) {
    return fail(undefined, "missing liverUID or illegal liverUID");
  }
  var d = parseAnyWith(data, object(function (o) {
            return field(o, "data", struct);
          }));
  if (d.TAG === "Ok") {
    return constructor({
                liverUID: liverUID,
                data: d._0
              });
  } else {
    return advancedFail(d._0);
  }
}

var responseDataStruct = custom("responseData", (function (data) {
        var model = parseAnyWith(data, responseModelStruct);
        if (model.TAG !== "Ok") {
          return advancedFail(model._0);
        }
        var model$1 = model._0;
        var v = model$1.type_;
        if (typeof v === "object") {
          return fail(undefined, "unsupported message type: " + v._0.toString());
        }
        switch (v) {
          case 2 :
              return makeResponseData(data, model$1, loginResponseStruct, (function (v) {
                            return {
                                    TAG: 2,
                                    _0: v
                                  };
                          }));
          case 3 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 3,
                                    _0: v
                                  };
                          }));
          case 4 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 4,
                                    _0: v
                                  };
                          }));
          case 6 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 6,
                                    _0: v
                                  };
                          }));
          case 100 :
              var constructor = function (v) {
                return {
                        TAG: 100,
                        _0: v
                      };
              };
              var result = model$1.result;
              var requestID = model$1.requestID;
              if (typeof result === "object") {
                return fail(undefined, "unknown result type: " + result._0.toString());
              }
              if (result !== "Success") {
                return constructor({
                            TAG: "Error",
                            _0: {
                              requestID: requestID,
                              result: result,
                              error: model$1.error
                            }
                          });
              }
              var e = parseAnyWith(data, object(function (o) {
                        return field(o, "data", option(getDanmakuResponse));
                      }));
              if (e.TAG !== "Ok") {
                return advancedFail(e._0);
              }
              var d = e._0;
              if (d !== undefined) {
                return constructor({
                            TAG: "Ok",
                            _0: {
                              requestID: requestID,
                              data: some(valFromOption(d))
                            }
                          });
              } else {
                return constructor({
                            TAG: "Ok",
                            _0: {
                              requestID: requestID
                            }
                          });
              }
          case 101 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 101,
                                    _0: v
                                  };
                          }));
          case 102 :
              return makeResponseData(data, model$1, getWatchingListResponseStruct, (function (v) {
                            return {
                                    TAG: 102,
                                    _0: v
                                  };
                          }));
          case 103 :
              return makeResponseData(data, model$1, getBillboardResponseStruct, (function (v) {
                            return {
                                    TAG: 103,
                                    _0: v
                                  };
                          }));
          case 104 :
              return makeResponseData(data, model$1, getSummaryResponseStruct, (function (v) {
                            return {
                                    TAG: 104,
                                    _0: v
                                  };
                          }));
          case 105 :
              return makeResponseData(data, model$1, getLuckListResponseStruct, (function (v) {
                            return {
                                    TAG: 105,
                                    _0: v
                                  };
                          }));
          case 106 :
              return makeResponseData(data, model$1, getPlaybackResponseStruct, (function (v) {
                            return {
                                    TAG: 106,
                                    _0: v
                                  };
                          }));
          case 107 :
              return makeResponseData(data, model$1, getAllGiftListResponseStruct, (function (v) {
                            return {
                                    TAG: 107,
                                    _0: v
                                  };
                          }));
          case 108 :
              return makeResponseData(data, model$1, getWalletBalanceResponseStruct, (function (v) {
                            return {
                                    TAG: 108,
                                    _0: v
                                  };
                          }));
          case 109 :
              return makeResponseData(data, model$1, userLiveInfoStruct, (function (v) {
                            return {
                                    TAG: 109,
                                    _0: v
                                  };
                          }));
          case 110 :
              return makeResponseData(data, model$1, getAllLiveListResponseStruct, (function (v) {
                            return {
                                    TAG: 110,
                                    _0: v
                                  };
                          }));
          case 112 :
              return makeResponseData(data, model$1, getLiveDataResponseStruct, (function (v) {
                            return {
                                    TAG: 112,
                                    _0: v
                                  };
                          }));
          case 114 :
              return makeResponseData(data, model$1, getGiftListResponseStruct, (function (v) {
                            return {
                                    TAG: 114,
                                    _0: v
                                  };
                          }));
          case 115 :
              return makeResponseData(data, model$1, getUserInfoResponseStruct, (function (v) {
                            return {
                                    TAG: 115,
                                    _0: v
                                  };
                          }));
          case 116 :
              return makeResponseData(data, model$1, getLiveCutInfoResponseStruct, (function (v) {
                            return {
                                    TAG: 116,
                                    _0: v
                                  };
                          }));
          case 200 :
              return makeResponseData(data, model$1, getManagerListResponseStruct, (function (v) {
                            return {
                                    TAG: 200,
                                    _0: v
                                  };
                          }));
          case 201 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 201,
                                    _0: v
                                  };
                          }));
          case 202 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 202,
                                    _0: v
                                  };
                          }));
          case 203 :
              return makeResponseData(data, model$1, getAllKickHistoryResponseStruct, (function (v) {
                            return {
                                    TAG: 203,
                                    _0: v
                                  };
                          }));
          case 204 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 204,
                                    _0: v
                                  };
                          }));
          case 205 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 205,
                                    _0: v
                                  };
                          }));
          case 300 :
              return makeResponseData(data, model$1, getMedalDetailResponseStruct, (function (v) {
                            return {
                                    TAG: 300,
                                    _0: v
                                  };
                          }));
          case 301 :
              return makeResponseData(data, model$1, getMedalListResponseStruct, (function (v) {
                            return {
                                    TAG: 301,
                                    _0: v
                                  };
                          }));
          case 302 :
              return makeResponseData(data, model$1, getMedalRankListResponseStruct, (function (v) {
                            return {
                                    TAG: 302,
                                    _0: v
                                  };
                          }));
          case 303 :
              return makeResponseData(data, model$1, medalStruct, (function (v) {
                            return {
                                    TAG: 303,
                                    _0: v
                                  };
                          }));
          case 304 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 304,
                                    _0: v
                                  };
                          }));
          case 305 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 305,
                                    _0: v
                                  };
                          }));
          case 900 :
              return makeResponseData(data, model$1, checkLiveAuthResponseStruct, (function (v) {
                            return {
                                    TAG: 900,
                                    _0: v
                                  };
                          }));
          case 901 :
              return makeResponseData(data, model$1, liveTypeStruct, (function (v) {
                            return {
                                    TAG: 901,
                                    _0: v
                                  };
                          }));
          case 902 :
              return makeResponseData(data, model$1, getPushConfigResponseStruct, (function (v) {
                            return {
                                    TAG: 902,
                                    _0: v
                                  };
                          }));
          case 903 :
              return makeResponseData(data, model$1, getLiveStatusResponseStruct, (function (v) {
                            return {
                                    TAG: 903,
                                    _0: v
                                  };
                          }));
          case 904 :
              return makeResponseData(data, model$1, getTranscodeInfoResponseStruct, (function (v) {
                            return {
                                    TAG: 904,
                                    _0: v
                                  };
                          }));
          case 905 :
              return makeResponseData(data, model$1, liveIDStruct, (function (v) {
                            return {
                                    TAG: 905,
                                    _0: v
                                  };
                          }));
          case 906 :
              return makeResponseData(data, model$1, stopLiveResponseStruct, (function (v) {
                            return {
                                    TAG: 906,
                                    _0: v
                                  };
                          }));
          case 907 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 907,
                                    _0: v
                                  };
                          }));
          case 908 :
              return makeResponseData(data, model$1, canCutLiveStruct, (function (v) {
                            return {
                                    TAG: 908,
                                    _0: v
                                  };
                          }));
          case 909 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 909,
                                    _0: v
                                  };
                          }));
          case 1 :
              return 1;
          case 5 :
              return makeResponseData(data, model$1, forwardDataStruct, (function (v) {
                            return {
                                    TAG: 5,
                                    _0: v
                                  };
                          }));
          case 1000 :
              return makeDanmakuData(data, model$1, commentStruct, (function (v) {
                            return {
                                    TAG: 1000,
                                    _0: v
                                  };
                          }));
          case 1001 :
              return makeDanmakuData(data, model$1, danmuInfoStruct, (function (v) {
                            return {
                                    TAG: 1001,
                                    _0: v
                                  };
                          }));
          case 1002 :
              return makeDanmakuData(data, model$1, danmuInfoStruct, (function (v) {
                            return {
                                    TAG: 1002,
                                    _0: v
                                  };
                          }));
          case 1003 :
              return makeDanmakuData(data, model$1, danmuInfoStruct, (function (v) {
                            return {
                                    TAG: 1003,
                                    _0: v
                                  };
                          }));
          case 1004 :
              return makeDanmakuData(data, model$1, throwBananaStruct, (function (v) {
                            return {
                                    TAG: 1004,
                                    _0: v
                                  };
                          }));
          case 1005 :
              return makeDanmakuData(data, model$1, giftStruct, (function (v) {
                            return {
                                    TAG: 1005,
                                    _0: v
                                  };
                          }));
          case 1006 :
              return makeDanmakuData(data, model$1, richTextStruct, (function (v) {
                            return {
                                    TAG: 1006,
                                    _0: v
                                  };
                          }));
          case 1007 :
              return makeDanmakuData(data, model$1, joinClubStruct, (function (v) {
                            return {
                                    TAG: 1007,
                                    _0: v
                                  };
                          }));
          case 1008 :
              return makeDanmakuData(data, model$1, shareLiveStruct, (function (v) {
                            return {
                                    TAG: 1008,
                                    _0: v
                                  };
                          }));
          case 2000 :
              var constructor$1 = function (v) {
                return {
                        TAG: 2000,
                        _0: v
                      };
              };
              var liverUID = model$1.liverUID;
              if (liverUID <= 0) {
                return fail(undefined, "missing liverUID or illegal liverUID");
              }
              var danmaku = {
                liverUID: liverUID
              };
              return constructor$1(danmaku);
          case 2001 :
              return makeDanmakuData(data, model$1, bananaCountStruct, (function (v) {
                            return {
                                    TAG: 2001,
                                    _0: v
                                  };
                          }));
          case 2002 :
              return makeDanmakuData(data, model$1, displayInfoStruct, (function (v) {
                            return {
                                    TAG: 2002,
                                    _0: v
                                  };
                          }));
          case 2003 :
              return makeDanmakuData(data, model$1, topUsersStruct, (function (v) {
                            return {
                                    TAG: 2003,
                                    _0: v
                                  };
                          }));
          case 2004 :
              return makeDanmakuData(data, model$1, recentCommentsStruct, (function (v) {
                            return {
                                    TAG: 2004,
                                    _0: v
                                  };
                          }));
          case 2005 :
              return makeDanmakuData(data, model$1, redpackListStruct, (function (v) {
                            return {
                                    TAG: 2005,
                                    _0: v
                                  };
                          }));
          case 2100 :
              return makeDanmakuData(data, model$1, chatCallStruct, (function (v) {
                            return {
                                    TAG: 2100,
                                    _0: v
                                  };
                          }));
          case 2101 :
              return makeDanmakuData(data, model$1, chatAcceptStruct, (function (v) {
                            return {
                                    TAG: 2101,
                                    _0: v
                                  };
                          }));
          case 2102 :
              return makeDanmakuData(data, model$1, chatReadyStruct, (function (v) {
                            return {
                                    TAG: 2102,
                                    _0: v
                                  };
                          }));
          case 2103 :
              return makeDanmakuData(data, model$1, chatEndStruct, (function (v) {
                            return {
                                    TAG: 2103,
                                    _0: v
                                  };
                          }));
          case 2999 :
              return makeDanmakuData(data, model$1, danmakuStopErrorStruct, (function (v) {
                            return {
                                    TAG: 2999,
                                    _0: v
                                  };
                          }));
          case 3000 :
              return makeDanmakuData(data, model$1, kickedOutStruct, (function (v) {
                            return {
                                    TAG: 3000,
                                    _0: v
                                  };
                          }));
          case 3001 :
              return makeDanmakuData(data, model$1, violationAlertStruct, (function (v) {
                            return {
                                    TAG: 3001,
                                    _0: v
                                  };
                          }));
          case 3002 :
              return makeDanmakuData(data, model$1, managerStateStruct, (function (v) {
                            return {
                                    TAG: 3002,
                                    _0: v
                                  };
                          }));
          
        }
      }), undefined, undefined);

function parseResponse(response) {
  return parseJsonWith(response, responseDataStruct);
}
/* loginRequestStruct Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE


function addSubcriber(d, subcriber) {
  var id = d.nextId.contents;
  d.nextId.contents = id + 1 | 0;
  d.dict[id.toString()] = subcriber;
  return function () {
    $$delete$1(d.dict, id.toString());
  };
}

function callSubcribers(d, value, key) {
  Object.values(d.dict).forEach(function (s) {
        s(value, key);
      });
}

var isEmpty = (function (obj) {
    for (var i in obj) {
      return false;
    }

    return true;
  });

function addSubcriberInDict(dict, subcriber, key) {
  var d = dict[key];
  var d$1;
  if (d !== undefined) {
    d$1 = d;
  } else {
    var d_nextId = {
      contents: 0
    };
    var d_dict = {};
    var d$2 = {
      nextId: d_nextId,
      dict: d_dict
    };
    dict[key] = d$2;
    d$1 = d$2;
  }
  var unsubscribe = addSubcriber(d$1, subcriber);
  return function () {
    unsubscribe(undefined);
    if (isEmpty(d$1.dict)) {
      return $$delete$1(dict, key);
    }
    
  };
}

function make$2() {
  var notifyAll_nextId = {
    contents: 0
  };
  var notifyAll_dict = {};
  var notifyAll = {
    nextId: notifyAll_nextId,
    dict: notifyAll_dict
  };
  var notifyKey = {};
  var oneshotKey = {};
  var set = function (v, key) {
    some(v);
    callSubcribers(notifyAll, v, key);
    var d = notifyKey[key];
    if (d !== undefined) {
      callSubcribers(d, v, key);
    }
    var d$1 = oneshotKey[key];
    if (d$1 !== undefined) {
      callSubcribers(d$1, v, key);
      return $$delete$1(oneshotKey, key);
    }
    
  };
  var subcribe = function (subcriber, key) {
    if (key !== undefined) {
      return addSubcriberInDict(notifyKey, subcriber, key);
    } else {
      return addSubcriber(notifyAll, subcriber);
    }
  };
  var oneshot = function (subcriber, key) {
    return addSubcriberInDict(oneshotKey, subcriber, key);
  };
  return {
          set: set,
          subcribe: subcribe,
          oneshot: oneshot
        };
}
/* No side effect */

// Generated by ReScript, PLEASE EDIT WITH CARE


var NotConnectBackend = /* @__PURE__ */create("AcLive__Session.NotConnectBackend");

var OneshotTimeout = /* @__PURE__ */create("AcLive__Session.OneshotTimeout");

var ResponseError = /* @__PURE__ */create("AcLive__Session.ResponseError");

function setResponse(subject, v) {
  subject.set(v, getResponseRequestId(v));
}

function setEmptyResponse(subject, v) {
  subject.set(v, getEmptyResponseRequestId(v));
}

function setDanmaku(subject, v) {
  subject.set(v, v.liverUID.toString());
}

function fixKeyCallback(subject, key, onData) {
  return subject.subcribe((function (v, param) {
                onData(v);
              }), key);
}

function responseCallback(subject, key, onData, onError) {
  return subject.subcribe((function (value, param) {
                if (value.TAG === "Ok") {
                  return onData(value._0);
                } else if (onError !== undefined) {
                  return onError(value._0);
                } else {
                  return ;
                }
              }), key);
}

function danmakuCallback(subject, key, onData) {
  return subject.subcribe((function (v, param) {
                onData(v);
              }), map(key, (function (prim) {
                    return prim.toString();
                  })));
}

function make$1($$WebSocket, $staropt$star) {
  var config = $staropt$star !== undefined ? $staropt$star : ({
        websocketUrl: "ws://localhost:15368",
        autoReconnect: true,
        oneshotTimeout: 10000
      });
  var ws = {
    contents: undefined
  };
  var unitSubject = make$2();
  var websocketErrorSubject = make$2();
  var jsonErrorSubject = make$2();
  var loginSubject = make$2();
  var setClientIDSubject = make$2();
  var requestForwardSubject = make$2();
  var receiveForwardSubject = make$2();
  var setTokenSubject = make$2();
  var getDanmakuSubject = make$2();
  var stopDanmakuSubject = make$2();
  var getWatchingListSubject = make$2();
  var getBillboardSubject = make$2();
  var getSummarySubject = make$2();
  var getLuckListSubject = make$2();
  var getPlaybackSubject = make$2();
  var getAllGiftListSubject = make$2();
  var getWalletBalanceSubject = make$2();
  var getUserLiveInfoSubject = make$2();
  var getAllLiveListSubject = make$2();
  var getLiveDataSubject = make$2();
  var getGiftListSubject = make$2();
  var getUserInfoSubject = make$2();
  var getLiveCutInfoSubject = make$2();
  var getManagerListSubject = make$2();
  var addManagerSubject = make$2();
  var deleteManagerSubject = make$2();
  var getAllKickHistorySubject = make$2();
  var managerKickSubject = make$2();
  var authorKickSubject = make$2();
  var getMedalDetailSubject = make$2();
  var getMedalListSubject = make$2();
  var getMedalRankListSubject = make$2();
  var getUserMedalSubject = make$2();
  var wearMedalSubject = make$2();
  var cancelWearMedalSubject = make$2();
  var checkLiveAuthSubject = make$2();
  var getLiveTypeListSubject = make$2();
  var getPushConfigSubject = make$2();
  var getLiveStatusSubject = make$2();
  var getTranscodeInfoSubject = make$2();
  var startLiveSubject = make$2();
  var stopLiveSubject = make$2();
  var changeTitleAndCoverSubject = make$2();
  var getLiveCutStatusSubject = make$2();
  var setLiveCutStatusSubject = make$2();
  var commentSubject = make$2();
  var likeSubject = make$2();
  var enterRoomSubject = make$2();
  var followAuthorSubject = make$2();
  var throwBananaSubject = make$2();
  var giftSubject = make$2();
  var richTextSubject = make$2();
  var joinClubSubject = make$2();
  var shareLiveSubject = make$2();
  var danmakuStopSubject = make$2();
  var bananaCountSubject = make$2();
  var displayInfoSubject = make$2();
  var topUsersSubject = make$2();
  var recentCommentsSubject = make$2();
  var redpackListSubject = make$2();
  var chatCallSubject = make$2();
  var chatAcceptSubject = make$2();
  var chatReadySubject = make$2();
  var chatEndSubject = make$2();
  var danmakuStopErrorStopSubject = make$2();
  var kickedOutSubject = make$2();
  var violationAlertSubject = make$2();
  var managerStateSubject = make$2();
  var uuidDict = {};
  var isConnecting = function () {
    var w = ws.contents;
    if (w !== undefined) {
      return $$WebSocket.isOpen(valFromOption(w));
    } else {
      return false;
    }
  };
  var connect = function () {
    if (isConnecting()) {
      return ;
    }
    var w = $$WebSocket.make(config.websocketUrl);
    var heartbeatInterval = {
      contents: undefined
    };
    $$WebSocket.addOpenListener(w, (function (param) {
            heartbeatInterval.contents = some(setInterval((function () {
                        $$WebSocket.send(w, heartbeat);
                      }), 5000));
            unitSubject.set(undefined, "websocketOpen");
          }));
    $$WebSocket.addCloseListener(w, (function (param) {
            var id = heartbeatInterval.contents;
            if (id !== undefined) {
              clearInterval(valFromOption(id));
            }
            unitSubject.set(undefined, "websocketClose");
            var w = ws.contents;
            if (w !== undefined) {
              $$WebSocket.close(valFromOption(w));
              ws.contents = undefined;
              if (config.autoReconnect) {
                setTimeout((function () {
                        connect();
                      }), 5000);
                return ;
              } else {
                return ;
              }
            }
            
          }));
    $$WebSocket.addErrorListener(w, (function (e) {
            websocketErrorSubject.set({
                  error: e.error,
                  message: e.message
                }, "websocketError");
          }));
    $$WebSocket.addMessageListener(w, (function (param) {
            var data = param.data;
            var response = parseResponse(data);
            if (response.TAG !== "Ok") {
              return jsonErrorSubject.set({
                          json: data,
                          error: response._0
                        }, "jsonError");
            }
            var response$1 = response._0;
            if (typeof response$1 !== "object") {
              return unitSubject.set(undefined, "heartbeat");
            }
            switch (response$1.TAG) {
              case 2 :
                  return setResponse(loginSubject, response$1._0);
              case 3 :
                  return setEmptyResponse(setClientIDSubject, response$1._0);
              case 4 :
                  return setEmptyResponse(requestForwardSubject, response$1._0);
              case 5 :
                  return setResponse(receiveForwardSubject, response$1._0);
              case 6 :
                  return setEmptyResponse(setTokenSubject, response$1._0);
              case 100 :
                  var v = response$1._0;
                  return getDanmakuSubject.set(v, getOptionalResponseRequestId(v));
              case 101 :
                  return setEmptyResponse(stopDanmakuSubject, response$1._0);
              case 102 :
                  return setResponse(getWatchingListSubject, response$1._0);
              case 103 :
                  return setResponse(getBillboardSubject, response$1._0);
              case 104 :
                  return setResponse(getSummarySubject, response$1._0);
              case 105 :
                  return setResponse(getLuckListSubject, response$1._0);
              case 106 :
                  return setResponse(getPlaybackSubject, response$1._0);
              case 107 :
                  return setResponse(getAllGiftListSubject, response$1._0);
              case 108 :
                  return setResponse(getWalletBalanceSubject, response$1._0);
              case 109 :
                  return setResponse(getUserLiveInfoSubject, response$1._0);
              case 110 :
                  return setResponse(getAllLiveListSubject, response$1._0);
              case 112 :
                  return setResponse(getLiveDataSubject, response$1._0);
              case 114 :
                  return setResponse(getGiftListSubject, response$1._0);
              case 115 :
                  return setResponse(getUserInfoSubject, response$1._0);
              case 116 :
                  return setResponse(getLiveCutInfoSubject, response$1._0);
              case 200 :
                  return setResponse(getManagerListSubject, response$1._0);
              case 201 :
                  return setEmptyResponse(addManagerSubject, response$1._0);
              case 202 :
                  return setEmptyResponse(deleteManagerSubject, response$1._0);
              case 203 :
                  return setResponse(getAllKickHistorySubject, response$1._0);
              case 204 :
                  return setEmptyResponse(managerKickSubject, response$1._0);
              case 205 :
                  return setEmptyResponse(authorKickSubject, response$1._0);
              case 300 :
                  return setResponse(getMedalDetailSubject, response$1._0);
              case 301 :
                  return setResponse(getMedalListSubject, response$1._0);
              case 302 :
                  return setResponse(getMedalRankListSubject, response$1._0);
              case 303 :
                  return setResponse(getUserMedalSubject, response$1._0);
              case 304 :
                  return setEmptyResponse(wearMedalSubject, response$1._0);
              case 305 :
                  return setEmptyResponse(cancelWearMedalSubject, response$1._0);
              case 900 :
                  return setResponse(checkLiveAuthSubject, response$1._0);
              case 901 :
                  return setResponse(getLiveTypeListSubject, response$1._0);
              case 902 :
                  return setResponse(getPushConfigSubject, response$1._0);
              case 903 :
                  return setResponse(getLiveStatusSubject, response$1._0);
              case 904 :
                  return setResponse(getTranscodeInfoSubject, response$1._0);
              case 905 :
                  return setResponse(startLiveSubject, response$1._0);
              case 906 :
                  return setResponse(stopLiveSubject, response$1._0);
              case 907 :
                  return setEmptyResponse(changeTitleAndCoverSubject, response$1._0);
              case 908 :
                  return setResponse(getLiveCutStatusSubject, response$1._0);
              case 909 :
                  return setEmptyResponse(setLiveCutStatusSubject, response$1._0);
              case 1000 :
                  return setDanmaku(commentSubject, response$1._0);
              case 1001 :
                  return setDanmaku(likeSubject, response$1._0);
              case 1002 :
                  return setDanmaku(enterRoomSubject, response$1._0);
              case 1003 :
                  return setDanmaku(followAuthorSubject, response$1._0);
              case 1004 :
                  return setDanmaku(throwBananaSubject, response$1._0);
              case 1005 :
                  return setDanmaku(giftSubject, response$1._0);
              case 1006 :
                  return setDanmaku(richTextSubject, response$1._0);
              case 1007 :
                  return setDanmaku(joinClubSubject, response$1._0);
              case 1008 :
                  return setDanmaku(shareLiveSubject, response$1._0);
              case 2000 :
                  var v$1 = response$1._0;
                  return danmakuStopSubject.set(v$1, v$1.liverUID.toString());
              case 2001 :
                  return setDanmaku(bananaCountSubject, response$1._0);
              case 2002 :
                  return setDanmaku(displayInfoSubject, response$1._0);
              case 2003 :
                  return setDanmaku(topUsersSubject, response$1._0);
              case 2004 :
                  return setDanmaku(recentCommentsSubject, response$1._0);
              case 2005 :
                  return setDanmaku(redpackListSubject, response$1._0);
              case 2100 :
                  return setDanmaku(chatCallSubject, response$1._0);
              case 2101 :
                  return setDanmaku(chatAcceptSubject, response$1._0);
              case 2102 :
                  return setDanmaku(chatReadySubject, response$1._0);
              case 2103 :
                  return setDanmaku(chatEndSubject, response$1._0);
              case 2999 :
                  return setDanmaku(danmakuStopErrorStopSubject, response$1._0);
              case 3000 :
                  return setDanmaku(kickedOutSubject, response$1._0);
              case 3001 :
                  return setDanmaku(violationAlertSubject, response$1._0);
              case 3002 :
                  return setDanmaku(managerStateSubject, response$1._0);
              
            }
          }));
    ws.contents = some(w);
  };
  var disConnect = function () {
    var w = ws.contents;
    if (w !== undefined) {
      $$WebSocket.close(valFromOption(w));
      ws.contents = undefined;
      return ;
    }
    
  };
  var on = function ($$event, onData, key, onError) {
    switch ($$event) {
      case "websocketOpen" :
          return fixKeyCallback(unitSubject, "websocketOpen", onData);
      case "websocketClose" :
          return fixKeyCallback(unitSubject, "websocketClose", onData);
      case "websocketError" :
          return fixKeyCallback(websocketErrorSubject, "websocketError", onData);
      case "jsonError" :
          return fixKeyCallback(jsonErrorSubject, "jsonError", onData);
      case "heartbeat" :
          return fixKeyCallback(unitSubject, "heartbeat", onData);
      case "login" :
          return responseCallback(loginSubject, key, onData, onError);
      case "setClientID" :
          return responseCallback(setClientIDSubject, key, onData, onError);
      case "requestForward" :
          return responseCallback(requestForwardSubject, key, onData, onError);
      case "receiveForward" :
          return responseCallback(receiveForwardSubject, key, onData, onError);
      case "setToken" :
          return responseCallback(setTokenSubject, key, onData, onError);
      case "getDanmaku" :
          return responseCallback(getDanmakuSubject, key, onData, onError);
      case "stopDanmaku" :
          return responseCallback(stopDanmakuSubject, key, onData, onError);
      case "getWatchingList" :
          return responseCallback(getWatchingListSubject, key, onData, onError);
      case "getBillboard" :
          return responseCallback(getBillboardSubject, key, onData, onError);
      case "getSummary" :
          return responseCallback(getSummarySubject, key, onData, onError);
      case "getLuckList" :
          return responseCallback(getLuckListSubject, key, onData, onError);
      case "getPlayback" :
          return responseCallback(getPlaybackSubject, key, onData, onError);
      case "getAllGiftList" :
          return responseCallback(getAllGiftListSubject, key, onData, onError);
      case "getWalletBalance" :
          return responseCallback(getWalletBalanceSubject, key, onData, onError);
      case "getUserLiveInfo" :
          return responseCallback(getUserLiveInfoSubject, key, onData, onError);
      case "getAllLiveList" :
          return responseCallback(getAllLiveListSubject, key, onData, onError);
      case "getLiveData" :
          return responseCallback(getLiveDataSubject, key, onData, onError);
      case "getGiftList" :
          return responseCallback(getGiftListSubject, key, onData, onError);
      case "getUserInfo" :
          return responseCallback(getUserInfoSubject, key, onData, onError);
      case "getLiveCutInfo" :
          return responseCallback(getLiveCutInfoSubject, key, onData, onError);
      case "getManagerList" :
          return responseCallback(getManagerListSubject, key, onData, onError);
      case "addManager" :
          return responseCallback(addManagerSubject, key, onData, onError);
      case "deleteManager" :
          return responseCallback(deleteManagerSubject, key, onData, onError);
      case "getAllKickHistory" :
          return responseCallback(getAllKickHistorySubject, key, onData, onError);
      case "managerKick" :
          return responseCallback(managerKickSubject, key, onData, onError);
      case "authorKick" :
          return responseCallback(authorKickSubject, key, onData, onError);
      case "getMedalDetail" :
          return responseCallback(getMedalDetailSubject, key, onData, onError);
      case "getMedalList" :
          return responseCallback(getMedalListSubject, key, onData, onError);
      case "getMedalRankList" :
          return responseCallback(getMedalRankListSubject, key, onData, onError);
      case "getUserMedal" :
          return responseCallback(getUserMedalSubject, key, onData, onError);
      case "wearMedal" :
          return responseCallback(wearMedalSubject, key, onData, onError);
      case "cancelWearMedal" :
          return responseCallback(cancelWearMedalSubject, key, onData, onError);
      case "checkLiveAuth" :
          return responseCallback(checkLiveAuthSubject, key, onData, onError);
      case "getLiveTypeList" :
          return responseCallback(getLiveTypeListSubject, key, onData, onError);
      case "getPushConfig" :
          return responseCallback(getPushConfigSubject, key, onData, onError);
      case "getLiveStatus" :
          return responseCallback(getLiveStatusSubject, key, onData, onError);
      case "getTranscodeInfo" :
          return responseCallback(getTranscodeInfoSubject, key, onData, onError);
      case "startLive" :
          return responseCallback(startLiveSubject, key, onData, onError);
      case "stopLive" :
          return responseCallback(stopLiveSubject, key, onData, onError);
      case "changeTitleAndCover" :
          return responseCallback(changeTitleAndCoverSubject, key, onData, onError);
      case "getLiveCutStatus" :
          return responseCallback(getLiveCutStatusSubject, key, onData, onError);
      case "setLiveCutStatus" :
          return responseCallback(setLiveCutStatusSubject, key, onData, onError);
      case "comment" :
          return danmakuCallback(commentSubject, key, onData);
      case "like" :
          return danmakuCallback(likeSubject, key, onData);
      case "enterRoom" :
          return danmakuCallback(enterRoomSubject, key, onData);
      case "followAuthor" :
          return danmakuCallback(followAuthorSubject, key, onData);
      case "throwBanana" :
          return danmakuCallback(throwBananaSubject, key, onData);
      case "gift" :
          return danmakuCallback(giftSubject, key, onData);
      case "richText" :
          return danmakuCallback(richTextSubject, key, onData);
      case "joinClub" :
          return danmakuCallback(joinClubSubject, key, onData);
      case "shareLive" :
          return danmakuCallback(shareLiveSubject, key, onData);
      case "danmakuStop" :
          return danmakuCallback(danmakuStopSubject, key, onData);
      case "bananaCount" :
          return danmakuCallback(bananaCountSubject, key, onData);
      case "displayInfo" :
          return danmakuCallback(displayInfoSubject, key, onData);
      case "topUsers" :
          return danmakuCallback(topUsersSubject, key, onData);
      case "recentComments" :
          return danmakuCallback(recentCommentsSubject, key, onData);
      case "redpackList" :
          return danmakuCallback(redpackListSubject, key, onData);
      case "chatCall" :
          return danmakuCallback(chatCallSubject, key, onData);
      case "chatAccept" :
          return danmakuCallback(chatAcceptSubject, key, onData);
      case "chatReady" :
          return danmakuCallback(chatReadySubject, key, onData);
      case "chatEnd" :
          return danmakuCallback(chatEndSubject, key, onData);
      case "danmakuStopError" :
          return danmakuCallback(danmakuStopErrorStopSubject, key, onData);
      case "kickedOut" :
          return danmakuCallback(kickedOutSubject, key, onData);
      case "violationAlert" :
          return danmakuCallback(violationAlertSubject, key, onData);
      case "managerState" :
          return danmakuCallback(managerStateSubject, key, onData);
      
    }
  };
  var sendRequest = function (data, ws) {
    var d = serializeRequest(data);
    if (d.TAG === "Ok") {
      return $$WebSocket.send(ws, d._0);
    } else {
      return jsonErrorSubject.set({
                  error: d._0
                }, "jsonError");
    }
  };
  var request = function (request$1, data, requestID) {
    var w = ws.contents;
    if (w === undefined) {
      return ;
    }
    var w$1 = valFromOption(w);
    switch (request$1) {
      case "login" :
          return sendRequest({
                      TAG: 2,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "setClientID" :
          return sendRequest({
                      TAG: 3,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "requestForward" :
          return sendRequest({
                      TAG: 4,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "setToken" :
          return sendRequest({
                      TAG: 6,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getDanmaku" :
          return sendRequest({
                      TAG: 100,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "stopDanmaku" :
          return sendRequest({
                      TAG: 101,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getWatchingList" :
          return sendRequest({
                      TAG: 102,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getBillboard" :
          return sendRequest({
                      TAG: 103,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getSummary" :
          return sendRequest({
                      TAG: 104,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getLuckList" :
          return sendRequest({
                      TAG: 105,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getPlayback" :
          return sendRequest({
                      TAG: 106,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getAllGiftList" :
          return sendRequest({
                      TAG: 107,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getWalletBalance" :
          return sendRequest({
                      TAG: 108,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getUserLiveInfo" :
          return sendRequest({
                      TAG: 109,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getAllLiveList" :
          return sendRequest({
                      TAG: 110,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getLiveData" :
          return sendRequest({
                      TAG: 112,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getGiftList" :
          return sendRequest({
                      TAG: 114,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getUserInfo" :
          return sendRequest({
                      TAG: 115,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getLiveCutInfo" :
          return sendRequest({
                      TAG: 116,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getManagerList" :
          return sendRequest({
                      TAG: 200,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "addManager" :
          return sendRequest({
                      TAG: 201,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "deleteManager" :
          return sendRequest({
                      TAG: 202,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getAllKickHistory" :
          return sendRequest({
                      TAG: 203,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "managerKick" :
          return sendRequest({
                      TAG: 204,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "authorKick" :
          return sendRequest({
                      TAG: 205,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getMedalDetail" :
          return sendRequest({
                      TAG: 300,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getMedalList" :
          return sendRequest({
                      TAG: 301,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getMedalRankList" :
          return sendRequest({
                      TAG: 302,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getUserMedal" :
          return sendRequest({
                      TAG: 303,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "wearMedal" :
          return sendRequest({
                      TAG: 304,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "cancelWearMedal" :
          return sendRequest({
                      TAG: 305,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "checkLiveAuth" :
          return sendRequest({
                      TAG: 900,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getLiveTypeList" :
          return sendRequest({
                      TAG: 901,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getPushConfig" :
          return sendRequest({
                      TAG: 902,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getLiveStatus" :
          return sendRequest({
                      TAG: 903,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getTranscodeInfo" :
          return sendRequest({
                      TAG: 904,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "startLive" :
          return sendRequest({
                      TAG: 905,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "stopLive" :
          return sendRequest({
                      TAG: 906,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "changeTitleAndCover" :
          return sendRequest({
                      TAG: 907,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getLiveCutStatus" :
          return sendRequest({
                      TAG: 908,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "setLiveCutStatus" :
          return sendRequest({
                      TAG: 909,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      
    }
  };
  var generateUuid = function () {
    while(true) {
      var uuid = Uuid.v4();
      var match = uuidDict[uuid];
      if (match !== undefined) {
        _param = undefined;
        continue ;
      }
      uuidDict[uuid] = 0;
      return [
              uuid,
              (function(uuid){
              return function () {
                $$delete$1(uuidDict, uuid);
              }
              }(uuid))
            ];
    }  };
  var oneshot = function (request, data, requestIDPrefix, timeout) {
    var w = ws.contents;
    if (w === undefined) {
      return Promise.reject({
                  RE_EXN_ID: NotConnectBackend
                });
    }
    var w$1 = valFromOption(w);
    return new Promise((function (resolve, reject) {
                  var match = generateUuid();
                  var deleteUuid = match[1];
                  var requestID = getWithDefault(requestIDPrefix, "") + "#" + match[0];
                  var unsubscribe = {
                    contents: undefined
                  };
                  var timeout$1 = setTimeout((function () {
                          var f = unsubscribe.contents;
                          if (f !== undefined) {
                            f(undefined);
                          }
                          deleteUuid(undefined);
                          reject({
                                RE_EXN_ID: OneshotTimeout
                              });
                        }), getWithDefault(timeout, config.oneshotTimeout));
                  var handleEmptyMessage = function (subject, constructor) {
                    sendRequest(constructor(makeEmptyMessage(requestID)), w$1);
                    unsubscribe.contents = subject.oneshot((function (value, param) {
                            clearTimeout(timeout$1);
                            deleteUuid(undefined);
                            if (value.TAG === "Ok") {
                              return resolve(value._0);
                            } else {
                              return reject({
                                          RE_EXN_ID: ResponseError,
                                          _1: value._0
                                        });
                            }
                          }), requestID);
                  };
                  var handleMessage = function (subject, constructor) {
                    sendRequest(constructor(makeMessage(data, requestID)), w$1);
                    unsubscribe.contents = subject.oneshot((function (value, param) {
                            clearTimeout(timeout$1);
                            deleteUuid(undefined);
                            if (value.TAG === "Ok") {
                              return resolve(value._0);
                            } else {
                              return reject({
                                          RE_EXN_ID: ResponseError,
                                          _1: value._0
                                        });
                            }
                          }), requestID);
                  };
                  switch (request) {
                    case "login" :
                        return handleMessage(loginSubject, (function (v) {
                                      return {
                                              TAG: 2,
                                              _0: v
                                            };
                                    }));
                    case "setClientID" :
                        return handleMessage(setClientIDSubject, (function (v) {
                                      return {
                                              TAG: 3,
                                              _0: v
                                            };
                                    }));
                    case "requestForward" :
                        return handleMessage(requestForwardSubject, (function (v) {
                                      return {
                                              TAG: 4,
                                              _0: v
                                            };
                                    }));
                    case "setToken" :
                        return handleMessage(setTokenSubject, (function (v) {
                                      return {
                                              TAG: 6,
                                              _0: v
                                            };
                                    }));
                    case "getDanmaku" :
                        return handleMessage(getDanmakuSubject, (function (v) {
                                      return {
                                              TAG: 100,
                                              _0: v
                                            };
                                    }));
                    case "stopDanmaku" :
                        return handleMessage(stopDanmakuSubject, (function (v) {
                                      return {
                                              TAG: 101,
                                              _0: v
                                            };
                                    }));
                    case "getWatchingList" :
                        return handleMessage(getWatchingListSubject, (function (v) {
                                      return {
                                              TAG: 102,
                                              _0: v
                                            };
                                    }));
                    case "getBillboard" :
                        return handleMessage(getBillboardSubject, (function (v) {
                                      return {
                                              TAG: 103,
                                              _0: v
                                            };
                                    }));
                    case "getSummary" :
                        return handleMessage(getSummarySubject, (function (v) {
                                      return {
                                              TAG: 104,
                                              _0: v
                                            };
                                    }));
                    case "getLuckList" :
                        return handleMessage(getLuckListSubject, (function (v) {
                                      return {
                                              TAG: 105,
                                              _0: v
                                            };
                                    }));
                    case "getPlayback" :
                        return handleMessage(getPlaybackSubject, (function (v) {
                                      return {
                                              TAG: 106,
                                              _0: v
                                            };
                                    }));
                    case "getAllGiftList" :
                        return handleEmptyMessage(getAllGiftListSubject, (function (v) {
                                      return {
                                              TAG: 107,
                                              _0: v
                                            };
                                    }));
                    case "getWalletBalance" :
                        return handleEmptyMessage(getWalletBalanceSubject, (function (v) {
                                      return {
                                              TAG: 108,
                                              _0: v
                                            };
                                    }));
                    case "getUserLiveInfo" :
                        return handleMessage(getUserLiveInfoSubject, (function (v) {
                                      return {
                                              TAG: 109,
                                              _0: v
                                            };
                                    }));
                    case "getAllLiveList" :
                        return handleEmptyMessage(getAllLiveListSubject, (function (v) {
                                      return {
                                              TAG: 110,
                                              _0: v
                                            };
                                    }));
                    case "getLiveData" :
                        return handleMessage(getLiveDataSubject, (function (v) {
                                      return {
                                              TAG: 112,
                                              _0: v
                                            };
                                    }));
                    case "getGiftList" :
                        return handleMessage(getGiftListSubject, (function (v) {
                                      return {
                                              TAG: 114,
                                              _0: v
                                            };
                                    }));
                    case "getUserInfo" :
                        return handleMessage(getUserInfoSubject, (function (v) {
                                      return {
                                              TAG: 115,
                                              _0: v
                                            };
                                    }));
                    case "getLiveCutInfo" :
                        return handleMessage(getLiveCutInfoSubject, (function (v) {
                                      return {
                                              TAG: 116,
                                              _0: v
                                            };
                                    }));
                    case "getManagerList" :
                        return handleEmptyMessage(getManagerListSubject, (function (v) {
                                      return {
                                              TAG: 200,
                                              _0: v
                                            };
                                    }));
                    case "addManager" :
                        return handleMessage(addManagerSubject, (function (v) {
                                      return {
                                              TAG: 201,
                                              _0: v
                                            };
                                    }));
                    case "deleteManager" :
                        return handleMessage(deleteManagerSubject, (function (v) {
                                      return {
                                              TAG: 202,
                                              _0: v
                                            };
                                    }));
                    case "getAllKickHistory" :
                        return handleMessage(getAllKickHistorySubject, (function (v) {
                                      return {
                                              TAG: 203,
                                              _0: v
                                            };
                                    }));
                    case "managerKick" :
                        return handleMessage(managerKickSubject, (function (v) {
                                      return {
                                              TAG: 204,
                                              _0: v
                                            };
                                    }));
                    case "authorKick" :
                        return handleMessage(authorKickSubject, (function (v) {
                                      return {
                                              TAG: 205,
                                              _0: v
                                            };
                                    }));
                    case "getMedalDetail" :
                        return handleMessage(getMedalDetailSubject, (function (v) {
                                      return {
                                              TAG: 300,
                                              _0: v
                                            };
                                    }));
                    case "getMedalList" :
                        return handleEmptyMessage(getMedalListSubject, (function (v) {
                                      return {
                                              TAG: 301,
                                              _0: v
                                            };
                                    }));
                    case "getMedalRankList" :
                        return handleMessage(getMedalRankListSubject, (function (v) {
                                      return {
                                              TAG: 302,
                                              _0: v
                                            };
                                    }));
                    case "getUserMedal" :
                        return handleMessage(getUserMedalSubject, (function (v) {
                                      return {
                                              TAG: 303,
                                              _0: v
                                            };
                                    }));
                    case "wearMedal" :
                        return handleMessage(wearMedalSubject, (function (v) {
                                      return {
                                              TAG: 304,
                                              _0: v
                                            };
                                    }));
                    case "cancelWearMedal" :
                        return handleEmptyMessage(cancelWearMedalSubject, (function (v) {
                                      return {
                                              TAG: 305,
                                              _0: v
                                            };
                                    }));
                    case "checkLiveAuth" :
                        return handleEmptyMessage(checkLiveAuthSubject, (function (v) {
                                      return {
                                              TAG: 900,
                                              _0: v
                                            };
                                    }));
                    case "getLiveTypeList" :
                        return handleEmptyMessage(getLiveTypeListSubject, (function (v) {
                                      return {
                                              TAG: 901,
                                              _0: v
                                            };
                                    }));
                    case "getPushConfig" :
                        return handleEmptyMessage(getPushConfigSubject, (function (v) {
                                      return {
                                              TAG: 902,
                                              _0: v
                                            };
                                    }));
                    case "getLiveStatus" :
                        return handleEmptyMessage(getLiveStatusSubject, (function (v) {
                                      return {
                                              TAG: 903,
                                              _0: v
                                            };
                                    }));
                    case "getTranscodeInfo" :
                        return handleMessage(getTranscodeInfoSubject, (function (v) {
                                      return {
                                              TAG: 904,
                                              _0: v
                                            };
                                    }));
                    case "startLive" :
                        return handleMessage(startLiveSubject, (function (v) {
                                      return {
                                              TAG: 905,
                                              _0: v
                                            };
                                    }));
                    case "stopLive" :
                        return handleMessage(stopLiveSubject, (function (v) {
                                      return {
                                              TAG: 906,
                                              _0: v
                                            };
                                    }));
                    case "changeTitleAndCover" :
                        return handleMessage(changeTitleAndCoverSubject, (function (v) {
                                      return {
                                              TAG: 907,
                                              _0: v
                                            };
                                    }));
                    case "getLiveCutStatus" :
                        return handleEmptyMessage(getLiveCutStatusSubject, (function (v) {
                                      return {
                                              TAG: 908,
                                              _0: v
                                            };
                                    }));
                    case "setLiveCutStatus" :
                        return handleMessage(setLiveCutStatusSubject, (function (v) {
                                      return {
                                              TAG: 909,
                                              _0: v
                                            };
                                    }));
                    
                  }
                }));
  };
  return {
          connect: connect,
          disConnect: disConnect,
          isConnecting: isConnecting,
          on: on,
          request: request,
          oneshot: oneshot
        };
}
/* uuid Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE


function $$catch(promise, callback) {
  return promise.catch(function (err) {
              return callback(internalToOCamlException(err));
            });
}
/* No side effect */

// Generated by ReScript, PLEASE EDIT WITH CARE


function convertCloseFrame(ws, frame) {
  if (frame === null) {
    return {
            type: "close",
            target: ws
          };
  } else {
    return {
            type: "close",
            target: ws,
            code: frame.code,
            reason: frame.reason
          };
  }
}

function notifyListeners(arr, $$event) {
  arr.forEach(function (fn) {
        fn($$event);
      });
}

function clear(ws) {
  ws.webSocket = undefined;
  ws.openListeners.length = 0;
  ws.closeListeners.length = 0;
  ws.messageListeners.length = 0;
  ws.errorListeners.length = 0;
}

function notifyError(ws, e) {
  var $$event = e.RE_EXN_ID === $$Error$1 ? ({
        type: "error",
        target: ws,
        error: some(e._1)
      }) : ({
        type: "error",
        target: ws
      });
  notifyListeners(ws.errorListeners, $$event);
}

function isOpen(ws) {
  return isSome(ws.webSocket);
}

function clearAndNotifyClose(ws) {
  if (!isSome(ws.webSocket)) {
    return ;
  }
  var $$event = {
    type: "close",
    target: ws
  };
  notifyListeners(ws.closeListeners, $$event);
  clear(ws);
}

function close(ws) {
  var w = ws.webSocket;
  if (w !== undefined) {
    $$catch(valFromOption(w).disconnect(), (function (e) {
              notifyError(ws, e);
              return Promise.resolve(clearAndNotifyClose(ws));
            })).finally(function () {
          setTimeout((function () {
                  clearAndNotifyClose(ws);
                }), 15000);
        });
    return ;
  }
  
}

function make(url) {
  var ws = {
    webSocket: undefined,
    openListeners: [],
    closeListeners: [],
    messageListeners: [],
    errorListeners: []
  };
  $$catch(TauriPluginWebsocketApi.default.connect(url).then(function (w) {
            ws.webSocket = some(w);
            w.addListener(function (m) {
                  if (m === null) {
                    return ;
                  }
                  switch (m.type) {
                    case "Text" :
                        var event_data = m.data;
                        var $$event = {
                          type: "message",
                          target: ws,
                          data: event_data
                        };
                        return notifyListeners(ws.messageListeners, $$event);
                    case "Close" :
                        if (!isSome(ws.webSocket)) {
                          return ;
                        }
                        var $$event$1 = convertCloseFrame(ws, m.data);
                        notifyListeners(ws.closeListeners, $$event$1);
                        return clear(ws);
                    case "Error" :
                        var event_message = m.data;
                        var $$event$2 = {
                          type: "error",
                          target: ws,
                          message: event_message
                        };
                        return notifyListeners(ws.errorListeners, $$event$2);
                    default:
                      return ;
                  }
                });
            var $$event = {
              type: "open",
              target: ws
            };
            notifyListeners(ws.openListeners, $$event);
          }), (function (e) {
          notifyError(ws, e);
          return Promise.resolve(close(ws));
        }));
  return ws;
}

function send(ws, message) {
  var w = ws.webSocket;
  if (w !== undefined) {
    $$catch(valFromOption(w).send(message), (function (e) {
            return Promise.resolve(notifyError(ws, e));
          }));
    return ;
  }
  
}

function addOpenListener(ws, fn) {
  ws.openListeners.push(fn);
}

function addCloseListener(ws, fn) {
  ws.closeListeners.push(fn);
}

function addMessageListener(ws, fn) {
  ws.messageListeners.push(fn);
}

function addErrorListener(ws, fn) {
  ws.errorListeners.push(fn);
}
/* tauri-plugin-websocket-api Not a pure module */

var Tauri__WebSocket = /*#__PURE__*/Object.freeze({
  __proto__: null,
  addCloseListener: addCloseListener,
  addErrorListener: addErrorListener,
  addMessageListener: addMessageListener,
  addOpenListener: addOpenListener,
  close: close,
  isOpen: isOpen,
  make: make,
  send: send
});

// Generated by ReScript, PLEASE EDIT WITH CARE


function makeSession(config) {
  return make$1(Tauri__WebSocket, config);
}
/* AcLive__Session Not a pure module */

const tauriSession = makeSession;

export { tauriSession };
