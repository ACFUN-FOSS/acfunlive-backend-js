import * as Uuid from 'uuid';
import * as Ws from 'ws';

// Generated by ReScript, PLEASE EDIT WITH CARE


function $$delete$1(dict, string) {
  delete(dict[string]);
}
/* No side effect */

function some(x) {
  if (x === undefined) {
    return {
            BS_PRIVATE_NESTED_SOME_NONE: 0
          };
  } else if (x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== undefined) {
    return {
            BS_PRIVATE_NESTED_SOME_NONE: x.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
          };
  } else {
    return x;
  }
}

function valFromOption(x) {
  if (!(x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== undefined)) {
    return x;
  }
  var depth = x.BS_PRIVATE_NESTED_SOME_NONE;
  if (depth === 0) {
    return ;
  } else {
    return {
            BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
          };
  }
}
/* No side effect */

// Generated by ReScript, PLEASE EDIT WITH CARE


function map(opt, f) {
  var f$1 = function (x) {
    return f(x);
  };
  if (opt !== undefined) {
    return some(f$1(valFromOption(opt)));
  }
  
}

function getWithDefault$1(opt, $$default) {
  if (opt !== undefined) {
    return valFromOption(opt);
  } else {
    return $$default;
  }
}

function isSome(x) {
  return x !== undefined;
}
/* No side effect */

// Generated by ReScript, PLEASE EDIT WITH CARE


function intToResponseType(i) {
  if (i >= 300) {
    if (i >= 2000) {
      if (i >= 2104) {
        if (i > 3002 || i < 2999) {
          return {
                  TAG: "UnknownResponse",
                  _0: i
                };
        } else {
          return i;
        }
      } else if (i > 2099 || i < 2006) {
        return i;
      } else {
        return {
                TAG: "UnknownResponse",
                _0: i
              };
      }
    } else if (i >= 910) {
      if (i > 1008 || i < 1000) {
        return {
                TAG: "UnknownResponse",
                _0: i
              };
      } else {
        return i;
      }
    } else if (i > 899 || i < 306) {
      return i;
    } else {
      return {
              TAG: "UnknownResponse",
              _0: i
            };
    }
  } else if (i >= 112) {
    if (i >= 117) {
      if (i > 205 || i < 200) {
        return {
                TAG: "UnknownResponse",
                _0: i
              };
      } else {
        return i;
      }
    } else if (i !== 113) {
      return i;
    } else {
      return {
              TAG: "UnknownResponse",
              _0: i
            };
    }
  } else if (i >= 7) {
    if (i > 110 || i < 100) {
      return {
              TAG: "UnknownResponse",
              _0: i
            };
    } else {
      return i;
    }
  } else if (i > 0) {
    return i;
  } else {
    return {
            TAG: "UnknownResponse",
            _0: i
          };
  }
}

function intToResponseResult(i) {
  switch (i) {
    case 1 :
        return "Success";
    case 2 :
    case 3 :
    case 4 :
    case 5 :
    case 6 :
    case 7 :
    case 8 :
    case 9 :
        return {
                TAG: "UnknownResult",
                _0: i
              };
    case 10 :
        return "JsonParseError";
    case 11 :
        return "InvalidRequestType";
    case 12 :
        return "InvalidRequestData";
    case 13 :
        return "HandleRequestError";
    case 14 :
        return "NeedLogin";
    default:
      return {
              TAG: "UnknownResult",
              _0: i
            };
  }
}

function makeMessage(data, requestIDOpt) {
  var requestID = requestIDOpt !== undefined ? requestIDOpt : "";
  return {
          requestID: requestID,
          data: data
        };
}

function makeEmptyMessage(requestIDOpt) {
  var requestID = requestIDOpt !== undefined ? requestIDOpt : "";
  return {
          requestID: requestID
        };
}

function getResponseRequestId(response) {
  return response._0.requestID;
}

function getEmptyResponseRequestId(response) {
  return response._0.requestID;
}

function getOptionalResponseRequestId(response) {
  return response._0.requestID;
}

function intToManagerType(i) {
  if (i !== 0) {
    if (i !== 1) {
      return {
              TAG: "UnknownManagerType",
              _0: i
            };
    } else {
      return "NormalManager";
    }
  } else {
    return "NotManager";
  }
}

function intToGiftPayType(i) {
  if (i !== 1) {
    if (i !== 2) {
      return {
              TAG: "UnknownGiftPayType",
              _0: i
            };
    } else {
      return "FreeGift";
    }
  } else {
    return "NonFreeGift";
  }
}

function intToSharePlatformType(i) {
  switch (i) {
    case 1 :
        return "QQ";
    case 2 :
        return "Qzone";
    case 3 :
        return "Weibo";
    case 4 :
        return "WeChat";
    case 5 :
        return "WeChatMoments";
    case 6 :
        return "AcFunMoment";
    default:
      return {
              TAG: "UnknownPlatform",
              _0: i
            };
  }
}

function intToRedpackDisplayStatus(i) {
  switch (i) {
    case 0 :
        return "RedpackShow";
    case 1 :
        return "RedpackGetToken";
    case 2 :
        return "RedpackGrab";
    default:
      return {
              TAG: "UnknownRedpackDisplayStatus",
              _0: i
            };
  }
}

function intToChatMediaType(i) {
  if (i !== 1) {
    if (i !== 2) {
      return {
              TAG: "UnknownChatMediaType",
              _0: i
            };
    } else {
      return "Video";
    }
  } else {
    return "Audio";
  }
}

function intToChatEndType(i) {
  switch (i) {
    case 1 :
        return "CancelByAuthor";
    case 2 :
        return "EndByAuthor";
    case 3 :
        return "EndByGuest";
    case 4 :
        return "GuestReject";
    case 5 :
        return "GuestTimeout";
    case 6 :
        return "GuestHeartbeatTimeout";
    case 7 :
        return "AuthorHeartbeatTimeout";
    case 8 :
        return "PeerLiveStopped";
    default:
      return {
              TAG: "UnknownChatEndType",
              _0: i
            };
  }
}

function intToManagerStateType(i) {
  switch (i) {
    case 0 :
        return "NotManager";
    case 1 :
        return "ManagerAdded";
    case 2 :
        return "ManagerRemoved";
    case 3 :
        return "IsManager";
    default:
      return {
              TAG: "UnknownManagerStateType",
              _0: i
            };
  }
}

var heartbeat = "{\"type\":1}";
/* No side effect */

var $$Error$1 = "JsError";
/* No side effect */

var id = {
  contents: 0
};

function create(str) {
  id.contents = id.contents + 1 | 0;
  return str + ("/" + id.contents);
}

function is_extension(e) {
  if (e == null) {
    return false;
  } else {
    return typeof e.RE_EXN_ID === "string";
  }
}
/* No side effect */

function internalToOCamlException(e) {
  if (is_extension(e)) {
    return e;
  } else {
    return {
            RE_EXN_ID: "JsError",
            _1: e
          };
  }
}
/* No side effect */

// Generated by ReScript, PLEASE EDIT WITH CARE


var mapValues = ((dict, fn)=>{
      var key,newDict = {};
      for (key in dict) {
        newDict[key] = fn(dict[key]);
      }
      return newDict
    });

var every = ((dict, fn)=>{
      for (var key in dict) {
        if (!fn(dict[key])) {
          return false
        }
      }
      return true
    });

function classify(value) {
  var typeOfValue = typeof value;
  if (typeOfValue === "symbol") {
    return {
            TAG: "Symbol",
            _0: value
          };
  } else if (typeOfValue === "boolean") {
    return {
            TAG: "Boolean",
            _0: value
          };
  } else if (typeOfValue === "string") {
    return {
            TAG: "String",
            _0: value
          };
  } else if (typeOfValue === "function") {
    return {
            TAG: "Function",
            _0: value
          };
  } else if (typeOfValue === "object") {
    if (value === null) {
      return "Null";
    } else if (Array.isArray(value)) {
      return {
              TAG: "Array",
              _0: value.map(function (i) {
                    return classify(i);
                  })
            };
    } else if (value.constructor === Object) {
      return {
              TAG: "Dict",
              _0: mapValues(value, classify)
            };
    } else {
      return {
              TAG: "Object",
              _0: value
            };
    }
  } else if (typeOfValue === "undefined") {
    return "Undefined";
  } else if (typeOfValue === "number") {
    if (Number.isNaN(value)) {
      return "NaN";
    } else {
      return {
              TAG: "Number",
              _0: value
            };
    }
  } else {
    return {
            TAG: "BigInt",
            _0: value
          };
  }
}

function value(literal) {
  if (typeof literal !== "object") {
    switch (literal) {
      case "Null" :
          return null;
      case "Undefined" :
          return undefined;
      case "NaN" :
          return NaN;
      
    }
  } else {
    switch (literal.TAG) {
      case "Array" :
          return literal._0.map(value);
      case "Dict" :
          return mapValues(literal._0, value);
      default:
        return literal._0;
    }
  }
}

function isJsonable(literal) {
  if (typeof literal !== "object") {
    if (literal === "Null") {
      return true;
    } else {
      return false;
    }
  }
  switch (literal.TAG) {
    case "String" :
    case "Number" :
    case "Boolean" :
        return true;
    case "Array" :
        return literal._0.every(isJsonable);
    case "Dict" :
        return every(literal._0, isJsonable);
    default:
      return false;
  }
}

function toText(literal) {
  if (typeof literal !== "object") {
    switch (literal) {
      case "Null" :
          return "null";
      case "Undefined" :
          return "undefined";
      case "NaN" :
          return "NaN";
      
    }
  } else {
    switch (literal.TAG) {
      case "String" :
          return JSON.stringify(literal._0);
      case "Number" :
      case "Boolean" :
          return literal._0;
      case "BigInt" :
          return literal._0 + "n";
      case "Symbol" :
          return literal._0.toString();
      case "Array" :
          return "[" + literal._0.map(toText).join(", ") + "]";
      case "Dict" :
          var v = literal._0;
          return "{" + Object.keys(v).map(function (key) {
                        return JSON.stringify(key) + ": " + toText(v[key]);
                      }).join(", ") + "}";
      case "Function" :
          return "[object Function]";
      case "Object" :
          return Object.prototype.toString.call(literal._0);
      
    }
  }
}

var symbol = Symbol("rescript-struct");

var Raised = /* @__PURE__ */create("S_Core-RescriptStruct.Raised");

class RescriptStructError extends Error {
      constructor(code, operation, path) {
        super();
        this.operation = operation;
        this.code = code;
        this.path = path;
        this.s = symbol;
        this.RE_EXN_ID = Raised;
        this._1 = this;
        this.Error = this;
        this.name = "RescriptStructError";
      }
      get message() {
        return message(this);
      }
      get reason() {
        return reason(this);
      }
    }

function getOrRethrow(exn) {
  if ((exn&&exn.s===symbol)) {
    return exn;
  }
  throw (exn&&exn.RE_EXN_ID==='JsError') ? exn._1 : exn;
}

function prependLocationOrRethrow(exn, $$location) {
  var error = getOrRethrow(exn);
  var path = "[" + JSON.stringify($$location) + "]" + error.path;
  throw new RescriptStructError(error.code, error.operation, path);
}

function make$3(selfStruct, path, operation) {
  return {
          struct: selfStruct,
          fail: (function (message, customPathOpt) {
              var customPath = customPathOpt !== undefined ? customPathOpt : "";
              throw new RescriptStructError({
                        TAG: "OperationFailed",
                        _0: message
                      }, operation, path + customPath);
            }),
          failWithError: (function (error) {
              throw new RescriptStructError(error.code, operation, path + error.path);
            })
        };
}

function scope(b, fn) {
  var prevVarsAllocation = b.l;
  var prevCode = b.c;
  b.l = "";
  b.c = "";
  var resultCode = fn(b);
  var varsAllocation = b.l;
  var code = varsAllocation === "" ? b.c : "let " + varsAllocation + ";" + b.c;
  b.l = prevVarsAllocation;
  b.c = prevCode;
  return code + resultCode;
}

function varWithoutAllocation(b) {
  var newCounter = b.v + 1;
  b.v = newCounter;
  var v = "v" + newCounter;
  b.s.add(v);
  return v;
}

function $$var(b) {
  var v = varWithoutAllocation(b);
  b.l = b.l === "" ? v : b.l + "," + v;
  return v;
}

function toVar(b, val) {
  if (b.s.has(val)) {
    return val;
  }
  var $$var$1 = $$var(b);
  b.c = b.c + ($$var$1 + "=" + val + ";");
  return $$var$1;
}

function transform(b, input, isAsync, operation) {
  if (b.a === true) {
    var prevCode = b.c;
    b.c = "";
    var inputVar = varWithoutAllocation(b);
    var operationOutputVar = operation(b, inputVar);
    var outputVar = $$var(b);
    b.c = prevCode + (outputVar + "=()=>" + input + "().then(" + inputVar + "=>{" + b.c + "return " + operationOutputVar + (
        isAsync ? "()" : ""
      ) + "});");
    return outputVar;
  }
  if (!isAsync) {
    return operation(b, input);
  }
  b.a = true;
  var outputVar$1 = $$var(b);
  b.c = b.c + (outputVar$1 + "=" + operation(b, input) + ";");
  return outputVar$1;
}

function embedSyncOperation(b, input, fn) {
  return transform(b, input, false, (function (b, input) {
                return "e[" + (b.e.push(fn) - 1) + "](" + input + ")";
              }));
}

function embedAsyncOperation(b, input, fn) {
  return transform(b, input, true, (function (b, input) {
                return "e[" + (b.e.push(fn) - 1) + "](" + input + ")";
              }));
}

function raiseWithArg(b, path, fn, arg) {
  return "e[" + (b.e.push(function (arg) {
                var code = fn(arg);
                throw new RescriptStructError(code, b.o, path);
              }) - 1) + "](" + arg + ")";
}

function invalidOperation(b, path, description) {
  throw new RescriptStructError({
            TAG: "InvalidOperation",
            description: description
          }, b.o, path);
}

function withCatch(b, $$catch, fn) {
  var prevCode = b.c;
  b.c = "";
  var errorVar = varWithoutAllocation(b);
  var maybeResolveVar = $$catch(b, errorVar);
  var catchCode = "if(" + (errorVar + "&&" + errorVar + ".s===s") + "){" + b.c;
  b.c = "";
  var fnOutput = fn(b);
  var isAsync = b.a;
  var isInlined = !b.s.has(fnOutput);
  var outputVar = isAsync || isInlined ? $$var(b) : fnOutput;
  var catchCode$1 = maybeResolveVar !== undefined ? (function (catchLocation) {
        return catchCode + (
                catchLocation === 1 ? "return Promise.resolve(" + maybeResolveVar + ")" : (
                    catchLocation === 2 ? "return " + maybeResolveVar : (
                        isAsync ? outputVar + "=()=>Promise.resolve(" + maybeResolveVar + ")" : outputVar + "=" + maybeResolveVar
                      )
                  )
              ) + ("}else{throw " + errorVar + "}");
      }) : (function (param) {
        return catchCode + "}throw " + errorVar;
      });
  b.c = prevCode + ("try{" + b.c + (
      isAsync ? outputVar + "=()=>{try{return " + fnOutput + "().catch(" + errorVar + "=>{" + catchCode$1(2) + "})}catch(" + errorVar + "){" + catchCode$1(1) + "}};" : (
          isInlined ? outputVar + "=" + fnOutput : ""
        )
    ) + "}catch(" + errorVar + "){" + catchCode$1(0) + "}");
  return outputVar;
}

function withPathPrepend(b, path, maybeDynamicLocationVar, fn) {
  if (path === "" && maybeDynamicLocationVar === undefined) {
    return fn(b, path);
  }
  try {
    return withCatch(b, (function (b, errorVar) {
                  b.c = errorVar + ".path=" + JSON.stringify(path) + "+" + (
                    maybeDynamicLocationVar !== undefined ? "'[\"'+" + maybeDynamicLocationVar + "+'\"]'+" : ""
                  ) + errorVar + ".path";
                }), (function (b) {
                  return fn(b, "");
                }));
  }
  catch (raw_error){
    var error = internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === Raised) {
      var error$1 = error._1;
      throw new RescriptStructError(error$1.code, error$1.operation, path + "[]" + error$1.path);
    }
    throw error;
  }
}

function typeFilterCode(b, typeFilter, struct, inputVar, path) {
  return "if(" + typeFilter(inputVar) + "){" + raiseWithArg(b, path, (function (input) {
                return {
                        TAG: "InvalidType",
                        expected: struct,
                        received: input
                      };
              }), inputVar) + "}";
}

function use(b, struct, input, path) {
  var isParentAsync = b.a;
  var isParsing = b.o === "Parsing";
  b.i = input;
  b.a = false;
  var output = (
      isParsing ? struct.p : struct.s
    )(b, struct, path);
  if (isParsing) {
    struct.i = b.a;
    b.a = isParentAsync || b.a;
  }
  return output;
}

function useWithTypeFilter(b, struct, input, path) {
  var typeFilter = struct.f;
  var input$1;
  if (typeFilter !== undefined) {
    var inputVar = toVar(b, input);
    b.c = b.c + typeFilterCode(b, typeFilter, struct, inputVar, path);
    input$1 = inputVar;
  } else {
    input$1 = input;
  }
  return use(b, struct, input$1, path);
}

function noop(b, param, param$1) {
  return b.i;
}

function noopOperation(i) {
  return i;
}

function build(builder, struct, operation) {
  var b = {
    a: false,
    c: "",
    o: operation,
    v: -1,
    s: new Set(["i"]),
    l: "",
    i: "i",
    e: []
  };
  var output = builder(b, struct, "");
  if (operation === "Parsing") {
    var typeFilter = struct.f;
    if (typeFilter !== undefined) {
      b.c = typeFilterCode(b, typeFilter, struct, "i", "") + b.c;
    }
    struct.i = b.a;
  }
  if (b.c === "" && output === "i") {
    return noopOperation;
  }
  var inlinedFunction = "i=>{" + (
    b.l === "" ? "" : "let " + b.l + ";"
  ) + b.c + "return " + output + "}";
  return new Function("e", "s", "return " + inlinedFunction)(b.e, symbol);
}

function loop(_struct) {
  while(true) {
    var struct = _struct;
    var literal = struct.t;
    if (typeof literal !== "object") {
      throw symbol;
    }
    switch (literal.TAG) {
      case "Literal" :
          return literal._0;
      case "Object" :
          return {
                  TAG: "Dict",
                  _0: mapValues(literal.fields, loop)
                };
      case "Tuple" :
          return {
                  TAG: "Array",
                  _0: literal._0.map(function (a) {
                        return loop(a);
                      })
                };
      case "Union" :
          _struct = literal._0[0];
          continue ;
      default:
        throw symbol;
    }
  }}

function toLiteral(struct) {
  try {
    return loop(struct);
  }
  catch (raw_jsExn){
    var jsExn = internalToOCamlException(raw_jsExn);
    if (jsExn.RE_EXN_ID === $$Error$1) {
      var jsExn$1 = jsExn._1;
      if (jsExn$1 === symbol) {
        return ;
      }
      throw jsExn$1;
    }
    throw jsExn;
  }
}

function validateJsonableStruct(_struct, rootStruct, _isRootOpt) {
  while(true) {
    var isRootOpt = _isRootOpt;
    var struct = _struct;
    var isRoot = isRootOpt !== undefined ? isRootOpt : false;
    if (!(isRoot || rootStruct !== struct)) {
      return ;
    }
    var childrenStructs = struct.t;
    var exit = 0;
    if (typeof childrenStructs !== "object") {
      if (childrenStructs !== "Unknown") {
        return ;
      }
      exit = 2;
    } else {
      switch (childrenStructs.TAG) {
        case "Literal" :
            if (isJsonable(childrenStructs._0)) {
              return ;
            }
            exit = 2;
            break;
        case "Option" :
            exit = 2;
            break;
        case "Object" :
            var fieldNames = childrenStructs.fieldNames;
            var fields = childrenStructs.fields;
            for(var idx = 0 ,idx_finish = fieldNames.length; idx < idx_finish; ++idx){
              var fieldName = fieldNames[idx];
              var fieldStruct = fields[fieldName];
              try {
                var s = fieldStruct.t;
                var tmp;
                tmp = typeof s !== "object" || s.TAG !== "Option" ? fieldStruct : s._0;
                validateJsonableStruct(tmp, rootStruct, undefined);
              }
              catch (raw_exn){
                var exn = internalToOCamlException(raw_exn);
                prependLocationOrRethrow(exn, fieldName);
              }
            }
            return ;
        case "Tuple" :
            childrenStructs._0.forEach(function (struct, i) {
                  try {
                    return validateJsonableStruct(struct, rootStruct, undefined);
                  }
                  catch (raw_exn){
                    var exn = internalToOCamlException(raw_exn);
                    return prependLocationOrRethrow(exn, i.toString());
                  }
                });
            return ;
        case "Union" :
            childrenStructs._0.forEach(function (struct) {
                  validateJsonableStruct(struct, rootStruct, undefined);
                });
            return ;
        case "Null" :
        case "Array" :
        case "Dict" :
            exit = 1;
            break;
        
      }
    }
    switch (exit) {
      case 1 :
          _isRootOpt = undefined;
          _struct = childrenStructs._0;
          continue ;
      case 2 :
          throw new RescriptStructError({
                    TAG: "InvalidJsonStruct",
                    _0: struct
                  }, "Serializing", "");
      
    }
  }}

function makeWithNoopSerializer(name, tagged, metadataMap, parseOperationBuilder, maybeTypeFilter) {
  return {
          t: tagged,
          n: name,
          p: parseOperationBuilder,
          s: noop,
          f: maybeTypeFilter,
          i: 0,
          m: metadataMap
        };
}

function unexpectedAsync(param) {
  throw new RescriptStructError("UnexpectedAsync", "Parsing", "");
}

function init(struct) {
  var operation = build(struct.p, struct, "Parsing");
  var isAsync = struct.i;
  if (isAsync) {
    return unexpectedAsync;
  } else {
    return operation;
  }
}

function parseAnyOrRaiseWith(i, s) {
  try {
    return s["op"](i);
  }
  catch (exn){
    if (s["op"]) {
      throw exn;
    }
    var o = init(s);
    s["op"] = o;
    return o(i);
  }
}

function parseAnyWith$1(any, struct) {
  try {
    return {
            TAG: "Ok",
            _0: parseAnyOrRaiseWith(any, struct)
          };
  }
  catch (raw_exn){
    var exn = internalToOCamlException(raw_exn);
    return {
            TAG: "Error",
            _0: getOrRethrow(exn)
          };
  }
}

function init$2(struct) {
  validateJsonableStruct(struct, struct, true);
  return build(struct.s, struct, "Serializing");
}

function serializeOrRaiseWith(i, s) {
  try {
    return s["osj"](i);
  }
  catch (exn){
    if (s["osj"]) {
      throw exn;
    }
    var o = init$2(s);
    s["osj"] = o;
    return o(i);
  }
}

function serializeWith(value, struct) {
  try {
    return {
            TAG: "Ok",
            _0: serializeOrRaiseWith(value, struct)
          };
  }
  catch (raw_exn){
    var exn = internalToOCamlException(raw_exn);
    return {
            TAG: "Error",
            _0: getOrRethrow(exn)
          };
  }
}

function serializeToJsonStringWith$1(value, struct, spaceOpt) {
  var space = spaceOpt !== undefined ? spaceOpt : 0;
  var json = serializeWith(value, struct);
  if (json.TAG === "Ok") {
    return {
            TAG: "Ok",
            _0: JSON.stringify(json._0, null, space)
          };
  } else {
    return json;
  }
}

function parseJsonStringWith$1(json, struct) {
  var json$1;
  try {
    json$1 = {
      TAG: "Ok",
      _0: JSON.parse(json)
    };
  }
  catch (raw_error){
    var error = internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === $$Error$1) {
      json$1 = {
        TAG: "Error",
        _0: new RescriptStructError({
              TAG: "OperationFailed",
              _0: error._1.message
            }, "Parsing", "")
      };
    } else {
      throw error;
    }
  }
  if (json$1.TAG === "Ok") {
    return parseAnyWith$1(json$1._0, struct);
  } else {
    return json$1;
  }
}

var empty = {};

function set(map, id, metadata) {
  if (map === empty) {
    return ({[id]:metadata});
  }
  var copy = Object.assign({}, map);
  copy[id] = metadata;
  return copy;
}

function primitiveName() {
  return this.t;
}

function containerName() {
  var tagged = this.t;
  return tagged.TAG + "(" + tagged._0.n(undefined) + ")";
}

function custom$1(name, definer) {
  return {
          t: "Unknown",
          n: (function () {
              return name;
            }),
          p: (function (b, selfStruct, path) {
              var input = b.i;
              var match = definer(make$3(selfStruct, path, b.o));
              var parser = match.p;
              if (parser !== undefined) {
                if (match.a !== undefined) {
                  return invalidOperation(b, path, "The S.custom doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser.");
                } else {
                  return embedSyncOperation(b, input, parser);
                }
              }
              var asyncParser = match.a;
              if (asyncParser !== undefined) {
                return embedAsyncOperation(b, input, asyncParser);
              } else if (match.s !== undefined) {
                return invalidOperation(b, path, "The S.custom parser is missing");
              } else {
                return input;
              }
            }),
          s: (function (b, selfStruct, path) {
              var input = b.i;
              var match = definer(make$3(selfStruct, path, b.o));
              var serializer = match.s;
              if (serializer !== undefined) {
                return embedSyncOperation(b, input, serializer);
              } else if (match.a !== undefined || match.p !== undefined) {
                return invalidOperation(b, path, "The S.custom serializer is missing");
              } else {
                return input;
              }
            }),
          f: undefined,
          i: 0,
          m: empty
        };
}

function literalCheckBuilder(b, value, inputVar) {
  if (Number.isNaN(value)) {
    return "Number.isNaN(" + inputVar + ")";
  }
  if (value === null) {
    return inputVar + "===null";
  }
  if (value === (void 0)) {
    return inputVar + "===void 0";
  }
  var check = inputVar + "===" + ("e[" + (b.e.push(value) - 1) + "]");
  if (Array.isArray(value)) {
    return "(" + check + "||Array.isArray(" + inputVar + ")&&" + inputVar + ".length===" + value.length + (
            value.length > 0 ? "&&" + value.map(function (item, idx) {
                      return literalCheckBuilder(b, item, inputVar + "[" + idx + "]");
                    }).join("&&") : ""
          ) + ")";
  }
  if (!(value&&value.constructor===Object)) {
    return check;
  }
  var keys = Object.keys(value);
  var numberOfKeys = keys.length;
  return "(" + check + "||" + inputVar + "&&" + inputVar + ".constructor===Object&&Object.keys(" + inputVar + ").length===" + numberOfKeys + (
          numberOfKeys > 0 ? "&&" + keys.map(function (key) {
                    return literalCheckBuilder(b, value[key], inputVar + "[" + JSON.stringify(key) + "]");
                  }).join("&&") : ""
        ) + ")";
}

function literal(value) {
  var literal$1 = classify(value);
  var operationBuilder = function (b, param, path) {
    var inputVar = toVar(b, b.i);
    b.c = b.c + (literalCheckBuilder(b, value, inputVar) + "||" + raiseWithArg(b, path, (function (input) {
              return {
                      TAG: "InvalidLiteral",
                      expected: literal$1,
                      received: input
                    };
            }), inputVar) + ";");
    return inputVar;
  };
  return {
          t: {
            TAG: "Literal",
            _0: literal$1
          },
          n: (function () {
              return "Literal(" + toText(literal$1) + ")";
            }),
          p: operationBuilder,
          s: operationBuilder,
          f: undefined,
          i: 0,
          m: empty
        };
}

literal((void 0));

function toKindWithSet(definition, embededSet) {
  if (embededSet.has(definition)) {
    return 2;
  } else if (typeof definition === "object" && definition !== null) {
    return 0;
  } else {
    return 1;
  }
}

function factory(struct, definer) {
  return {
          t: struct.t,
          n: struct.n,
          p: (function (b, param, path) {
              var input = b.i;
              return embedSyncOperation(b, use(b, struct, input, path), definer);
            }),
          s: (function (b, selfStruct, path) {
              var inputVar = toVar(b, b.i);
              var definition = definer(symbol);
              var definitionToOutput = function (definition, outputPath) {
                var kind = symbol === definition ? 2 : (
                    typeof definition === "object" && definition !== null ? 0 : 1
                  );
                switch (kind) {
                  case 0 :
                      var keys = Object.keys(definition);
                      var maybeOutputRef = 0;
                      for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                        var key = keys[idx];
                        var definition$1 = definition[key];
                        var maybeOutput = definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
                        var match = maybeOutputRef;
                        if (typeof match !== "string") {
                          if (match === 0) {
                            maybeOutputRef = maybeOutput;
                          }
                          
                        } else if (!(typeof maybeOutput !== "string" && maybeOutput === 0)) {
                          maybeOutputRef = 1;
                        }
                        
                      }
                      return maybeOutputRef;
                  case 1 :
                      var constantVar = $$var(b);
                      b.c = b.c + (constantVar + "=" + inputVar + outputPath + ";if(" + constantVar + "!==" + ("e[" + (b.e.push(definition) - 1) + "]") + "){" + raiseWithArg(b, path + outputPath, (function (input) {
                                return {
                                        TAG: "InvalidLiteral",
                                        expected: classify(definition),
                                        received: input
                                      };
                              }), constantVar) + "}");
                      return 0;
                  case 2 :
                      return inputVar + outputPath;
                  
                }
              };
              var output = definitionToOutput(definition, "");
              if (typeof output === "string") {
                return use(b, struct, output, path);
              }
              if (output !== 0) {
                return invalidOperation(b, path, "Can't create serializer. The S.variant's value is registered multiple times. Use S.transform instead");
              }
              var literal = toLiteral(selfStruct);
              if (literal === undefined) {
                return invalidOperation(b, path, "Can't create serializer. The S.variant's value is not registered and not a literal. Use S.transform instead");
              }
              var value$1 = value(literal);
              return use(b, struct, "e[" + (b.e.push(value$1) - 1) + "]", path);
            }),
          f: struct.f,
          i: 0,
          m: struct.m
        };
}

var defaultMetadataId = "rescript-struct:Option.default";

function parseOperationBuilder(b, selfStruct, path) {
  var inputVar = toVar(b, b.i);
  var outputVar = $$var(b);
  var isNull = (selfStruct.t.TAG === "Null");
  var childStruct = selfStruct.t._0;
  var ifCode = scope(b, (function (b) {
          return outputVar + "=" + use(b, childStruct, inputVar, path);
        }));
  var isAsync = childStruct.i;
  b.c = b.c + ("if(" + inputVar + "!==" + (
      isNull ? "null" : "void 0"
    ) + "){" + ifCode + "}else{" + outputVar + "=" + (
      isAsync ? "()=>Promise.resolve(void 0)" : "void 0"
    ) + "}");
  return outputVar;
}

function serializeOperationBuilder(b, selfStruct, path) {
  var inputVar = toVar(b, b.i);
  var outputVar = $$var(b);
  var isNull = (selfStruct.t.TAG === "Null");
  var childStruct = selfStruct.t._0;
  b.c = b.c + ("if(" + inputVar + "!==void 0){" + scope(b, (function (b) {
            var value = valFromOption;
            return outputVar + "=" + use(b, childStruct, "e[" + (b.e.push(value) - 1) + "](" + inputVar + ")", path);
          })) + "}else{" + outputVar + "=" + (
      isNull ? "null" : "void 0"
    ) + "}");
  return outputVar;
}

function maybeTypeFilter(struct, inlinedNoneValue) {
  var typeFilter = struct.f;
  if (typeFilter !== undefined) {
    return (function (inputVar) {
              return inputVar + "!==" + inlinedNoneValue + "&&(" + typeFilter(inputVar) + ")";
            });
  }
  
}

function factory$1(struct) {
  return {
          t: {
            TAG: "Option",
            _0: struct
          },
          n: containerName,
          p: parseOperationBuilder,
          s: serializeOperationBuilder,
          f: maybeTypeFilter(struct, "void 0"),
          i: 0,
          m: empty
        };
}

function getWithDefault(struct, $$default) {
  return {
          t: struct.t,
          n: struct.n,
          p: (function (b, param, path) {
              var input = b.i;
              return transform(b, use(b, struct, input, path), false, (function (b, input) {
                            var tmp;
                            tmp = $$default.TAG === "Value" ? "e[" + (b.e.push($$default._0) - 1) + "]" : "e[" + (b.e.push($$default._0) - 1) + "]()";
                            return input + "===void 0?" + tmp + ":" + input;
                          }));
            }),
          s: struct.s,
          f: struct.f,
          i: 0,
          m: set(struct.m, defaultMetadataId, $$default)
        };
}

function getOr(struct, defalutValue) {
  return getWithDefault(struct, {
              TAG: "Value",
              _0: defalutValue
            });
}

function factory$2(struct) {
  return {
          t: {
            TAG: "Null",
            _0: struct
          },
          n: containerName,
          p: parseOperationBuilder,
          s: serializeOperationBuilder,
          f: maybeTypeFilter(struct, "null"),
          i: 0,
          m: empty
        };
}

function typeFilter(inputVar) {
  return "!" + inputVar + "||" + inputVar + ".constructor!==Object";
}

function noopRefinement(_b, param, param$1, param$2) {
  
}

function makeParseOperationBuilder(itemDefinitions, itemDefinitionsSet, definition, inputRefinement, unknownKeysRefinement) {
  return function (b, selfStruct, path) {
    var inputVar = toVar(b, b.i);
    var registeredDefinitions = new Set();
    var asyncOutputVars = [];
    inputRefinement(b, selfStruct, inputVar, path);
    var prevCode = b.c;
    b.c = "";
    unknownKeysRefinement(b, selfStruct, inputVar, path);
    var unknownKeysRefinementCode = b.c;
    b.c = "";
    var definitionToOutput = function (definition, outputPath) {
      var kind = toKindWithSet(definition, itemDefinitionsSet);
      switch (kind) {
        case 0 :
            var isArray = Array.isArray(definition);
            var keys = Object.keys(definition);
            var codeRef = isArray ? "[" : "{";
            for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
              var key = keys[idx];
              var definition$1 = definition[key];
              var output = definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
              codeRef = codeRef + (
                isArray ? output : JSON.stringify(key) + ":" + output
              ) + ",";
            }
            return codeRef + (
                    isArray ? "]" : "}"
                  );
        case 1 :
            return "e[" + (b.e.push(definition) - 1) + "]";
        case 2 :
            registeredDefinitions.add(definition);
            var inputPath = definition.p;
            var struct = definition.s;
            var fieldOuputVar = useWithTypeFilter(b, struct, inputVar + inputPath, path + inputPath);
            var isAsyncField = struct.i;
            if (isAsyncField) {
              asyncOutputVars.push(fieldOuputVar);
            }
            return fieldOuputVar;
        
      }
    };
    var syncOutput = definitionToOutput(definition, "");
    var registeredFieldsCode = b.c;
    b.c = "";
    for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
      var itemDefinition = itemDefinitions[idx];
      if (!registeredDefinitions.has(itemDefinition)) {
        var inputPath = itemDefinition.p;
        var struct = itemDefinition.s;
        var fieldOuputVar = useWithTypeFilter(b, struct, inputVar + inputPath, path + inputPath);
        var isAsyncField = struct.i;
        if (isAsyncField) {
          asyncOutputVars.push(fieldOuputVar);
        }
        
      }
      
    }
    var unregisteredFieldsCode = b.c;
    b.c = prevCode + unregisteredFieldsCode + registeredFieldsCode + unknownKeysRefinementCode;
    if (asyncOutputVars.length === 0) {
      return syncOutput;
    }
    var outputVar = $$var(b);
    b.c = b.c + (outputVar + "=()=>Promise.all([" + asyncOutputVars.map(function (asyncOutputVar) {
              return asyncOutputVar + "()";
            }).join(",") + "]).then(([" + asyncOutputVars.toString() + "])=>(" + syncOutput + "));");
    return outputVar;
  };
}

function factory$3(definer) {
  var fields = {};
  var fieldNames = [];
  var itemDefinitionsSet = new Set();
  var field = function (fieldName, struct) {
    var inlinedInputLocation = JSON.stringify(fieldName);
    if (fields[fieldName]) {
      throw new Error("[rescript-struct] " + ("The field " + inlinedInputLocation + " is defined multiple times. If you want to duplicate the field, use S.transform instead."));
    }
    var itemDefinition_p = "[" + inlinedInputLocation + "]";
    var itemDefinition = {
      s: struct,
      l: inlinedInputLocation,
      p: itemDefinition_p
    };
    fields[fieldName] = struct;
    fieldNames.push(fieldName);
    itemDefinitionsSet.add(itemDefinition);
    return itemDefinition;
  };
  var tag = function (tag$1, asValue) {
    field(tag$1, literal(asValue));
  };
  var fieldOr = function (fieldName, struct, or) {
    return field(fieldName, getOr(factory$1(struct), or));
  };
  var ctx = {
    n: fieldNames,
    h: fields,
    d: itemDefinitionsSet,
    field: field,
    fieldOr: fieldOr,
    tag: tag,
    f: field,
    o: fieldOr,
    t: tag
  };
  var definition = definer(ctx);
  var itemDefinitionsSet$1 = itemDefinitionsSet;
  var fields$1 = fields;
  var fieldNames$1 = fieldNames;
  var itemDefinitions = Array.from(itemDefinitionsSet$1);
  return {
          t: {
            TAG: "Object",
            fields: fields$1,
            fieldNames: fieldNames$1,
            unknownKeys: "Strip"
          },
          n: (function () {
              return "Object({" + fieldNames$1.map(function (fieldName) {
                            var fieldStruct = fields$1[fieldName];
                            return JSON.stringify(fieldName) + ": " + fieldStruct.n(undefined);
                          }).join(", ") + "})";
            }),
          p: makeParseOperationBuilder(itemDefinitions, itemDefinitionsSet$1, definition, noopRefinement, (function (b, selfStruct, inputVar, path) {
                  var withUnknownKeysRefinement = selfStruct.t.unknownKeys === "Strict";
                  if (!withUnknownKeysRefinement) {
                    return ;
                  }
                  if (itemDefinitions.length !== 0) {
                    var keyVar = $$var(b);
                    b.c = b.c + ("for(" + keyVar + " in " + inputVar + "){if(");
                    for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
                      var itemDefinition = itemDefinitions[idx];
                      if (idx !== 0) {
                        b.c = b.c + "&&";
                      }
                      b.c = b.c + (keyVar + "!==" + itemDefinition.l);
                    }
                    b.c = b.c + ("){" + raiseWithArg(b, path, (function (exccessFieldName) {
                              return {
                                      TAG: "ExcessField",
                                      _0: exccessFieldName
                                    };
                            }), keyVar) + "}}");
                    return ;
                  }
                  var keyVar$1 = $$var(b);
                  b.c = b.c + ("for(" + keyVar$1 + " in " + inputVar + "){" + raiseWithArg(b, path, (function (exccessFieldName) {
                            return {
                                    TAG: "ExcessField",
                                    _0: exccessFieldName
                                  };
                          }), keyVar$1) + "}");
                })),
          s: (function (b, param, path) {
              var inputVar = toVar(b, b.i);
              var fieldsCodeRef = {
                contents: ""
              };
              var registeredDefinitions = new Set();
              var prevCode = b.c;
              b.c = "";
              var definitionToOutput = function (definition, outputPath) {
                var kind = toKindWithSet(definition, itemDefinitionsSet$1);
                switch (kind) {
                  case 0 :
                      var keys = Object.keys(definition);
                      for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
                        var key = keys[idx];
                        var definition$1 = definition[key];
                        definitionToOutput(definition$1, outputPath + ("[" + JSON.stringify(key) + "]"));
                      }
                      return ;
                  case 1 :
                      b.c = "if(" + inputVar + outputPath + "!==" + ("e[" + (b.e.push(definition) - 1) + "]") + "){" + raiseWithArg(b, path + outputPath, (function (input) {
                              return {
                                      TAG: "InvalidLiteral",
                                      expected: classify(definition),
                                      received: input
                                    };
                            }), inputVar + outputPath) + "}" + b.c;
                      return ;
                  case 2 :
                      if (registeredDefinitions.has(definition)) {
                        return invalidOperation(b, path, "The field " + definition.l + " is registered multiple times. If you want to duplicate the field, use S.transform instead");
                      } else {
                        registeredDefinitions.add(definition);
                        fieldsCodeRef.contents = fieldsCodeRef.contents + (definition.l + ":" + use(b, definition.s, inputVar + outputPath, path + outputPath) + ",");
                        return ;
                      }
                  
                }
              };
              definitionToOutput(definition, "");
              b.c = prevCode + b.c;
              for(var idx = 0 ,idx_finish = itemDefinitions.length; idx < idx_finish; ++idx){
                var itemDefinition = itemDefinitions[idx];
                if (!registeredDefinitions.has(itemDefinition)) {
                  var inlinedInputLocation = itemDefinition.l;
                  var literal = toLiteral(itemDefinition.s);
                  if (literal !== undefined) {
                    var value$1 = value(literal);
                    fieldsCodeRef.contents = fieldsCodeRef.contents + (inlinedInputLocation + ":" + ("e[" + (b.e.push(value$1) - 1) + "]") + ",");
                  } else {
                    invalidOperation(b, path, "Can't create serializer. The " + inlinedInputLocation + " field is not registered and not a literal. Use S.transform instead");
                  }
                }
                
              }
              return "{" + fieldsCodeRef.contents + "}";
            }),
          f: typeFilter,
          i: 0,
          m: empty
        };
}

function typeFilter$1(inputVar) {
  return "typeof " + inputVar + "!==\"string\"";
}

var struct$2 = makeWithNoopSerializer(primitiveName, "String", empty, noop, typeFilter$1);

function typeFilter$2(inputVar) {
  return "typeof " + inputVar + "!==\"boolean\"";
}

var struct$3 = makeWithNoopSerializer(primitiveName, "Bool", empty, noop, typeFilter$2);

function typeFilter$3(inputVar) {
  return "typeof " + inputVar + "!==\"number\"||" + inputVar + ">2147483647||" + inputVar + "<-2147483648||" + inputVar + "%1!==0";
}

var struct$4 = makeWithNoopSerializer(primitiveName, "Int", empty, noop, typeFilter$3);

function typeFilter$4(inputVar) {
  return "typeof " + inputVar + "!==\"number\"||Number.isNaN(" + inputVar + ")";
}

var struct$5 = makeWithNoopSerializer(primitiveName, "Float", empty, noop, typeFilter$4);

function typeFilter$5(inputVar) {
  return "!Array.isArray(" + inputVar + ")";
}

function factory$5(struct) {
  return {
          t: {
            TAG: "Array",
            _0: struct
          },
          n: containerName,
          p: (function (b, param, path) {
              var inputVar = toVar(b, b.i);
              var iteratorVar = varWithoutAllocation(b);
              var outputVar = $$var(b);
              b.c = b.c + (outputVar + "=[];for(let " + iteratorVar + "=0;" + iteratorVar + "<" + inputVar + ".length;++" + iteratorVar + "){" + scope(b, (function (b) {
                        var itemOutputVar = withPathPrepend(b, path, iteratorVar, (function (b, path) {
                                return useWithTypeFilter(b, struct, inputVar + "[" + iteratorVar + "]", path);
                              }));
                        return outputVar + ".push(" + itemOutputVar + ")";
                      })) + "}");
              var isAsync = struct.i;
              if (!isAsync) {
                return outputVar;
              }
              var asyncOutputVar = $$var(b);
              b.c = b.c + (asyncOutputVar + "=()=>Promise.all(" + outputVar + ".map(t=>t()));");
              return asyncOutputVar;
            }),
          s: (function (b, param, path) {
              if (struct.s === noop) {
                return b.i;
              }
              var inputVar = toVar(b, b.i);
              var iteratorVar = varWithoutAllocation(b);
              var outputVar = $$var(b);
              b.c = b.c + (outputVar + "=[];for(let " + iteratorVar + "=0;" + iteratorVar + "<" + inputVar + ".length;++" + iteratorVar + "){" + scope(b, (function (b) {
                        var itemOutputVar = withPathPrepend(b, path, iteratorVar, (function (b, path) {
                                return use(b, struct, inputVar + "[" + iteratorVar + "]", path);
                              }));
                        return outputVar + ".push(" + itemOutputVar + ")";
                      })) + "}");
              return outputVar;
            }),
          f: typeFilter$5,
          i: 0,
          m: empty
        };
}

function factory$6(struct) {
  return {
          t: {
            TAG: "Dict",
            _0: struct
          },
          n: containerName,
          p: (function (b, param, path) {
              var inputVar = toVar(b, b.i);
              var keyVar = varWithoutAllocation(b);
              var outputVar = $$var(b);
              b.c = b.c + (outputVar + "={};for(let " + keyVar + " in " + inputVar + "){" + scope(b, (function (b) {
                        var itemOutputVar = withPathPrepend(b, path, keyVar, (function (b, path) {
                                return useWithTypeFilter(b, struct, inputVar + "[" + keyVar + "]", path);
                              }));
                        return outputVar + "[" + keyVar + "]=" + itemOutputVar;
                      })) + "}");
              var isAsync = struct.i;
              if (!isAsync) {
                return outputVar;
              }
              var resolveVar = varWithoutAllocation(b);
              var rejectVar = varWithoutAllocation(b);
              var asyncParseResultVar = varWithoutAllocation(b);
              var counterVar = varWithoutAllocation(b);
              var asyncOutputVar = $$var(b);
              b.c = b.c + (asyncOutputVar + "=()=>new Promise((" + resolveVar + "," + rejectVar + ")=>{let " + counterVar + "=Object.keys(" + outputVar + ").length;for(let " + keyVar + " in " + outputVar + "){" + outputVar + "[" + keyVar + "]().then(" + asyncParseResultVar + "=>{" + outputVar + "[" + keyVar + "]=" + asyncParseResultVar + ";if(" + counterVar + "--===1){" + resolveVar + "(" + outputVar + ")}}," + rejectVar + ")}});");
              return asyncOutputVar;
            }),
          s: (function (b, param, path) {
              if (struct.s === noop) {
                return b.i;
              }
              var inputVar = toVar(b, b.i);
              var keyVar = varWithoutAllocation(b);
              var outputVar = $$var(b);
              b.c = b.c + (outputVar + "={};for(let " + keyVar + " in " + inputVar + "){" + scope(b, (function (b) {
                        var itemOutputVar = withPathPrepend(b, path, keyVar, (function (b, path) {
                                return use(b, struct, inputVar + "[" + keyVar + "]", path);
                              }));
                        return outputVar + "[" + keyVar + "]=" + itemOutputVar;
                      })) + "}");
              return outputVar;
            }),
          f: typeFilter,
          i: 0,
          m: empty
        };
}

function factory$8(structs) {
  if (structs.length < 2) {
    throw new Error("[rescript-struct] A Union struct factory require at least two structs.");
  }
  return {
          t: {
            TAG: "Union",
            _0: structs
          },
          n: (function () {
              return "Union(" + structs.map(function (s) {
                            return s.n(undefined);
                          }).join(", ") + ")";
            }),
          p: (function (b, selfStruct, path) {
              var inputVar = toVar(b, b.i);
              var structs = selfStruct.t._0;
              var isAsyncRef = false;
              var itemsCode = [];
              var itemsOutputVar = [];
              var prevCode = b.c;
              for(var idx = 0 ,idx_finish = structs.length; idx < idx_finish; ++idx){
                var struct = structs[idx];
                b.c = "";
                var itemOutputVar = useWithTypeFilter(b, struct, inputVar, "");
                var isAsyncItem = struct.i;
                if (isAsyncItem) {
                  isAsyncRef = true;
                }
                itemsOutputVar.push(itemOutputVar);
                itemsCode.push(b.c);
              }
              b.c = prevCode;
              var isAsync = isAsyncRef;
              var outputVar = $$var(b);
              var codeEndRef = "";
              var errorCodeRef = "";
              for(var idx$1 = 0 ,idx_finish$1 = structs.length; idx$1 < idx_finish$1; ++idx$1){
                var struct$1 = structs[idx$1];
                var code = itemsCode[idx$1];
                var itemOutputVar$1 = itemsOutputVar[idx$1];
                var isAsyncItem$1 = struct$1.i;
                var errorVar = varWithoutAllocation(b);
                var errorCode = isAsync ? (
                    isAsyncItem$1 ? errorVar + "===" + itemOutputVar$1 + "?" + errorVar + "():" : ""
                  ) + ("Promise.reject(" + errorVar + ")") : errorVar;
                errorCodeRef = idx$1 === 0 ? errorCode : errorCodeRef + "," + errorCode;
                b.c = b.c + ("try{" + code + (
                    isAsyncItem$1 ? "throw " + itemOutputVar$1 : (
                        isAsync ? outputVar + "=()=>Promise.resolve(" + itemOutputVar$1 + ")" : outputVar + "=" + itemOutputVar$1
                      )
                  ) + "}catch(" + errorVar + "){if(" + (errorVar + "&&" + errorVar + ".s===s") + (
                    isAsyncItem$1 ? "||" + errorVar + "===" + itemOutputVar$1 : ""
                  ) + "){");
                codeEndRef = "}else{throw " + errorVar + "}}" + codeEndRef;
              }
              if (isAsync) {
                b.c = b.c + (outputVar + "=()=>Promise.any([" + errorCodeRef + "]).catch(t=>{" + raiseWithArg(b, path, (function (internalErrors) {
                          return {
                                  TAG: "InvalidUnion",
                                  _0: internalErrors
                                };
                        }), "t.errors") + "})") + codeEndRef;
                return outputVar;
              } else {
                b.c = b.c + raiseWithArg(b, path, (function (internalErrors) {
                        return {
                                TAG: "InvalidUnion",
                                _0: internalErrors
                              };
                      }), "[" + errorCodeRef + "]") + codeEndRef;
                return outputVar;
              }
            }),
          s: (function (b, selfStruct, path) {
              var inputVar = toVar(b, b.i);
              var structs = selfStruct.t._0;
              var outputVar = $$var(b);
              var codeEndRef = "";
              var errorVarsRef = "";
              for(var idx = 0 ,idx_finish = structs.length; idx < idx_finish; ++idx){
                var itemStruct = structs[idx];
                var errorVar = varWithoutAllocation(b);
                errorVarsRef = errorVarsRef + errorVar + ",";
                b.c = b.c + ("try{" + scope(b, (function(itemStruct){
                      return function (b) {
                        var itemOutput = use(b, itemStruct, inputVar, "");
                        var typeFilter = itemStruct.f;
                        var itemOutput$1;
                        if (typeFilter !== undefined) {
                          var itemOutputVar = toVar(b, itemOutput);
                          b.c = b.c + typeFilterCode(b, typeFilter, itemStruct, itemOutputVar, "");
                          itemOutput$1 = itemOutputVar;
                        } else {
                          itemOutput$1 = itemOutput;
                        }
                        return outputVar + "=" + itemOutput$1;
                      }
                      }(itemStruct))) + "}catch(" + errorVar + "){if(" + (errorVar + "&&" + errorVar + ".s===s") + "){");
                codeEndRef = "}else{throw " + errorVar + "}}" + codeEndRef;
              }
              b.c = b.c + raiseWithArg(b, path, (function (internalErrors) {
                      return {
                              TAG: "InvalidUnion",
                              _0: internalErrors
                            };
                    }), "[" + errorVarsRef + "]") + codeEndRef;
              return outputVar;
            }),
          f: undefined,
          i: 0,
          m: empty
        };
}

function reason(error, nestedLevelOpt) {
  var nestedLevel = nestedLevelOpt !== undefined ? nestedLevelOpt : 0;
  var reason$1 = error.code;
  if (typeof reason$1 !== "object") {
    return "Encountered unexpected asynchronous transform or refine. Use S.parseAsyncWith instead of S.parseWith";
  }
  switch (reason$1.TAG) {
    case "OperationFailed" :
        return reason$1._0;
    case "InvalidOperation" :
        return reason$1.description;
    case "InvalidType" :
        return "Expected " + reason$1.expected.n(undefined) + ", received " + toText(classify(reason$1.received));
    case "InvalidLiteral" :
        return "Expected " + toText(reason$1.expected) + ", received " + toText(classify(reason$1.received));
    case "InvalidTupleSize" :
        return "Expected Tuple with " + reason$1.expected + " items, received " + reason$1.received;
    case "ExcessField" :
        return "Encountered disallowed excess key " + JSON.stringify(reason$1._0) + " on an object. Use Deprecated to ignore a specific field, or S.Object.strip to ignore excess keys completely";
    case "InvalidUnion" :
        var lineBreak = "\n" + " ".repeat((nestedLevel << 1));
        var array = reason$1._0.map(function (error) {
              var reason$2 = reason(error, nestedLevel + 1);
              var nonEmptyPath = error.path;
              var $$location = nonEmptyPath === "" ? "" : "Failed at " + nonEmptyPath + ". ";
              return "- " + $$location + reason$2;
            });
        var reasons = Array.from(new Set(array));
        return "Invalid union with following errors" + lineBreak + reasons.join(lineBreak);
    case "InvalidJsonStruct" :
        return "The struct " + reason$1._0.n(undefined) + " is not compatible with JSON";
    
  }
}

function message(error) {
  var match = error.operation;
  var operation;
  operation = match === "Parsing" ? "parsing" : "serializing";
  var nonEmptyPath = error.path;
  var pathText = nonEmptyPath === "" ? "root" : nonEmptyPath;
  return "Failed " + operation + " at " + pathText + ". Reason: " + reason(error);
}

var object$1 = factory$3;

var string$1 = struct$2;

var bool$1 = struct$3;

var $$int$1 = struct$4;

var $$float$1 = struct$5;

var $$null$1 = factory$2;

var option$1 = factory$1;

var array$1 = factory$5;

var dict$1 = factory$6;

var variant$1 = factory;

var union$1 = factory$8;
/* symbol Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE


var string = string$1;

var bool = bool$1;

var $$int = $$int$1;

var $$float = $$float$1;

var array = array$1;

var dict = dict$1;

var option = option$1;

var $$null = $$null$1;

var union = union$1;

var custom = custom$1;

var variant = variant$1;

var parseAnyWith = parseAnyWith$1;

var parseJsonStringWith = parseJsonStringWith$1;

var serializeToJsonStringWith = serializeToJsonStringWith$1;

var object = object$1;
/* S_Core-RescriptStruct Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE


function makeEmptyRequestStruct(type_) {
  return object(function (s) {
              s.t("type", type_);
              return {
                      requestID: s.f("requestID", string)
                    };
            });
}

function makeRequestStruct(type_, struct) {
  return object(function (s) {
              s.t("type", type_);
              return {
                      requestID: s.f("requestID", string),
                      data: s.f("data", struct)
                    };
            });
}

var loginRequestStruct = makeRequestStruct(2, object(function (s) {
          return {
                  account: s.f("account", string),
                  password: s.f("password", string)
                };
        }));

var setClientIDRequestStruct = makeRequestStruct(3, object(function (s) {
          return {
                  clientID: s.f("clientID", string)
                };
        }));

var forwardDataStruct = object(function (s) {
      return {
              clientID: s.f("clientID", string),
              message: s.f("message", string)
            };
    });

var requestForwardRequestStruct = makeRequestStruct(4, forwardDataStruct);

var tokenInfoStruct = object(function (s) {
      return {
              userID: s.f("userID", $$float),
              securityKey: s.f("securityKey", string),
              serviceToken: s.f("serviceToken", string),
              deviceID: s.f("deviceID", string),
              cookies: s.f("cookies", array(string))
            };
    });

var setTokenRequestStruct = makeRequestStruct(6, tokenInfoStruct);

var liverUIDStruct = object(function (s) {
      return {
              liverUID: s.f("liverUID", $$int)
            };
    });

var getDanmakuRequestStruct = makeRequestStruct(100, liverUIDStruct);

var stopDanmakuRequestStruct = makeRequestStruct(101, liverUIDStruct);

var liveIDStruct = object(function (s) {
      return {
              liveID: s.f("liveID", string)
            };
    });

var getWatchingListRequestStruct = makeRequestStruct(102, liveIDStruct);

var getBillboardRequestStruct = makeRequestStruct(103, liverUIDStruct);

var getSummaryRequestStruct = makeRequestStruct(104, liveIDStruct);

var getLuckListRequestStruct = makeRequestStruct(105, object(function (s) {
          return {
                  liveID: s.f("liveID", string),
                  redpackID: s.f("redpackID", string),
                  redpackBizUnit: s.f("redpackBizUnit", string)
                };
        }));

var getPlaybackRequestStruct = makeRequestStruct(106, liveIDStruct);

var userIDStruct = object(function (s) {
      return {
              userID: s.f("userID", $$int)
            };
    });

var getUserLiveInfoRequestStruct = makeRequestStruct(109, userIDStruct);

var getLiveDataRequestStruct = makeRequestStruct(112, object(function (s) {
          return {
                  days: s.f("days", $$int)
                };
        }));

var getGiftListRequestStruct = makeRequestStruct(114, liveIDStruct);

var getUserInfoRequestStruct = makeRequestStruct(115, userIDStruct);

var getLiveCutInfoRequestStruct = makeRequestStruct(116, object(function (s) {
          return {
                  liverUID: s.f("liverUID", $$int),
                  liveID: s.f("liveID", string)
                };
        }));

var managerUIDStruct = object(function (s) {
      return {
              managerUID: s.f("managerUID", $$int)
            };
    });

var addManagerRequestStruct = makeRequestStruct(201, managerUIDStruct);

var deleteManagerRequestStruct = makeRequestStruct(202, managerUIDStruct);

var getAllKickHistoryRequestStruct = makeRequestStruct(203, liveIDStruct);

var kickUserStruct = object(function (s) {
      return {
              liveID: s.f("liveID", string),
              kickedUID: s.f("kickedUID", $$int)
            };
    });

var managerKickRequestStruct = makeRequestStruct(204, kickUserStruct);

var authorKickRequestStruct = makeRequestStruct(205, kickUserStruct);

var getMedalDetailRequestStruct = makeRequestStruct(300, liverUIDStruct);

var getMedalRankListRequestStruct = makeRequestStruct(302, liverUIDStruct);

var getUserMedalRequestStruct = makeRequestStruct(303, userIDStruct);

var wearMedalRequestStruct = makeRequestStruct(304, liverUIDStruct);

var getTranscodeInfoRequestStruct = makeRequestStruct(904, object(function (s) {
          return {
                  streamName: s.f("streamName", string)
                };
        }));

var startLiveRequestStruct = makeRequestStruct(905, object(function (s) {
          return {
                  title: s.f("title", string),
                  coverFile: s.f("coverFile", string),
                  streamName: s.f("streamName", string),
                  portrait: s.f("portrait", bool),
                  panoramic: s.f("panoramic", bool),
                  categoryID: s.f("categoryID", $$int),
                  subCategoryID: s.f("subCategoryID", $$int)
                };
        }));

var stopLiveRequestStruct = makeRequestStruct(906, liveIDStruct);

var changeTitleAndCoverRequestStruct = makeRequestStruct(907, object(function (s) {
          return {
                  title: s.f("title", string),
                  coverFile: s.f("coverFile", string),
                  liveID: s.f("liveID", string)
                };
        }));

var canCutLiveStruct = object(function (s) {
      return {
              canCut: s.f("canCut", bool)
            };
    });

var setLiveCutStatusRequestStruct = makeRequestStruct(909, canCutLiveStruct);

function serializeRequest(request) {
  switch (request.TAG) {
    case 2 :
        return serializeToJsonStringWith(request._0, loginRequestStruct, undefined);
    case 3 :
        return serializeToJsonStringWith(request._0, setClientIDRequestStruct, undefined);
    case 4 :
        return serializeToJsonStringWith(request._0, requestForwardRequestStruct, undefined);
    case 6 :
        return serializeToJsonStringWith(request._0, setTokenRequestStruct, undefined);
    case 100 :
        return serializeToJsonStringWith(request._0, getDanmakuRequestStruct, undefined);
    case 101 :
        return serializeToJsonStringWith(request._0, stopDanmakuRequestStruct, undefined);
    case 102 :
        return serializeToJsonStringWith(request._0, getWatchingListRequestStruct, undefined);
    case 103 :
        return serializeToJsonStringWith(request._0, getBillboardRequestStruct, undefined);
    case 104 :
        return serializeToJsonStringWith(request._0, getSummaryRequestStruct, undefined);
    case 105 :
        return serializeToJsonStringWith(request._0, getLuckListRequestStruct, undefined);
    case 106 :
        return serializeToJsonStringWith(request._0, getPlaybackRequestStruct, undefined);
    case 107 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(107), undefined);
    case 108 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(108), undefined);
    case 109 :
        return serializeToJsonStringWith(request._0, getUserLiveInfoRequestStruct, undefined);
    case 110 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(110), undefined);
    case 112 :
        return serializeToJsonStringWith(request._0, getLiveDataRequestStruct, undefined);
    case 114 :
        return serializeToJsonStringWith(request._0, getGiftListRequestStruct, undefined);
    case 115 :
        return serializeToJsonStringWith(request._0, getUserInfoRequestStruct, undefined);
    case 116 :
        return serializeToJsonStringWith(request._0, getLiveCutInfoRequestStruct, undefined);
    case 200 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(200), undefined);
    case 201 :
        return serializeToJsonStringWith(request._0, addManagerRequestStruct, undefined);
    case 202 :
        return serializeToJsonStringWith(request._0, deleteManagerRequestStruct, undefined);
    case 203 :
        return serializeToJsonStringWith(request._0, getAllKickHistoryRequestStruct, undefined);
    case 204 :
        return serializeToJsonStringWith(request._0, managerKickRequestStruct, undefined);
    case 205 :
        return serializeToJsonStringWith(request._0, authorKickRequestStruct, undefined);
    case 300 :
        return serializeToJsonStringWith(request._0, getMedalDetailRequestStruct, undefined);
    case 301 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(301), undefined);
    case 302 :
        return serializeToJsonStringWith(request._0, getMedalRankListRequestStruct, undefined);
    case 303 :
        return serializeToJsonStringWith(request._0, getUserMedalRequestStruct, undefined);
    case 304 :
        return serializeToJsonStringWith(request._0, wearMedalRequestStruct, undefined);
    case 305 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(305), undefined);
    case 900 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(900), undefined);
    case 901 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(901), undefined);
    case 902 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(902), undefined);
    case 903 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(903), undefined);
    case 904 :
        return serializeToJsonStringWith(request._0, getTranscodeInfoRequestStruct, undefined);
    case 905 :
        return serializeToJsonStringWith(request._0, startLiveRequestStruct, undefined);
    case 906 :
        return serializeToJsonStringWith(request._0, stopLiveRequestStruct, undefined);
    case 907 :
        return serializeToJsonStringWith(request._0, changeTitleAndCoverRequestStruct, undefined);
    case 908 :
        return serializeToJsonStringWith(request._0, makeEmptyRequestStruct(908), undefined);
    case 909 :
        return serializeToJsonStringWith(request._0, setLiveCutStatusRequestStruct, undefined);
    
  }
}

var responseTypeStruct = variant($$int, (function (v) {
        return intToResponseType(v);
      }));

var responseResultStruct = variant($$int, (function (v) {
        return intToResponseResult(v);
      }));

var loginResponseStruct = object(function (s) {
      return s.f("tokenInfo", tokenInfoStruct);
    });

var streamURLStruct = object(function (s) {
      return {
              url: s.f("url", string),
              bitrate: s.f("bitrate", $$int),
              qualityType: s.f("qualityType", string),
              qualityName: s.f("qualityName", string)
            };
    });

var streamInfoStruct = object(function (s) {
      return {
              liveID: s.f("liveID", string),
              title: s.f("title", string),
              liveStartTime: s.f("liveStartTime", $$float),
              panoramic: s.f("panoramic", bool),
              streamList: s.f("streamList", array(streamURLStruct)),
              streamName: s.f("streamName", string)
            };
    });

var getDanmakuResponse = object(function (s) {
      return s.f("StreamInfo", streamInfoStruct);
    });

var medalInfoStruct = object(function (s) {
      return {
              uperID: s.f("uperID", $$int),
              userID: s.f("userID", $$int),
              clubName: s.f("clubName", string),
              level: s.f("level", $$int)
            };
    });

var userInfoStruct = object(function (s) {
      return {
              userID: s.f("userID", $$float),
              nickname: s.f("nickname", string),
              avatar: s.f("avatar", string),
              medal: s.f("medal", medalInfoStruct),
              managerType: s.f("managerType", variant($$int, (function (v) {
                          return intToManagerType(v);
                        })))
            };
    });

var watchingUserStruct = object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              anonymousUser: s.f("anonymousUser", bool),
              displaySendAmount: s.f("displaySendAmount", string),
              customData: s.f("customData", string)
            };
    });

var getWatchingListResponseStruct = array(watchingUserStruct);

var getBillboardResponseStruct = array(watchingUserStruct);

var getSummaryResponseStruct = object(function (s) {
      return {
              duration: s.f("duration", $$int),
              likeCount: s.f("likeCount", string),
              watchCount: s.f("watchCount", string),
              giftCount: s.f("giftCount", $$int),
              diamondCount: s.f("diamondCount", $$int),
              bananaCount: s.f("bananaCount", $$int)
            };
    });

var luckyUserStruct = object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              grabAmount: s.f("grabAmount", $$int)
            };
    });

var getLuckListResponseStruct = array(luckyUserStruct);

var getPlaybackResponseStruct = object(function (s) {
      return {
              duration: s.f("duration", $$int),
              url: s.f("url", string),
              backupURL: s.f("backupURL", string),
              m3u8Slice: s.f("m3u8Slice", string),
              width: s.f("width", $$int),
              height: s.f("height", $$int)
            };
    });

var giftDetailStruct = object(function (s) {
      return {
              giftID: s.f("giftID", $$int),
              giftName: s.f("giftName", string),
              arLiveName: s.f("arLiveName", string),
              payWalletType: s.f("payWalletType", variant($$int, (function (v) {
                          return intToGiftPayType(v);
                        }))),
              price: s.f("price", $$int),
              webpPic: s.f("webpPic", string),
              pngPic: s.f("pngPic", string),
              smallPngPic: s.f("smallPngPic", string),
              allowBatchSendSizeList: s.f("allowBatchSendSizeList", $$null(array($$int))),
              canCombo: s.f("canCombo", bool),
              canDraw: s.f("canDraw", bool),
              magicFaceID: s.f("magicFaceID", $$int),
              vupArID: s.f("vupArID", $$int),
              description: s.f("description", string),
              redpackPrice: s.f("redpackPrice", $$int),
              cornerMarkerText: s.f("cornerMarkerText", string)
            };
    });

var getAllGiftListResponseStruct = array(giftDetailStruct);

var getWalletBalanceResponseStruct = object(function (s) {
      return {
              acCoin: s.f("acCoin", $$int),
              banana: s.f("banana", $$int)
            };
    });

var userProfileStruct = object(function (s) {
      return {
              userID: s.f("userID", $$int),
              nickname: s.f("nickname", string),
              avatar: s.f("avatar", string),
              avatarFrame: s.f("avatarFrame", string),
              followingCount: s.f("followingCount", $$int),
              fansCount: s.f("fansCount", $$int),
              contributeCount: s.f("contributeCount", $$int),
              signature: s.f("signature", string),
              verifiedText: s.f("verifiedText", string),
              isJoinUpCollege: s.f("isJoinUpCollege", bool),
              isFollowing: s.f("isFollowing", bool),
              isFollowed: s.f("isFollowed", bool)
            };
    });

var liveTypeStruct = object(function (s) {
      return {
              categoryID: s.f("categoryID", $$int),
              categoryName: s.f("categoryName", string),
              subCategoryID: s.f("subCategoryID", $$int),
              subCategoryName: s.f("subCategoryName", string)
            };
    });

var userLiveInfoStruct = object(function (s) {
      return {
              profile: s.f("profile", userProfileStruct),
              liveType: s.f("liveType", liveTypeStruct),
              liveID: s.f("liveID", string),
              streamName: s.f("streamName", string),
              title: s.f("title", string),
              liveStartTime: s.f("liveStartTime", $$float),
              portrait: s.f("portrait", bool),
              panoramic: s.f("panoramic", bool),
              liveCover: s.f("liveCover", string),
              onlineCount: s.f("onlineCount", $$int),
              likeCount: s.f("likeCount", $$int),
              hasFansClub: s.f("hasFansClub", bool),
              disableDanmakuShow: s.f("disableDanmakuShow", bool),
              paidShowUserBuyStatus: s.f("paidShowUserBuyStatus", bool)
            };
    });

var getAllLiveListResponseStruct = array(userLiveInfoStruct);

var liveStatStruct = object(function (s) {
      return {
              duration: s.f("duration", $$int),
              maxPopularityValue: s.f("maxPopularityValue", $$int),
              watchCount: s.f("watchCount", $$int),
              diamondCount: s.f("diamondCount", $$int),
              commentCount: s.f("commentCount", $$int),
              bananaCount: s.f("bananaCount", $$int)
            };
    });

var liveDetailStruct = object(function (s) {
      return {
              liveStartTime: s.f("liveStartTime", $$float),
              liveEndTime: s.f("liveEndTime", $$float),
              liveStat: s.f("liveStat", liveStatStruct)
            };
    });

var dailyDataStruct = object(function (s) {
      return {
              date: s.f("date", string),
              liveTimes: s.f("liveTimes", $$int),
              liveStat: s.f("liveStat", liveStatStruct)
            };
    });

var getLiveDataResponseStruct = object(function (s) {
      return {
              beginDate: s.f("beginDate", string),
              endDate: s.f("endDate", string),
              overview: s.f("overview", liveStatStruct),
              liveDetail: s.f("liveDetail", dict(liveDetailStruct)),
              dailyData: s.f("dailyData", $$null(array(dailyDataStruct)))
            };
    });

var getGiftListResponseStruct = array(giftDetailStruct);

var getUserInfoResponseStruct = object(function (s) {
      return {
              userID: s.f("userID", $$int),
              nickname: s.f("nickname", string),
              avatar: s.f("avatar", string),
              avatarFrame: s.f("avatarFrame", string),
              followingCount: s.f("followingCount", string),
              fansCount: s.f("fansCount", string),
              contributeCount: s.f("contributeCount", string),
              signature: s.f("signature", string),
              verifiedText: s.f("verifiedText", string),
              isJoinUpCollege: s.f("isJoinUpCollege", bool),
              isFollowing: s.f("isFollowing", bool),
              isFollowed: s.f("isFollowed", bool),
              liveID: s.f("liveID", string),
              likeCount: s.f("likeCount", $$int)
            };
    });

var getLiveCutInfoResponseStruct = object(function (s) {
      return {
              status: s.f("status", bool),
              url: s.f("url", string),
              redirectURL: s.f("redirectURL", string)
            };
    });

var managerStruct = object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              customData: s.f("customData", string),
              online: s.f("online", bool)
            };
    });

var getManagerListResponseStruct = array(managerStruct);

var kickHistoryStruct = object(function (s) {
      return {
              userID: s.f("userID", $$int),
              nickname: s.f("nickname", string),
              kickTime: s.f("kickTime", $$float)
            };
    });

var getAllKickHistoryResponseStruct = array(kickHistoryStruct);

var medalStruct = object(function (s) {
      return {
              medalInfo: s.f("medalInfo", medalInfoStruct),
              uperName: s.f("uperName", string),
              uperAvatar: s.f("uperAvatar", string),
              wearMedal: s.f("wearMedal", bool),
              friendshipDegree: s.f("friendshipDegree", $$int),
              joinClubTime: s.f("joinClubTime", $$float),
              currentDegreeLimit: s.f("currentDegreeLimit", $$int),
              medalCount: s.f("medalCount", $$int)
            };
    });

var medalDegreeStruct = object(function (s) {
      return {
              uperID: s.f("uperID", $$int),
              giftDegree: s.f("giftDegree", $$int),
              giftDegreeLimit: s.f("giftDegreeLimit", $$int),
              peachDegree: s.f("peachDegree", $$int),
              peachDegreeLimit: s.f("peachDegreeLimit", $$int),
              liveWatchDegree: s.f("liveWatchDegree", $$int),
              liveWatchDegreeLimit: s.f("liveWatchDegreeLimit", $$int),
              bananaDegree: s.f("bananaDegree", $$int),
              bananaDegreeLimit: s.f("bananaDegreeLimit", $$int)
            };
    });

var getMedalDetailResponseStruct = object(function (s) {
      return {
              medal: s.f("medal", medalStruct),
              medalDegree: s.f("medalDegree", medalDegreeStruct),
              userRank: s.f("userRank", string)
            };
    });

var getMedalListResponseStruct = $$null(array(medalStruct));

var userMedalInfoStruct = object(function (s) {
      return {
              profile: s.f("profile", userProfileStruct),
              friendshipDegree: s.f("friendshipDegree", $$int),
              level: s.f("level", $$int)
            };
    });

var getMedalRankListResponseStruct = object(function (s) {
      return {
              hasFansClub: s.f("hasFansClub", bool),
              rankList: s.f("rankList", $$null(array(userMedalInfoStruct))),
              clubName: s.f("clubName", string),
              medalCount: s.f("medalCount", $$int),
              hasMedal: s.f("hasMedal", bool),
              userFriendshipDegree: s.f("userFriendshipDegree", $$int),
              userRank: s.f("userRank", string)
            };
    });

var checkLiveAuthResponseStruct = object(function (s) {
      return {
              liveAuth: s.f("liveAuth", bool)
            };
    });

var getPushConfigResponseStruct = object(function (s) {
      return {
              streamName: s.f("streamName", string),
              streamPullAddress: s.f("streamPullAddress", string),
              streamPushAddress: s.f("streamPushAddress", $$null(array(string))),
              panoramic: s.f("panoramic", bool),
              interval: s.f("interval", $$int),
              rtmpServer: s.f("rtmpServer", string),
              streamKey: s.f("streamKey", string)
            };
    });

var getLiveStatusResponseStruct = object(function (s) {
      return {
              liveID: s.f("liveID", string),
              streamName: s.f("streamName", string),
              title: s.f("title", string),
              liveCover: s.f("liveCover", string),
              liveStartTime: s.f("liveStartTime", $$float),
              panoramic: s.f("panoramic", bool),
              bizUnit: s.f("bizUnit", string),
              bizCustomData: s.f("bizCustomData", string)
            };
    });

var transcodeInfoStruct = object(function (s) {
      return {
              streamURL: s.f("streamURL", streamURLStruct),
              resolution: s.f("resolution", string),
              frameRate: s.f("frameRate", $$int),
              template: s.f("template", string)
            };
    });

var getTranscodeInfoResponseStruct = array(transcodeInfoStruct);

var stopLiveResponseStruct = object(function (s) {
      return {
              duration: s.f("duration", $$int),
              endReason: s.f("endReason", string)
            };
    });

var danmuInfoStruct = object(function (s) {
      return {
              sendTime: s.f("sendTime", $$float),
              userInfo: s.f("userInfo", userInfoStruct)
            };
    });

var commentStruct = object(function (s) {
      return {
              danmuInfo: s.f("danmuInfo", danmuInfoStruct),
              content: s.f("content", string)
            };
    });

var throwBananaStruct = object(function (s) {
      return {
              danmuInfo: s.f("danmuInfo", danmuInfoStruct),
              bananaCount: s.f("bananaCount", $$int)
            };
    });

var drawPointStruct = object(function (s) {
      return {
              marginLeft: s.f("marginLeft", $$int),
              marginTop: s.f("marginTop", $$int),
              scaleRatio: s.f("scaleRatio", $$int),
              handup: s.f("handup", bool),
              pointWidth: s.f("pointWidth", $$int),
              pointHeight: s.f("pointHeight", $$int)
            };
    });

var drawGiftInfoStruct = object(function (s) {
      return {
              screenWidth: s.f("screenWidth", $$int),
              screenHeight: s.f("screenHeight", $$int),
              drawPoint: s.f("drawPoint", $$null(array(drawPointStruct)))
            };
    });

var giftStruct = object(function (s) {
      return {
              danmuInfo: s.f("danmuInfo", danmuInfoStruct),
              giftDetail: s.f("giftDetail", giftDetailStruct),
              count: s.f("count", $$int),
              combo: s.f("combo", $$int),
              value: s.f("value", $$int),
              comboID: s.f("comboID", string),
              slotDisplayDuration: s.f("slotDisplayDuration", $$int),
              expireDuration: s.f("expireDuration", $$int),
              drawGiftInfo: s.f("drawGiftInfo", drawGiftInfoStruct)
            };
    });

var richTextUserInfoStruct = object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              color: s.f("color", string)
            };
    });

var richTextPlainStruct = object(function (s) {
      return {
              text: s.f("text", string),
              color: s.f("color", string)
            };
    });

var richTextImageStruct = object(function (s) {
      return {
              pictures: s.f("pictures", array(string)),
              alternativeText: s.f("alternativeText", string),
              alternativeColor: s.f("alternativeColor", string)
            };
    });

var richTextSegmentStruct = union([
      object(function (s) {
            s.t("type", 1900);
            return {
                    type: "UserInfo",
                    segment: s.f("segment", richTextUserInfoStruct)
                  };
          }),
      object(function (s) {
            s.t("type", 1901);
            return {
                    type: "Plain",
                    segment: s.f("segment", richTextPlainStruct)
                  };
          }),
      object(function (s) {
            s.t("type", 1902);
            return {
                    type: "Image",
                    segment: s.f("segment", richTextImageStruct)
                  };
          })
    ]);

var richTextStruct = object(function (s) {
      return {
              sendTime: s.f("sendTime", $$float),
              segments: s.f("segments", array(richTextSegmentStruct))
            };
    });

var joinClubStruct = object(function (s) {
      return {
              joinTime: s.f("joinTime", $$float),
              fansInfo: s.f("fansInfo", userInfoStruct),
              uperInfo: s.f("uperInfo", userInfoStruct)
            };
    });

var shareLiveStruct = object(function (s) {
      return {
              danmuInfo: s.f("danmuInfo", danmuInfoStruct),
              sharePlatform: s.f("sharePlatform", variant($$int, (function (v) {
                          return intToSharePlatformType(v);
                        }))),
              sharePlatformIcon: s.f("sharePlatformIcon", string)
            };
    });

var bananaCountStruct = object(function (s) {
      return {
              bananaCount: s.f("bananaCount", string)
            };
    });

var displayInfoStruct = object(function (s) {
      return {
              watchingCount: s.f("watchingCount", string),
              likeCount: s.f("likeCount", string),
              likeDelta: s.f("likeDelta", $$int)
            };
    });

var watchingUserStruct$1 = object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              anonymousUser: s.f("anonymousUser", bool),
              displaySendAmount: s.f("displaySendAmount", string),
              customData: s.f("customData", string)
            };
    });

var topUsersStruct = array(watchingUserStruct$1);

var recentCommentsStruct = array(commentStruct);

var redpackStruct = object(function (s) {
      return {
              userInfo: s.f("userInfo", userInfoStruct),
              displayStatus: s.f("displayStatus", variant($$int, (function (v) {
                          return intToRedpackDisplayStatus(v);
                        }))),
              grabBeginTime: s.f("grabBeginTime", $$float),
              getTokenLatestTime: s.f("getTokenLatestTime", $$float),
              redpackID: s.f("redpackID", string),
              redpackBizUnit: s.f("redpackBizUnit", string),
              redpackAmount: s.f("redpackAmount", $$int),
              settleBeginTime: s.f("settleBeginTime", $$float)
            };
    });

var redpackListStruct = array(redpackStruct);

var chatCallStruct = object(function (s) {
      return {
              chatID: s.f("chatID", string),
              liveID: s.f("liveID", string),
              callTime: s.f("callTime", $$float)
            };
    });

var chatAcceptStruct = object(function (s) {
      return {
              chatID: s.f("chatID", string),
              mediaType: s.f("mediaType", variant($$int, (function (v) {
                          return intToChatMediaType(v);
                        }))),
              signalInfo: s.f("signalInfo", string)
            };
    });

var chatReadyStruct = object(function (s) {
      return {
              chatID: s.f("chatID", string),
              guest: s.f("guest", userInfoStruct),
              mediaType: s.f("mediaType", variant($$int, (function (v) {
                          return intToChatMediaType(v);
                        })))
            };
    });

var chatEndStruct = object(function (s) {
      return {
              chatID: s.f("chatID", string),
              endType: s.f("endType", variant($$int, (function (v) {
                          return intToChatEndType(v);
                        })))
            };
    });

var danmakuStopErrorStruct = object(function (s) {
      return {
              error: s.f("error", string)
            };
    });

var kickedOutStruct = object(function (s) {
      return {
              kickedOutReason: s.f("kickedOutReason", string)
            };
    });

var violationAlertStruct = object(function (s) {
      return {
              violationContent: s.f("violationContent", string)
            };
    });

var managerStateStruct = object(function (s) {
      return {
              managerState: s.f("managerState", variant($$int, (function (v) {
                          return intToManagerStateType(v);
                        })))
            };
    });

var responseModelStruct = object(function (s) {
      return {
              type_: s.f("type", responseTypeStruct),
              liverUID: s.o("liverUID", $$int, 0),
              requestID: s.o("requestID", string, ""),
              result: s.o("result", responseResultStruct, {
                    TAG: "UnknownResult",
                    _0: 0
                  }),
              error: s.o("error", string, "")
            };
    });

function makeEmptyResponseData(s, param, constructor) {
  var result = param.result;
  var requestID = param.requestID;
  if (typeof result !== "object") {
    if (result === "Success") {
      return constructor({
                  TAG: "Ok",
                  _0: {
                    requestID: requestID
                  }
                });
    } else {
      return constructor({
                  TAG: "Error",
                  _0: {
                    requestID: requestID,
                    result: result,
                    error: param.error
                  }
                });
    }
  } else {
    return s.fail("unknown result type: " + result._0.toString(), undefined);
  }
}

function makeResponseData(s, data, param, struct, constructor) {
  var result = param.result;
  var requestID = param.requestID;
  if (typeof result === "object") {
    return s.fail("unknown result type: " + result._0.toString(), undefined);
  }
  if (result !== "Success") {
    return constructor({
                TAG: "Error",
                _0: {
                  requestID: requestID,
                  result: result,
                  error: param.error
                }
              });
  }
  var d = parseAnyWith(data, object(function (s) {
            return s.f("data", struct);
          }));
  if (d.TAG !== "Ok") {
    return s.failWithError(d._0);
  }
  var message_data = d._0;
  var message = {
    requestID: requestID,
    data: message_data
  };
  return constructor({
              TAG: "Ok",
              _0: message
            });
}

function makeDanmakuData(s, data, param, struct, constructor) {
  var liverUID = param.liverUID;
  if (liverUID <= 0) {
    return s.fail("missing liverUID or illegal liverUID", undefined);
  }
  var d = parseAnyWith(data, object(function (s) {
            return s.f("data", struct);
          }));
  if (d.TAG === "Ok") {
    return constructor({
                liverUID: liverUID,
                data: d._0
              });
  } else {
    return s.failWithError(d._0);
  }
}

var responseDataStruct = custom("responseData", (function (s) {
        return {
                p: (function (data) {
                    var model = parseAnyWith(data, responseModelStruct);
                    if (model.TAG !== "Ok") {
                      return s.failWithError(model._0);
                    }
                    var model$1 = model._0;
                    var v = model$1.type_;
                    if (typeof v === "object") {
                      return s.fail("unsupported message type: " + v._0.toString(), undefined);
                    }
                    switch (v) {
                      case 2 :
                          return makeResponseData(s, data, model$1, loginResponseStruct, (function (v) {
                                        return {
                                                TAG: 2,
                                                _0: v
                                              };
                                      }));
                      case 3 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 3,
                                                _0: v
                                              };
                                      }));
                      case 4 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 4,
                                                _0: v
                                              };
                                      }));
                      case 6 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 6,
                                                _0: v
                                              };
                                      }));
                      case 100 :
                          var constructor = function (v) {
                            return {
                                    TAG: 100,
                                    _0: v
                                  };
                          };
                          var result = model$1.result;
                          var requestID = model$1.requestID;
                          if (typeof result === "object") {
                            return s.fail("unknown result type: " + result._0.toString(), undefined);
                          }
                          if (result !== "Success") {
                            return constructor({
                                        TAG: "Error",
                                        _0: {
                                          requestID: requestID,
                                          result: result,
                                          error: model$1.error
                                        }
                                      });
                          }
                          var e = parseAnyWith(data, object(function (s) {
                                    return s.f("data", option(getDanmakuResponse));
                                  }));
                          if (e.TAG !== "Ok") {
                            return s.failWithError(e._0);
                          }
                          var d = e._0;
                          if (d !== undefined) {
                            return constructor({
                                        TAG: "Ok",
                                        _0: {
                                          requestID: requestID,
                                          data: some(valFromOption(d))
                                        }
                                      });
                          } else {
                            return constructor({
                                        TAG: "Ok",
                                        _0: {
                                          requestID: requestID
                                        }
                                      });
                          }
                      case 101 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 101,
                                                _0: v
                                              };
                                      }));
                      case 102 :
                          return makeResponseData(s, data, model$1, getWatchingListResponseStruct, (function (v) {
                                        return {
                                                TAG: 102,
                                                _0: v
                                              };
                                      }));
                      case 103 :
                          return makeResponseData(s, data, model$1, getBillboardResponseStruct, (function (v) {
                                        return {
                                                TAG: 103,
                                                _0: v
                                              };
                                      }));
                      case 104 :
                          return makeResponseData(s, data, model$1, getSummaryResponseStruct, (function (v) {
                                        return {
                                                TAG: 104,
                                                _0: v
                                              };
                                      }));
                      case 105 :
                          return makeResponseData(s, data, model$1, getLuckListResponseStruct, (function (v) {
                                        return {
                                                TAG: 105,
                                                _0: v
                                              };
                                      }));
                      case 106 :
                          return makeResponseData(s, data, model$1, getPlaybackResponseStruct, (function (v) {
                                        return {
                                                TAG: 106,
                                                _0: v
                                              };
                                      }));
                      case 107 :
                          return makeResponseData(s, data, model$1, getAllGiftListResponseStruct, (function (v) {
                                        return {
                                                TAG: 107,
                                                _0: v
                                              };
                                      }));
                      case 108 :
                          return makeResponseData(s, data, model$1, getWalletBalanceResponseStruct, (function (v) {
                                        return {
                                                TAG: 108,
                                                _0: v
                                              };
                                      }));
                      case 109 :
                          return makeResponseData(s, data, model$1, userLiveInfoStruct, (function (v) {
                                        return {
                                                TAG: 109,
                                                _0: v
                                              };
                                      }));
                      case 110 :
                          return makeResponseData(s, data, model$1, getAllLiveListResponseStruct, (function (v) {
                                        return {
                                                TAG: 110,
                                                _0: v
                                              };
                                      }));
                      case 112 :
                          return makeResponseData(s, data, model$1, getLiveDataResponseStruct, (function (v) {
                                        return {
                                                TAG: 112,
                                                _0: v
                                              };
                                      }));
                      case 114 :
                          return makeResponseData(s, data, model$1, getGiftListResponseStruct, (function (v) {
                                        return {
                                                TAG: 114,
                                                _0: v
                                              };
                                      }));
                      case 115 :
                          return makeResponseData(s, data, model$1, getUserInfoResponseStruct, (function (v) {
                                        return {
                                                TAG: 115,
                                                _0: v
                                              };
                                      }));
                      case 116 :
                          return makeResponseData(s, data, model$1, getLiveCutInfoResponseStruct, (function (v) {
                                        return {
                                                TAG: 116,
                                                _0: v
                                              };
                                      }));
                      case 200 :
                          return makeResponseData(s, data, model$1, getManagerListResponseStruct, (function (v) {
                                        return {
                                                TAG: 200,
                                                _0: v
                                              };
                                      }));
                      case 201 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 201,
                                                _0: v
                                              };
                                      }));
                      case 202 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 202,
                                                _0: v
                                              };
                                      }));
                      case 203 :
                          return makeResponseData(s, data, model$1, getAllKickHistoryResponseStruct, (function (v) {
                                        return {
                                                TAG: 203,
                                                _0: v
                                              };
                                      }));
                      case 204 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 204,
                                                _0: v
                                              };
                                      }));
                      case 205 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 205,
                                                _0: v
                                              };
                                      }));
                      case 300 :
                          return makeResponseData(s, data, model$1, getMedalDetailResponseStruct, (function (v) {
                                        return {
                                                TAG: 300,
                                                _0: v
                                              };
                                      }));
                      case 301 :
                          return makeResponseData(s, data, model$1, getMedalListResponseStruct, (function (v) {
                                        return {
                                                TAG: 301,
                                                _0: v
                                              };
                                      }));
                      case 302 :
                          return makeResponseData(s, data, model$1, getMedalRankListResponseStruct, (function (v) {
                                        return {
                                                TAG: 302,
                                                _0: v
                                              };
                                      }));
                      case 303 :
                          return makeResponseData(s, data, model$1, medalStruct, (function (v) {
                                        return {
                                                TAG: 303,
                                                _0: v
                                              };
                                      }));
                      case 304 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 304,
                                                _0: v
                                              };
                                      }));
                      case 305 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 305,
                                                _0: v
                                              };
                                      }));
                      case 900 :
                          return makeResponseData(s, data, model$1, checkLiveAuthResponseStruct, (function (v) {
                                        return {
                                                TAG: 900,
                                                _0: v
                                              };
                                      }));
                      case 901 :
                          return makeResponseData(s, data, model$1, liveTypeStruct, (function (v) {
                                        return {
                                                TAG: 901,
                                                _0: v
                                              };
                                      }));
                      case 902 :
                          return makeResponseData(s, data, model$1, getPushConfigResponseStruct, (function (v) {
                                        return {
                                                TAG: 902,
                                                _0: v
                                              };
                                      }));
                      case 903 :
                          return makeResponseData(s, data, model$1, getLiveStatusResponseStruct, (function (v) {
                                        return {
                                                TAG: 903,
                                                _0: v
                                              };
                                      }));
                      case 904 :
                          return makeResponseData(s, data, model$1, getTranscodeInfoResponseStruct, (function (v) {
                                        return {
                                                TAG: 904,
                                                _0: v
                                              };
                                      }));
                      case 905 :
                          return makeResponseData(s, data, model$1, liveIDStruct, (function (v) {
                                        return {
                                                TAG: 905,
                                                _0: v
                                              };
                                      }));
                      case 906 :
                          return makeResponseData(s, data, model$1, stopLiveResponseStruct, (function (v) {
                                        return {
                                                TAG: 906,
                                                _0: v
                                              };
                                      }));
                      case 907 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 907,
                                                _0: v
                                              };
                                      }));
                      case 908 :
                          return makeResponseData(s, data, model$1, canCutLiveStruct, (function (v) {
                                        return {
                                                TAG: 908,
                                                _0: v
                                              };
                                      }));
                      case 909 :
                          return makeEmptyResponseData(s, model$1, (function (v) {
                                        return {
                                                TAG: 909,
                                                _0: v
                                              };
                                      }));
                      case 1 :
                          return 1;
                      case 5 :
                          return makeResponseData(s, data, model$1, forwardDataStruct, (function (v) {
                                        return {
                                                TAG: 5,
                                                _0: v
                                              };
                                      }));
                      case 1000 :
                          return makeDanmakuData(s, data, model$1, commentStruct, (function (v) {
                                        return {
                                                TAG: 1000,
                                                _0: v
                                              };
                                      }));
                      case 1001 :
                          return makeDanmakuData(s, data, model$1, danmuInfoStruct, (function (v) {
                                        return {
                                                TAG: 1001,
                                                _0: v
                                              };
                                      }));
                      case 1002 :
                          return makeDanmakuData(s, data, model$1, danmuInfoStruct, (function (v) {
                                        return {
                                                TAG: 1002,
                                                _0: v
                                              };
                                      }));
                      case 1003 :
                          return makeDanmakuData(s, data, model$1, danmuInfoStruct, (function (v) {
                                        return {
                                                TAG: 1003,
                                                _0: v
                                              };
                                      }));
                      case 1004 :
                          return makeDanmakuData(s, data, model$1, throwBananaStruct, (function (v) {
                                        return {
                                                TAG: 1004,
                                                _0: v
                                              };
                                      }));
                      case 1005 :
                          return makeDanmakuData(s, data, model$1, giftStruct, (function (v) {
                                        return {
                                                TAG: 1005,
                                                _0: v
                                              };
                                      }));
                      case 1006 :
                          return makeDanmakuData(s, data, model$1, richTextStruct, (function (v) {
                                        return {
                                                TAG: 1006,
                                                _0: v
                                              };
                                      }));
                      case 1007 :
                          return makeDanmakuData(s, data, model$1, joinClubStruct, (function (v) {
                                        return {
                                                TAG: 1007,
                                                _0: v
                                              };
                                      }));
                      case 1008 :
                          return makeDanmakuData(s, data, model$1, shareLiveStruct, (function (v) {
                                        return {
                                                TAG: 1008,
                                                _0: v
                                              };
                                      }));
                      case 2000 :
                          var constructor$1 = function (v) {
                            return {
                                    TAG: 2000,
                                    _0: v
                                  };
                          };
                          var liverUID = model$1.liverUID;
                          if (liverUID <= 0) {
                            return s.fail("missing liverUID or illegal liverUID", undefined);
                          }
                          var danmaku = {
                            liverUID: liverUID
                          };
                          return constructor$1(danmaku);
                      case 2001 :
                          return makeDanmakuData(s, data, model$1, bananaCountStruct, (function (v) {
                                        return {
                                                TAG: 2001,
                                                _0: v
                                              };
                                      }));
                      case 2002 :
                          return makeDanmakuData(s, data, model$1, displayInfoStruct, (function (v) {
                                        return {
                                                TAG: 2002,
                                                _0: v
                                              };
                                      }));
                      case 2003 :
                          return makeDanmakuData(s, data, model$1, topUsersStruct, (function (v) {
                                        return {
                                                TAG: 2003,
                                                _0: v
                                              };
                                      }));
                      case 2004 :
                          return makeDanmakuData(s, data, model$1, recentCommentsStruct, (function (v) {
                                        return {
                                                TAG: 2004,
                                                _0: v
                                              };
                                      }));
                      case 2005 :
                          return makeDanmakuData(s, data, model$1, redpackListStruct, (function (v) {
                                        return {
                                                TAG: 2005,
                                                _0: v
                                              };
                                      }));
                      case 2100 :
                          return makeDanmakuData(s, data, model$1, chatCallStruct, (function (v) {
                                        return {
                                                TAG: 2100,
                                                _0: v
                                              };
                                      }));
                      case 2101 :
                          return makeDanmakuData(s, data, model$1, chatAcceptStruct, (function (v) {
                                        return {
                                                TAG: 2101,
                                                _0: v
                                              };
                                      }));
                      case 2102 :
                          return makeDanmakuData(s, data, model$1, chatReadyStruct, (function (v) {
                                        return {
                                                TAG: 2102,
                                                _0: v
                                              };
                                      }));
                      case 2103 :
                          return makeDanmakuData(s, data, model$1, chatEndStruct, (function (v) {
                                        return {
                                                TAG: 2103,
                                                _0: v
                                              };
                                      }));
                      case 2999 :
                          return makeDanmakuData(s, data, model$1, danmakuStopErrorStruct, (function (v) {
                                        return {
                                                TAG: 2999,
                                                _0: v
                                              };
                                      }));
                      case 3000 :
                          return makeDanmakuData(s, data, model$1, kickedOutStruct, (function (v) {
                                        return {
                                                TAG: 3000,
                                                _0: v
                                              };
                                      }));
                      case 3001 :
                          return makeDanmakuData(s, data, model$1, violationAlertStruct, (function (v) {
                                        return {
                                                TAG: 3001,
                                                _0: v
                                              };
                                      }));
                      case 3002 :
                          return makeDanmakuData(s, data, model$1, managerStateStruct, (function (v) {
                                        return {
                                                TAG: 3002,
                                                _0: v
                                              };
                                      }));
                      
                    }
                  })
              };
      }));

function parseResponse(response) {
  return parseJsonStringWith(response, responseDataStruct);
}
/* loginRequestStruct Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE


function addSubcriber(d, subcriber) {
  var id = d.nextId.contents;
  d.nextId.contents = id + 1 | 0;
  d.dict[id.toString()] = subcriber;
  return function () {
    $$delete$1(d.dict, id.toString());
  };
}

function callSubcribers(d, value, key) {
  Object.values(d.dict).forEach(function (s) {
        s(value, key);
      });
}

var isEmpty = (function (obj) {
    for (var i in obj) {
      return false;
    }

    return true;
  });

function addSubcriberInDict(dict, subcriber, key) {
  var d = dict[key];
  var d$1;
  if (d !== undefined) {
    d$1 = d;
  } else {
    var d_nextId = {
      contents: 0
    };
    var d_dict = {};
    var d$2 = {
      nextId: d_nextId,
      dict: d_dict
    };
    dict[key] = d$2;
    d$1 = d$2;
  }
  var unsubscribe = addSubcriber(d$1, subcriber);
  return function () {
    unsubscribe(undefined);
    if (isEmpty(d$1.dict)) {
      return $$delete$1(dict, key);
    }
    
  };
}

function make$2() {
  var notifyAll_nextId = {
    contents: 0
  };
  var notifyAll_dict = {};
  var notifyAll = {
    nextId: notifyAll_nextId,
    dict: notifyAll_dict
  };
  var notifyKey = {};
  var oneshotKey = {};
  var set = function (v, key) {
    some(v);
    callSubcribers(notifyAll, v, key);
    var d = notifyKey[key];
    if (d !== undefined) {
      callSubcribers(d, v, key);
    }
    var d$1 = oneshotKey[key];
    if (d$1 !== undefined) {
      callSubcribers(d$1, v, key);
      return $$delete$1(oneshotKey, key);
    }
    
  };
  var subcribe = function (subcriber, key) {
    if (key !== undefined) {
      return addSubcriberInDict(notifyKey, subcriber, key);
    } else {
      return addSubcriber(notifyAll, subcriber);
    }
  };
  var oneshot = function (subcriber, key) {
    return addSubcriberInDict(oneshotKey, subcriber, key);
  };
  return {
          set: set,
          subcribe: subcribe,
          oneshot: oneshot
        };
}
/* No side effect */

// Generated by ReScript, PLEASE EDIT WITH CARE


var NotConnectBackend = /* @__PURE__ */create("AcLive__Session.NotConnectBackend");

var AsyncRequestTimeout = /* @__PURE__ */create("AcLive__Session.AsyncRequestTimeout");

var ResponseError = /* @__PURE__ */create("AcLive__Session.ResponseError");

function setResponse(subject, v) {
  subject.set(v, getResponseRequestId(v));
}

function setEmptyResponse(subject, v) {
  subject.set(v, getEmptyResponseRequestId(v));
}

function setDanmaku(subject, v) {
  subject.set(v, v.liverUID.toString());
}

function fixKeyCallback(subject, key, onData) {
  return subject.subcribe((function (v, param) {
                onData(v);
              }), key);
}

function responseCallback(subject, key, onData, onError) {
  return subject.subcribe((function (value, param) {
                if (value.TAG === "Ok") {
                  return onData(value._0);
                } else if (onError !== undefined) {
                  return onError(value._0);
                } else {
                  return ;
                }
              }), key);
}

function danmakuCallback(subject, key, onData) {
  return subject.subcribe((function (v, param) {
                onData(v);
              }), map(key, (function (prim) {
                    return prim.toString();
                  })));
}

function make$1($$WebSocket, $staropt$star) {
  var config = $staropt$star !== undefined ? $staropt$star : ({
        websocketUrl: "ws://localhost:15368",
        autoReconnect: true,
        asyncRequestTimeout: 10000
      });
  var ws = {
    contents: undefined
  };
  var unitSubject = make$2();
  var websocketErrorSubject = make$2();
  var jsonErrorSubject = make$2();
  var loginSubject = make$2();
  var setClientIDSubject = make$2();
  var requestForwardSubject = make$2();
  var receiveForwardSubject = make$2();
  var setTokenSubject = make$2();
  var getDanmakuSubject = make$2();
  var stopDanmakuSubject = make$2();
  var getWatchingListSubject = make$2();
  var getBillboardSubject = make$2();
  var getSummarySubject = make$2();
  var getLuckListSubject = make$2();
  var getPlaybackSubject = make$2();
  var getAllGiftListSubject = make$2();
  var getWalletBalanceSubject = make$2();
  var getUserLiveInfoSubject = make$2();
  var getAllLiveListSubject = make$2();
  var getLiveDataSubject = make$2();
  var getGiftListSubject = make$2();
  var getUserInfoSubject = make$2();
  var getLiveCutInfoSubject = make$2();
  var getManagerListSubject = make$2();
  var addManagerSubject = make$2();
  var deleteManagerSubject = make$2();
  var getAllKickHistorySubject = make$2();
  var managerKickSubject = make$2();
  var authorKickSubject = make$2();
  var getMedalDetailSubject = make$2();
  var getMedalListSubject = make$2();
  var getMedalRankListSubject = make$2();
  var getUserMedalSubject = make$2();
  var wearMedalSubject = make$2();
  var cancelWearMedalSubject = make$2();
  var checkLiveAuthSubject = make$2();
  var getLiveTypeListSubject = make$2();
  var getPushConfigSubject = make$2();
  var getLiveStatusSubject = make$2();
  var getTranscodeInfoSubject = make$2();
  var startLiveSubject = make$2();
  var stopLiveSubject = make$2();
  var changeTitleAndCoverSubject = make$2();
  var getLiveCutStatusSubject = make$2();
  var setLiveCutStatusSubject = make$2();
  var commentSubject = make$2();
  var likeSubject = make$2();
  var enterRoomSubject = make$2();
  var followAuthorSubject = make$2();
  var throwBananaSubject = make$2();
  var giftSubject = make$2();
  var richTextSubject = make$2();
  var joinClubSubject = make$2();
  var shareLiveSubject = make$2();
  var danmakuStopSubject = make$2();
  var bananaCountSubject = make$2();
  var displayInfoSubject = make$2();
  var topUsersSubject = make$2();
  var recentCommentsSubject = make$2();
  var redpackListSubject = make$2();
  var chatCallSubject = make$2();
  var chatAcceptSubject = make$2();
  var chatReadySubject = make$2();
  var chatEndSubject = make$2();
  var danmakuStopErrorStopSubject = make$2();
  var kickedOutSubject = make$2();
  var violationAlertSubject = make$2();
  var managerStateSubject = make$2();
  var uuidDict = {};
  var isConnecting = function () {
    var w = ws.contents;
    if (w !== undefined) {
      return $$WebSocket.isOpen(valFromOption(w));
    } else {
      return false;
    }
  };
  var disConnect = function () {
    var w = ws.contents;
    if (w !== undefined) {
      ws.contents = undefined;
      return $$WebSocket.close(valFromOption(w));
    }
    
  };
  var connect = function () {
    if (isConnecting()) {
      return ;
    }
    var w = $$WebSocket.make(config.websocketUrl);
    ws.contents = some(w);
    var heartbeatInterval = {
      contents: undefined
    };
    var cleanupFn = {
      contents: undefined
    };
    var cleanup = function () {
      var id = heartbeatInterval.contents;
      if (id !== undefined) {
        clearInterval(valFromOption(id));
        heartbeatInterval.contents = undefined;
      }
      var fn = cleanupFn.contents;
      if (fn !== undefined) {
        fn(undefined);
        cleanupFn.contents = undefined;
      }
      if (isSome(ws.contents)) {
        disConnect();
        if (config.autoReconnect) {
          setTimeout((function () {
                  connect();
                }), 5000);
          return ;
        } else {
          return ;
        }
      }
      
    };
    var openListener = function (param) {
      heartbeatInterval.contents = some(setInterval((function () {
                  $$WebSocket.send(w, heartbeat);
                }), 5000));
      unitSubject.set(undefined, "websocketOpen");
    };
    var closeListener = function (param) {
      unitSubject.set(undefined, "websocketClose");
      cleanup();
    };
    var errorListener = function (e) {
      websocketErrorSubject.set({
            error: e.error,
            message: e.message
          }, "websocketError");
      cleanup();
    };
    $$WebSocket.addOpenListener(w, openListener);
    $$WebSocket.addCloseListener(w, closeListener);
    $$WebSocket.addErrorListener(w, errorListener);
    var messageListener = function (param) {
      var data = param.data;
      var response = parseResponse(data);
      if (response.TAG !== "Ok") {
        return jsonErrorSubject.set({
                    json: data,
                    error: response._0
                  }, "jsonError");
      }
      var response$1 = response._0;
      if (typeof response$1 !== "object") {
        return unitSubject.set(undefined, "heartbeat");
      }
      switch (response$1.TAG) {
        case 2 :
            return setResponse(loginSubject, response$1._0);
        case 3 :
            return setEmptyResponse(setClientIDSubject, response$1._0);
        case 4 :
            return setEmptyResponse(requestForwardSubject, response$1._0);
        case 5 :
            return setResponse(receiveForwardSubject, response$1._0);
        case 6 :
            return setEmptyResponse(setTokenSubject, response$1._0);
        case 100 :
            var v = response$1._0;
            return getDanmakuSubject.set(v, getOptionalResponseRequestId(v));
        case 101 :
            return setEmptyResponse(stopDanmakuSubject, response$1._0);
        case 102 :
            return setResponse(getWatchingListSubject, response$1._0);
        case 103 :
            return setResponse(getBillboardSubject, response$1._0);
        case 104 :
            return setResponse(getSummarySubject, response$1._0);
        case 105 :
            return setResponse(getLuckListSubject, response$1._0);
        case 106 :
            return setResponse(getPlaybackSubject, response$1._0);
        case 107 :
            return setResponse(getAllGiftListSubject, response$1._0);
        case 108 :
            return setResponse(getWalletBalanceSubject, response$1._0);
        case 109 :
            return setResponse(getUserLiveInfoSubject, response$1._0);
        case 110 :
            return setResponse(getAllLiveListSubject, response$1._0);
        case 112 :
            return setResponse(getLiveDataSubject, response$1._0);
        case 114 :
            return setResponse(getGiftListSubject, response$1._0);
        case 115 :
            return setResponse(getUserInfoSubject, response$1._0);
        case 116 :
            return setResponse(getLiveCutInfoSubject, response$1._0);
        case 200 :
            return setResponse(getManagerListSubject, response$1._0);
        case 201 :
            return setEmptyResponse(addManagerSubject, response$1._0);
        case 202 :
            return setEmptyResponse(deleteManagerSubject, response$1._0);
        case 203 :
            return setResponse(getAllKickHistorySubject, response$1._0);
        case 204 :
            return setEmptyResponse(managerKickSubject, response$1._0);
        case 205 :
            return setEmptyResponse(authorKickSubject, response$1._0);
        case 300 :
            return setResponse(getMedalDetailSubject, response$1._0);
        case 301 :
            return setResponse(getMedalListSubject, response$1._0);
        case 302 :
            return setResponse(getMedalRankListSubject, response$1._0);
        case 303 :
            return setResponse(getUserMedalSubject, response$1._0);
        case 304 :
            return setEmptyResponse(wearMedalSubject, response$1._0);
        case 305 :
            return setEmptyResponse(cancelWearMedalSubject, response$1._0);
        case 900 :
            return setResponse(checkLiveAuthSubject, response$1._0);
        case 901 :
            return setResponse(getLiveTypeListSubject, response$1._0);
        case 902 :
            return setResponse(getPushConfigSubject, response$1._0);
        case 903 :
            return setResponse(getLiveStatusSubject, response$1._0);
        case 904 :
            return setResponse(getTranscodeInfoSubject, response$1._0);
        case 905 :
            return setResponse(startLiveSubject, response$1._0);
        case 906 :
            return setResponse(stopLiveSubject, response$1._0);
        case 907 :
            return setEmptyResponse(changeTitleAndCoverSubject, response$1._0);
        case 908 :
            return setResponse(getLiveCutStatusSubject, response$1._0);
        case 909 :
            return setEmptyResponse(setLiveCutStatusSubject, response$1._0);
        case 1000 :
            return setDanmaku(commentSubject, response$1._0);
        case 1001 :
            return setDanmaku(likeSubject, response$1._0);
        case 1002 :
            return setDanmaku(enterRoomSubject, response$1._0);
        case 1003 :
            return setDanmaku(followAuthorSubject, response$1._0);
        case 1004 :
            return setDanmaku(throwBananaSubject, response$1._0);
        case 1005 :
            return setDanmaku(giftSubject, response$1._0);
        case 1006 :
            return setDanmaku(richTextSubject, response$1._0);
        case 1007 :
            return setDanmaku(joinClubSubject, response$1._0);
        case 1008 :
            return setDanmaku(shareLiveSubject, response$1._0);
        case 2000 :
            var v$1 = response$1._0;
            return danmakuStopSubject.set(v$1, v$1.liverUID.toString());
        case 2001 :
            return setDanmaku(bananaCountSubject, response$1._0);
        case 2002 :
            return setDanmaku(displayInfoSubject, response$1._0);
        case 2003 :
            return setDanmaku(topUsersSubject, response$1._0);
        case 2004 :
            return setDanmaku(recentCommentsSubject, response$1._0);
        case 2005 :
            return setDanmaku(redpackListSubject, response$1._0);
        case 2100 :
            return setDanmaku(chatCallSubject, response$1._0);
        case 2101 :
            return setDanmaku(chatAcceptSubject, response$1._0);
        case 2102 :
            return setDanmaku(chatReadySubject, response$1._0);
        case 2103 :
            return setDanmaku(chatEndSubject, response$1._0);
        case 2999 :
            return setDanmaku(danmakuStopErrorStopSubject, response$1._0);
        case 3000 :
            return setDanmaku(kickedOutSubject, response$1._0);
        case 3001 :
            return setDanmaku(violationAlertSubject, response$1._0);
        case 3002 :
            return setDanmaku(managerStateSubject, response$1._0);
        
      }
    };
    $$WebSocket.addMessageListener(w, messageListener);
    cleanupFn.contents = (function () {
        $$WebSocket.removeOpenListener(w, openListener);
        $$WebSocket.removeCloseListener(w, closeListener);
        $$WebSocket.removeErrorListener(w, errorListener);
        $$WebSocket.removeMessageListener(w, messageListener);
      });
  };
  var on = function ($$event, onData, key, onError) {
    switch ($$event) {
      case "websocketOpen" :
          return fixKeyCallback(unitSubject, "websocketOpen", onData);
      case "websocketClose" :
          return fixKeyCallback(unitSubject, "websocketClose", onData);
      case "websocketError" :
          return fixKeyCallback(websocketErrorSubject, "websocketError", onData);
      case "jsonError" :
          return fixKeyCallback(jsonErrorSubject, "jsonError", onData);
      case "heartbeat" :
          return fixKeyCallback(unitSubject, "heartbeat", onData);
      case "login" :
          return responseCallback(loginSubject, key, onData, onError);
      case "setClientID" :
          return responseCallback(setClientIDSubject, key, onData, onError);
      case "requestForward" :
          return responseCallback(requestForwardSubject, key, onData, onError);
      case "receiveForward" :
          return responseCallback(receiveForwardSubject, key, onData, onError);
      case "setToken" :
          return responseCallback(setTokenSubject, key, onData, onError);
      case "getDanmaku" :
          return responseCallback(getDanmakuSubject, key, onData, onError);
      case "stopDanmaku" :
          return responseCallback(stopDanmakuSubject, key, onData, onError);
      case "getWatchingList" :
          return responseCallback(getWatchingListSubject, key, onData, onError);
      case "getBillboard" :
          return responseCallback(getBillboardSubject, key, onData, onError);
      case "getSummary" :
          return responseCallback(getSummarySubject, key, onData, onError);
      case "getLuckList" :
          return responseCallback(getLuckListSubject, key, onData, onError);
      case "getPlayback" :
          return responseCallback(getPlaybackSubject, key, onData, onError);
      case "getAllGiftList" :
          return responseCallback(getAllGiftListSubject, key, onData, onError);
      case "getWalletBalance" :
          return responseCallback(getWalletBalanceSubject, key, onData, onError);
      case "getUserLiveInfo" :
          return responseCallback(getUserLiveInfoSubject, key, onData, onError);
      case "getAllLiveList" :
          return responseCallback(getAllLiveListSubject, key, onData, onError);
      case "getLiveData" :
          return responseCallback(getLiveDataSubject, key, onData, onError);
      case "getGiftList" :
          return responseCallback(getGiftListSubject, key, onData, onError);
      case "getUserInfo" :
          return responseCallback(getUserInfoSubject, key, onData, onError);
      case "getLiveCutInfo" :
          return responseCallback(getLiveCutInfoSubject, key, onData, onError);
      case "getManagerList" :
          return responseCallback(getManagerListSubject, key, onData, onError);
      case "addManager" :
          return responseCallback(addManagerSubject, key, onData, onError);
      case "deleteManager" :
          return responseCallback(deleteManagerSubject, key, onData, onError);
      case "getAllKickHistory" :
          return responseCallback(getAllKickHistorySubject, key, onData, onError);
      case "managerKick" :
          return responseCallback(managerKickSubject, key, onData, onError);
      case "authorKick" :
          return responseCallback(authorKickSubject, key, onData, onError);
      case "getMedalDetail" :
          return responseCallback(getMedalDetailSubject, key, onData, onError);
      case "getMedalList" :
          return responseCallback(getMedalListSubject, key, onData, onError);
      case "getMedalRankList" :
          return responseCallback(getMedalRankListSubject, key, onData, onError);
      case "getUserMedal" :
          return responseCallback(getUserMedalSubject, key, onData, onError);
      case "wearMedal" :
          return responseCallback(wearMedalSubject, key, onData, onError);
      case "cancelWearMedal" :
          return responseCallback(cancelWearMedalSubject, key, onData, onError);
      case "checkLiveAuth" :
          return responseCallback(checkLiveAuthSubject, key, onData, onError);
      case "getLiveTypeList" :
          return responseCallback(getLiveTypeListSubject, key, onData, onError);
      case "getPushConfig" :
          return responseCallback(getPushConfigSubject, key, onData, onError);
      case "getLiveStatus" :
          return responseCallback(getLiveStatusSubject, key, onData, onError);
      case "getTranscodeInfo" :
          return responseCallback(getTranscodeInfoSubject, key, onData, onError);
      case "startLive" :
          return responseCallback(startLiveSubject, key, onData, onError);
      case "stopLive" :
          return responseCallback(stopLiveSubject, key, onData, onError);
      case "changeTitleAndCover" :
          return responseCallback(changeTitleAndCoverSubject, key, onData, onError);
      case "getLiveCutStatus" :
          return responseCallback(getLiveCutStatusSubject, key, onData, onError);
      case "setLiveCutStatus" :
          return responseCallback(setLiveCutStatusSubject, key, onData, onError);
      case "comment" :
          return danmakuCallback(commentSubject, key, onData);
      case "like" :
          return danmakuCallback(likeSubject, key, onData);
      case "enterRoom" :
          return danmakuCallback(enterRoomSubject, key, onData);
      case "followAuthor" :
          return danmakuCallback(followAuthorSubject, key, onData);
      case "throwBanana" :
          return danmakuCallback(throwBananaSubject, key, onData);
      case "gift" :
          return danmakuCallback(giftSubject, key, onData);
      case "richText" :
          return danmakuCallback(richTextSubject, key, onData);
      case "joinClub" :
          return danmakuCallback(joinClubSubject, key, onData);
      case "shareLive" :
          return danmakuCallback(shareLiveSubject, key, onData);
      case "danmakuStop" :
          return danmakuCallback(danmakuStopSubject, key, onData);
      case "bananaCount" :
          return danmakuCallback(bananaCountSubject, key, onData);
      case "displayInfo" :
          return danmakuCallback(displayInfoSubject, key, onData);
      case "topUsers" :
          return danmakuCallback(topUsersSubject, key, onData);
      case "recentComments" :
          return danmakuCallback(recentCommentsSubject, key, onData);
      case "redpackList" :
          return danmakuCallback(redpackListSubject, key, onData);
      case "chatCall" :
          return danmakuCallback(chatCallSubject, key, onData);
      case "chatAccept" :
          return danmakuCallback(chatAcceptSubject, key, onData);
      case "chatReady" :
          return danmakuCallback(chatReadySubject, key, onData);
      case "chatEnd" :
          return danmakuCallback(chatEndSubject, key, onData);
      case "danmakuStopError" :
          return danmakuCallback(danmakuStopErrorStopSubject, key, onData);
      case "kickedOut" :
          return danmakuCallback(kickedOutSubject, key, onData);
      case "violationAlert" :
          return danmakuCallback(violationAlertSubject, key, onData);
      case "managerState" :
          return danmakuCallback(managerStateSubject, key, onData);
      
    }
  };
  var sendRequest = function (data, ws) {
    var d = serializeRequest(data);
    if (d.TAG === "Ok") {
      return $$WebSocket.send(ws, d._0);
    } else {
      return jsonErrorSubject.set({
                  error: d._0
                }, "jsonError");
    }
  };
  var request = function (request$1, data, requestID) {
    var w = ws.contents;
    if (w === undefined) {
      return ;
    }
    var w$1 = valFromOption(w);
    switch (request$1) {
      case "login" :
          return sendRequest({
                      TAG: 2,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "setClientID" :
          return sendRequest({
                      TAG: 3,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "requestForward" :
          return sendRequest({
                      TAG: 4,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "setToken" :
          return sendRequest({
                      TAG: 6,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getDanmaku" :
          return sendRequest({
                      TAG: 100,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "stopDanmaku" :
          return sendRequest({
                      TAG: 101,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getWatchingList" :
          return sendRequest({
                      TAG: 102,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getBillboard" :
          return sendRequest({
                      TAG: 103,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getSummary" :
          return sendRequest({
                      TAG: 104,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getLuckList" :
          return sendRequest({
                      TAG: 105,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getPlayback" :
          return sendRequest({
                      TAG: 106,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getAllGiftList" :
          return sendRequest({
                      TAG: 107,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getWalletBalance" :
          return sendRequest({
                      TAG: 108,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getUserLiveInfo" :
          return sendRequest({
                      TAG: 109,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getAllLiveList" :
          return sendRequest({
                      TAG: 110,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getLiveData" :
          return sendRequest({
                      TAG: 112,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getGiftList" :
          return sendRequest({
                      TAG: 114,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getUserInfo" :
          return sendRequest({
                      TAG: 115,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getLiveCutInfo" :
          return sendRequest({
                      TAG: 116,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getManagerList" :
          return sendRequest({
                      TAG: 200,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "addManager" :
          return sendRequest({
                      TAG: 201,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "deleteManager" :
          return sendRequest({
                      TAG: 202,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getAllKickHistory" :
          return sendRequest({
                      TAG: 203,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "managerKick" :
          return sendRequest({
                      TAG: 204,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "authorKick" :
          return sendRequest({
                      TAG: 205,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getMedalDetail" :
          return sendRequest({
                      TAG: 300,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getMedalList" :
          return sendRequest({
                      TAG: 301,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getMedalRankList" :
          return sendRequest({
                      TAG: 302,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getUserMedal" :
          return sendRequest({
                      TAG: 303,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "wearMedal" :
          return sendRequest({
                      TAG: 304,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "cancelWearMedal" :
          return sendRequest({
                      TAG: 305,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "checkLiveAuth" :
          return sendRequest({
                      TAG: 900,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getLiveTypeList" :
          return sendRequest({
                      TAG: 901,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getPushConfig" :
          return sendRequest({
                      TAG: 902,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getLiveStatus" :
          return sendRequest({
                      TAG: 903,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "getTranscodeInfo" :
          return sendRequest({
                      TAG: 904,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "startLive" :
          return sendRequest({
                      TAG: 905,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "stopLive" :
          return sendRequest({
                      TAG: 906,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "changeTitleAndCover" :
          return sendRequest({
                      TAG: 907,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      case "getLiveCutStatus" :
          return sendRequest({
                      TAG: 908,
                      _0: makeEmptyMessage(requestID)
                    }, w$1);
      case "setLiveCutStatus" :
          return sendRequest({
                      TAG: 909,
                      _0: makeMessage(data, requestID)
                    }, w$1);
      
    }
  };
  var generateUuid = function () {
    while(true) {
      var uuid = Uuid.v4();
      var match = uuidDict[uuid];
      if (match !== undefined) {
        _param = undefined;
        continue ;
      }
      uuidDict[uuid] = 0;
      return [
              uuid,
              (function(uuid){
              return function () {
                $$delete$1(uuidDict, uuid);
              }
              }(uuid))
            ];
    }  };
  var asyncRequest = function (request, data, requestIDPrefix, timeout) {
    var w = ws.contents;
    if (w === undefined) {
      return Promise.reject({
                  RE_EXN_ID: NotConnectBackend
                });
    }
    var w$1 = valFromOption(w);
    return new Promise((function (resolve, reject) {
                  var match = generateUuid();
                  var deleteUuid = match[1];
                  var requestID = getWithDefault$1(requestIDPrefix, "") + "#" + match[0];
                  var unsubscribe = {
                    contents: undefined
                  };
                  var timeout$1 = setTimeout((function () {
                          var f = unsubscribe.contents;
                          if (f !== undefined) {
                            f(undefined);
                            unsubscribe.contents = undefined;
                          }
                          deleteUuid(undefined);
                          reject({
                                RE_EXN_ID: AsyncRequestTimeout
                              });
                        }), getWithDefault$1(timeout, config.asyncRequestTimeout));
                  var handleEmptyMessage = function (subject, constructor) {
                    sendRequest(constructor(makeEmptyMessage(requestID)), w$1);
                    unsubscribe.contents = subject.oneshot((function (value, param) {
                            clearTimeout(timeout$1);
                            deleteUuid(undefined);
                            if (value.TAG === "Ok") {
                              return resolve(value._0);
                            } else {
                              return reject({
                                          RE_EXN_ID: ResponseError,
                                          _1: value._0
                                        });
                            }
                          }), requestID);
                  };
                  var handleMessage = function (subject, constructor) {
                    sendRequest(constructor(makeMessage(data, requestID)), w$1);
                    unsubscribe.contents = subject.oneshot((function (value, param) {
                            clearTimeout(timeout$1);
                            deleteUuid(undefined);
                            if (value.TAG === "Ok") {
                              return resolve(value._0);
                            } else {
                              return reject({
                                          RE_EXN_ID: ResponseError,
                                          _1: value._0
                                        });
                            }
                          }), requestID);
                  };
                  switch (request) {
                    case "login" :
                        return handleMessage(loginSubject, (function (v) {
                                      return {
                                              TAG: 2,
                                              _0: v
                                            };
                                    }));
                    case "setClientID" :
                        return handleMessage(setClientIDSubject, (function (v) {
                                      return {
                                              TAG: 3,
                                              _0: v
                                            };
                                    }));
                    case "requestForward" :
                        return handleMessage(requestForwardSubject, (function (v) {
                                      return {
                                              TAG: 4,
                                              _0: v
                                            };
                                    }));
                    case "setToken" :
                        return handleMessage(setTokenSubject, (function (v) {
                                      return {
                                              TAG: 6,
                                              _0: v
                                            };
                                    }));
                    case "getDanmaku" :
                        return handleMessage(getDanmakuSubject, (function (v) {
                                      return {
                                              TAG: 100,
                                              _0: v
                                            };
                                    }));
                    case "stopDanmaku" :
                        return handleMessage(stopDanmakuSubject, (function (v) {
                                      return {
                                              TAG: 101,
                                              _0: v
                                            };
                                    }));
                    case "getWatchingList" :
                        return handleMessage(getWatchingListSubject, (function (v) {
                                      return {
                                              TAG: 102,
                                              _0: v
                                            };
                                    }));
                    case "getBillboard" :
                        return handleMessage(getBillboardSubject, (function (v) {
                                      return {
                                              TAG: 103,
                                              _0: v
                                            };
                                    }));
                    case "getSummary" :
                        return handleMessage(getSummarySubject, (function (v) {
                                      return {
                                              TAG: 104,
                                              _0: v
                                            };
                                    }));
                    case "getLuckList" :
                        return handleMessage(getLuckListSubject, (function (v) {
                                      return {
                                              TAG: 105,
                                              _0: v
                                            };
                                    }));
                    case "getPlayback" :
                        return handleMessage(getPlaybackSubject, (function (v) {
                                      return {
                                              TAG: 106,
                                              _0: v
                                            };
                                    }));
                    case "getAllGiftList" :
                        return handleEmptyMessage(getAllGiftListSubject, (function (v) {
                                      return {
                                              TAG: 107,
                                              _0: v
                                            };
                                    }));
                    case "getWalletBalance" :
                        return handleEmptyMessage(getWalletBalanceSubject, (function (v) {
                                      return {
                                              TAG: 108,
                                              _0: v
                                            };
                                    }));
                    case "getUserLiveInfo" :
                        return handleMessage(getUserLiveInfoSubject, (function (v) {
                                      return {
                                              TAG: 109,
                                              _0: v
                                            };
                                    }));
                    case "getAllLiveList" :
                        return handleEmptyMessage(getAllLiveListSubject, (function (v) {
                                      return {
                                              TAG: 110,
                                              _0: v
                                            };
                                    }));
                    case "getLiveData" :
                        return handleMessage(getLiveDataSubject, (function (v) {
                                      return {
                                              TAG: 112,
                                              _0: v
                                            };
                                    }));
                    case "getGiftList" :
                        return handleMessage(getGiftListSubject, (function (v) {
                                      return {
                                              TAG: 114,
                                              _0: v
                                            };
                                    }));
                    case "getUserInfo" :
                        return handleMessage(getUserInfoSubject, (function (v) {
                                      return {
                                              TAG: 115,
                                              _0: v
                                            };
                                    }));
                    case "getLiveCutInfo" :
                        return handleMessage(getLiveCutInfoSubject, (function (v) {
                                      return {
                                              TAG: 116,
                                              _0: v
                                            };
                                    }));
                    case "getManagerList" :
                        return handleEmptyMessage(getManagerListSubject, (function (v) {
                                      return {
                                              TAG: 200,
                                              _0: v
                                            };
                                    }));
                    case "addManager" :
                        return handleMessage(addManagerSubject, (function (v) {
                                      return {
                                              TAG: 201,
                                              _0: v
                                            };
                                    }));
                    case "deleteManager" :
                        return handleMessage(deleteManagerSubject, (function (v) {
                                      return {
                                              TAG: 202,
                                              _0: v
                                            };
                                    }));
                    case "getAllKickHistory" :
                        return handleMessage(getAllKickHistorySubject, (function (v) {
                                      return {
                                              TAG: 203,
                                              _0: v
                                            };
                                    }));
                    case "managerKick" :
                        return handleMessage(managerKickSubject, (function (v) {
                                      return {
                                              TAG: 204,
                                              _0: v
                                            };
                                    }));
                    case "authorKick" :
                        return handleMessage(authorKickSubject, (function (v) {
                                      return {
                                              TAG: 205,
                                              _0: v
                                            };
                                    }));
                    case "getMedalDetail" :
                        return handleMessage(getMedalDetailSubject, (function (v) {
                                      return {
                                              TAG: 300,
                                              _0: v
                                            };
                                    }));
                    case "getMedalList" :
                        return handleEmptyMessage(getMedalListSubject, (function (v) {
                                      return {
                                              TAG: 301,
                                              _0: v
                                            };
                                    }));
                    case "getMedalRankList" :
                        return handleMessage(getMedalRankListSubject, (function (v) {
                                      return {
                                              TAG: 302,
                                              _0: v
                                            };
                                    }));
                    case "getUserMedal" :
                        return handleMessage(getUserMedalSubject, (function (v) {
                                      return {
                                              TAG: 303,
                                              _0: v
                                            };
                                    }));
                    case "wearMedal" :
                        return handleMessage(wearMedalSubject, (function (v) {
                                      return {
                                              TAG: 304,
                                              _0: v
                                            };
                                    }));
                    case "cancelWearMedal" :
                        return handleEmptyMessage(cancelWearMedalSubject, (function (v) {
                                      return {
                                              TAG: 305,
                                              _0: v
                                            };
                                    }));
                    case "checkLiveAuth" :
                        return handleEmptyMessage(checkLiveAuthSubject, (function (v) {
                                      return {
                                              TAG: 900,
                                              _0: v
                                            };
                                    }));
                    case "getLiveTypeList" :
                        return handleEmptyMessage(getLiveTypeListSubject, (function (v) {
                                      return {
                                              TAG: 901,
                                              _0: v
                                            };
                                    }));
                    case "getPushConfig" :
                        return handleEmptyMessage(getPushConfigSubject, (function (v) {
                                      return {
                                              TAG: 902,
                                              _0: v
                                            };
                                    }));
                    case "getLiveStatus" :
                        return handleEmptyMessage(getLiveStatusSubject, (function (v) {
                                      return {
                                              TAG: 903,
                                              _0: v
                                            };
                                    }));
                    case "getTranscodeInfo" :
                        return handleMessage(getTranscodeInfoSubject, (function (v) {
                                      return {
                                              TAG: 904,
                                              _0: v
                                            };
                                    }));
                    case "startLive" :
                        return handleMessage(startLiveSubject, (function (v) {
                                      return {
                                              TAG: 905,
                                              _0: v
                                            };
                                    }));
                    case "stopLive" :
                        return handleMessage(stopLiveSubject, (function (v) {
                                      return {
                                              TAG: 906,
                                              _0: v
                                            };
                                    }));
                    case "changeTitleAndCover" :
                        return handleMessage(changeTitleAndCoverSubject, (function (v) {
                                      return {
                                              TAG: 907,
                                              _0: v
                                            };
                                    }));
                    case "getLiveCutStatus" :
                        return handleEmptyMessage(getLiveCutStatusSubject, (function (v) {
                                      return {
                                              TAG: 908,
                                              _0: v
                                            };
                                    }));
                    case "setLiveCutStatus" :
                        return handleMessage(setLiveCutStatusSubject, (function (v) {
                                      return {
                                              TAG: 909,
                                              _0: v
                                            };
                                    }));
                    
                  }
                }));
  };
  return {
          connect: connect,
          disConnect: disConnect,
          isConnecting: isConnecting,
          on: on,
          request: request,
          asyncRequest: asyncRequest
        };
}
/* uuid Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE


function isOpen(ws) {
  return ws.readyState === Ws.WebSocket.OPEN;
}

function make(prim) {
  return new Ws.WebSocket(prim);
}

function send(prim0, prim1) {
  prim0.send(prim1);
}

function close(prim) {
  prim.close();
}

function addOpenListener(prim0, prim1) {
  prim0.addEventListener("open", prim1);
}

function removeOpenListener(prim0, prim1) {
  prim0.removeEventListener("open", prim1);
}

function addCloseListener(prim0, prim1) {
  prim0.addEventListener("close", prim1);
}

function removeCloseListener(prim0, prim1) {
  prim0.removeEventListener("close", prim1);
}

function addMessageListener(prim0, prim1) {
  prim0.addEventListener("message", prim1);
}

function removeMessageListener(prim0, prim1) {
  prim0.removeEventListener("message", prim1);
}

function addErrorListener(prim0, prim1) {
  prim0.addEventListener("error", prim1);
}

function removeErrorListener(prim0, prim1) {
  prim0.removeEventListener("error", prim1);
}
/* ws Not a pure module */

var Node__WebSocket = /*#__PURE__*/Object.freeze({
  __proto__: null,
  addCloseListener: addCloseListener,
  addErrorListener: addErrorListener,
  addMessageListener: addMessageListener,
  addOpenListener: addOpenListener,
  close: close,
  isOpen: isOpen,
  make: make,
  removeCloseListener: removeCloseListener,
  removeErrorListener: removeErrorListener,
  removeMessageListener: removeMessageListener,
  removeOpenListener: removeOpenListener,
  send: send
});

// Generated by ReScript, PLEASE EDIT WITH CARE


function makeSession(config) {
  return make$1(Node__WebSocket, config);
}
/* AcLive__Session Not a pure module */

const nodeSession = makeSession;

export { nodeSession as default };
