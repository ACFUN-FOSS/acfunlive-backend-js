// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as AcLive__Message from "./AcLive__Message.bs.mjs";
import * as S$RescriptStruct from "rescript-struct/src/S.bs.mjs";

function makeEmptyRequestStruct(type_) {
  return S$RescriptStruct.object(function (o) {
              S$RescriptStruct.field(o, "type", S$RescriptStruct.literal({
                        TAG: "Int",
                        _0: type_
                      }));
              return {
                      requestID: S$RescriptStruct.field(o, "requestID", S$RescriptStruct.string(undefined))
                    };
            });
}

function makeRequestStruct(type_, struct) {
  return S$RescriptStruct.object(function (o) {
              S$RescriptStruct.field(o, "type", S$RescriptStruct.literal({
                        TAG: "Int",
                        _0: type_
                      }));
              return {
                      requestID: S$RescriptStruct.field(o, "requestID", S$RescriptStruct.string(undefined)),
                      data: S$RescriptStruct.field(o, "data", struct)
                    };
            });
}

var loginRequestStruct = makeRequestStruct(2, S$RescriptStruct.object(function (o) {
          return {
                  account: S$RescriptStruct.field(o, "account", S$RescriptStruct.string(undefined)),
                  password: S$RescriptStruct.field(o, "password", S$RescriptStruct.string(undefined))
                };
        }));

var setClientIDRequestStruct = makeRequestStruct(3, S$RescriptStruct.object(function (o) {
          return {
                  clientID: S$RescriptStruct.field(o, "clientID", S$RescriptStruct.string(undefined))
                };
        }));

var forwardDataStruct = S$RescriptStruct.object(function (o) {
      return {
              clientID: S$RescriptStruct.field(o, "clientID", S$RescriptStruct.string(undefined)),
              message: S$RescriptStruct.field(o, "message", S$RescriptStruct.string(undefined))
            };
    });

var requestForwardRequestStruct = makeRequestStruct(4, forwardDataStruct);

var tokenInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              userID: S$RescriptStruct.field(o, "userID", S$RescriptStruct.$$float(undefined)),
              securityKey: S$RescriptStruct.field(o, "securityKey", S$RescriptStruct.string(undefined)),
              serviceToken: S$RescriptStruct.field(o, "serviceToken", S$RescriptStruct.string(undefined)),
              deviceID: S$RescriptStruct.field(o, "deviceID", S$RescriptStruct.string(undefined)),
              cookies: S$RescriptStruct.field(o, "cookies", S$RescriptStruct.array(S$RescriptStruct.string(undefined)))
            };
    });

var setTokenRequestStruct = makeRequestStruct(6, tokenInfoStruct);

var liverUIDStruct = S$RescriptStruct.object(function (o) {
      return {
              liverUID: S$RescriptStruct.field(o, "liverUID", S$RescriptStruct.$$int(undefined))
            };
    });

var getDanmakuRequestStruct = makeRequestStruct(100, liverUIDStruct);

var stopDanmakuRequestStruct = makeRequestStruct(101, liverUIDStruct);

var liveIDStruct = S$RescriptStruct.object(function (o) {
      return {
              liveID: S$RescriptStruct.field(o, "liveID", S$RescriptStruct.string(undefined))
            };
    });

var getWatchingListRequestStruct = makeRequestStruct(102, liveIDStruct);

var getBillboardRequestStruct = makeRequestStruct(103, liverUIDStruct);

var getSummaryRequestStruct = makeRequestStruct(104, liveIDStruct);

var getLuckListRequestStruct = makeRequestStruct(105, S$RescriptStruct.object(function (o) {
          return {
                  liveID: S$RescriptStruct.field(o, "liveID", S$RescriptStruct.string(undefined)),
                  redpackID: S$RescriptStruct.field(o, "redpackID", S$RescriptStruct.string(undefined)),
                  redpackBizUnit: S$RescriptStruct.field(o, "redpackBizUnit", S$RescriptStruct.string(undefined))
                };
        }));

var getPlaybackRequestStruct = makeRequestStruct(106, liveIDStruct);

var userIDStruct = S$RescriptStruct.object(function (o) {
      return {
              userID: S$RescriptStruct.field(o, "userID", S$RescriptStruct.$$int(undefined))
            };
    });

var getUserLiveInfoRequestStruct = makeRequestStruct(109, userIDStruct);

var getLiveDataRequestStruct = makeRequestStruct(112, S$RescriptStruct.object(function (o) {
          return {
                  days: S$RescriptStruct.field(o, "days", S$RescriptStruct.$$int(undefined))
                };
        }));

var getGiftListRequestStruct = makeRequestStruct(114, liveIDStruct);

var getUserInfoRequestStruct = makeRequestStruct(115, userIDStruct);

var getLiveCutInfoRequestStruct = makeRequestStruct(116, S$RescriptStruct.object(function (o) {
          return {
                  liverUID: S$RescriptStruct.field(o, "liverUID", S$RescriptStruct.$$int(undefined)),
                  liveID: S$RescriptStruct.field(o, "liveID", S$RescriptStruct.string(undefined))
                };
        }));

var managerUIDStruct = S$RescriptStruct.object(function (o) {
      return {
              managerUID: S$RescriptStruct.field(o, "managerUID", S$RescriptStruct.$$int(undefined))
            };
    });

var addManagerRequestStruct = makeRequestStruct(201, managerUIDStruct);

var deleteManagerRequestStruct = makeRequestStruct(202, managerUIDStruct);

var getAllKickHistoryRequestStruct = makeRequestStruct(203, liveIDStruct);

var kickUserStruct = S$RescriptStruct.object(function (o) {
      return {
              liveID: S$RescriptStruct.field(o, "liveID", S$RescriptStruct.string(undefined)),
              kickedUID: S$RescriptStruct.field(o, "kickedUID", S$RescriptStruct.$$int(undefined))
            };
    });

var managerKickRequestStruct = makeRequestStruct(204, kickUserStruct);

var authorKickRequestStruct = makeRequestStruct(205, kickUserStruct);

var getMedalDetailRequestStruct = makeRequestStruct(300, liverUIDStruct);

var getMedalRankListRequestStruct = makeRequestStruct(302, liverUIDStruct);

var getUserMedalRequestStruct = makeRequestStruct(303, userIDStruct);

var wearMedalRequestStruct = makeRequestStruct(304, liverUIDStruct);

var getTranscodeInfoRequestStruct = makeRequestStruct(904, S$RescriptStruct.object(function (o) {
          return {
                  streamName: S$RescriptStruct.field(o, "streamName", S$RescriptStruct.string(undefined))
                };
        }));

var startLiveRequestStruct = makeRequestStruct(905, S$RescriptStruct.object(function (o) {
          return {
                  title: S$RescriptStruct.field(o, "title", S$RescriptStruct.string(undefined)),
                  coverFile: S$RescriptStruct.field(o, "coverFile", S$RescriptStruct.string(undefined)),
                  streamName: S$RescriptStruct.field(o, "streamName", S$RescriptStruct.string(undefined)),
                  portrait: S$RescriptStruct.field(o, "portrait", S$RescriptStruct.bool(undefined)),
                  panoramic: S$RescriptStruct.field(o, "panoramic", S$RescriptStruct.bool(undefined)),
                  categoryID: S$RescriptStruct.field(o, "categoryID", S$RescriptStruct.$$int(undefined)),
                  subCategoryID: S$RescriptStruct.field(o, "subCategoryID", S$RescriptStruct.$$int(undefined))
                };
        }));

var stopLiveRequestStruct = makeRequestStruct(906, liveIDStruct);

var changeTitleAndCoverRequestStruct = makeRequestStruct(907, S$RescriptStruct.object(function (o) {
          return {
                  title: S$RescriptStruct.field(o, "title", S$RescriptStruct.string(undefined)),
                  coverFile: S$RescriptStruct.field(o, "coverFile", S$RescriptStruct.string(undefined)),
                  liveID: S$RescriptStruct.field(o, "liveID", S$RescriptStruct.string(undefined))
                };
        }));

var canCutLiveStruct = S$RescriptStruct.object(function (o) {
      return {
              canCut: S$RescriptStruct.field(o, "canCut", S$RescriptStruct.bool(undefined))
            };
    });

var setLiveCutStatusRequestStruct = makeRequestStruct(909, canCutLiveStruct);

function serializeRequest(request) {
  switch (request.TAG) {
    case 2 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, loginRequestStruct);
    case 3 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, setClientIDRequestStruct);
    case 4 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, requestForwardRequestStruct);
    case 6 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, setTokenRequestStruct);
    case 100 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getDanmakuRequestStruct);
    case 101 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, stopDanmakuRequestStruct);
    case 102 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getWatchingListRequestStruct);
    case 103 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getBillboardRequestStruct);
    case 104 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getSummaryRequestStruct);
    case 105 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getLuckListRequestStruct);
    case 106 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getPlaybackRequestStruct);
    case 107 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(107));
    case 108 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(108));
    case 109 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getUserLiveInfoRequestStruct);
    case 110 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(110));
    case 112 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getLiveDataRequestStruct);
    case 114 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getGiftListRequestStruct);
    case 115 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getUserInfoRequestStruct);
    case 116 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getLiveCutInfoRequestStruct);
    case 200 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(200));
    case 201 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, addManagerRequestStruct);
    case 202 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, deleteManagerRequestStruct);
    case 203 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getAllKickHistoryRequestStruct);
    case 204 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, managerKickRequestStruct);
    case 205 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, authorKickRequestStruct);
    case 300 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getMedalDetailRequestStruct);
    case 301 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(301));
    case 302 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getMedalRankListRequestStruct);
    case 303 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getUserMedalRequestStruct);
    case 304 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, wearMedalRequestStruct);
    case 305 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(305));
    case 900 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(900));
    case 901 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(901));
    case 902 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(902));
    case 903 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(903));
    case 904 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, getTranscodeInfoRequestStruct);
    case 905 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, startLiveRequestStruct);
    case 906 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, stopLiveRequestStruct);
    case 907 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, changeTitleAndCoverRequestStruct);
    case 908 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, makeEmptyRequestStruct(908));
    case 909 :
        return S$RescriptStruct.serializeToJsonWith(request._0, undefined, setLiveCutStatusRequestStruct);
    
  }
}

var responseTypeStruct = S$RescriptStruct.variant(S$RescriptStruct.$$int(undefined), (function (v) {
        return AcLive__Message.intToResponseType(v);
      }));

var responseResultStruct = S$RescriptStruct.variant(S$RescriptStruct.$$int(undefined), (function (v) {
        return AcLive__Message.intToResponseResult(v);
      }));

var loginResponseStruct = S$RescriptStruct.object(function (o) {
      return S$RescriptStruct.field(o, "tokenInfo", tokenInfoStruct);
    });

var streamURLStruct = S$RescriptStruct.object(function (o) {
      return {
              url: S$RescriptStruct.field(o, "url", S$RescriptStruct.string(undefined)),
              bitrate: S$RescriptStruct.field(o, "bitrate", S$RescriptStruct.$$int(undefined)),
              qualityType: S$RescriptStruct.field(o, "qualityType", S$RescriptStruct.string(undefined)),
              qualityName: S$RescriptStruct.field(o, "qualityName", S$RescriptStruct.string(undefined))
            };
    });

var streamInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              liveID: S$RescriptStruct.field(o, "liveID", S$RescriptStruct.string(undefined)),
              title: S$RescriptStruct.field(o, "title", S$RescriptStruct.string(undefined)),
              liveStartTime: S$RescriptStruct.field(o, "liveStartTime", S$RescriptStruct.$$float(undefined)),
              panoramic: S$RescriptStruct.field(o, "panoramic", S$RescriptStruct.bool(undefined)),
              streamList: S$RescriptStruct.field(o, "streamList", S$RescriptStruct.array(streamURLStruct)),
              streamName: S$RescriptStruct.field(o, "streamName", S$RescriptStruct.string(undefined))
            };
    });

var getDanmakuResponse = S$RescriptStruct.object(function (o) {
      return S$RescriptStruct.field(o, "StreamInfo", streamInfoStruct);
    });

var medalInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              uperID: S$RescriptStruct.field(o, "uperID", S$RescriptStruct.$$int(undefined)),
              userID: S$RescriptStruct.field(o, "userID", S$RescriptStruct.$$int(undefined)),
              clubName: S$RescriptStruct.field(o, "clubName", S$RescriptStruct.string(undefined)),
              level: S$RescriptStruct.field(o, "level", S$RescriptStruct.$$int(undefined))
            };
    });

var userInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              userID: S$RescriptStruct.field(o, "userID", S$RescriptStruct.$$float(undefined)),
              nickname: S$RescriptStruct.field(o, "nickname", S$RescriptStruct.string(undefined)),
              avatar: S$RescriptStruct.field(o, "avatar", S$RescriptStruct.string(undefined)),
              medal: S$RescriptStruct.field(o, "medal", medalInfoStruct),
              managerType: S$RescriptStruct.field(o, "managerType", S$RescriptStruct.variant(S$RescriptStruct.$$int(undefined), (function (v) {
                          return AcLive__Message.intToManagerType(v);
                        })))
            };
    });

var watchingUserStruct = S$RescriptStruct.object(function (o) {
      return {
              userInfo: S$RescriptStruct.field(o, "userInfo", userInfoStruct),
              anonymousUser: S$RescriptStruct.field(o, "anonymousUser", S$RescriptStruct.bool(undefined)),
              displaySendAmount: S$RescriptStruct.field(o, "displaySendAmount", S$RescriptStruct.string(undefined)),
              customData: S$RescriptStruct.field(o, "customData", S$RescriptStruct.string(undefined))
            };
    });

var getWatchingListResponseStruct = S$RescriptStruct.array(watchingUserStruct);

var getBillboardResponseStruct = S$RescriptStruct.array(watchingUserStruct);

var getSummaryResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              duration: S$RescriptStruct.field(o, "duration", S$RescriptStruct.$$int(undefined)),
              likeCount: S$RescriptStruct.field(o, "likeCount", S$RescriptStruct.string(undefined)),
              watchCount: S$RescriptStruct.field(o, "watchCount", S$RescriptStruct.string(undefined)),
              giftCount: S$RescriptStruct.field(o, "giftCount", S$RescriptStruct.$$int(undefined)),
              diamondCount: S$RescriptStruct.field(o, "diamondCount", S$RescriptStruct.$$int(undefined)),
              bananaCount: S$RescriptStruct.field(o, "bananaCount", S$RescriptStruct.$$int(undefined))
            };
    });

var luckyUserStruct = S$RescriptStruct.object(function (o) {
      return {
              userInfo: S$RescriptStruct.field(o, "userInfo", userInfoStruct),
              grabAmount: S$RescriptStruct.field(o, "grabAmount", S$RescriptStruct.$$int(undefined))
            };
    });

var getLuckListResponseStruct = S$RescriptStruct.array(luckyUserStruct);

var getPlaybackResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              duration: S$RescriptStruct.field(o, "duration", S$RescriptStruct.$$int(undefined)),
              url: S$RescriptStruct.field(o, "url", S$RescriptStruct.string(undefined)),
              backupURL: S$RescriptStruct.field(o, "backupURL", S$RescriptStruct.string(undefined)),
              m3u8Slice: S$RescriptStruct.field(o, "m3u8Slice", S$RescriptStruct.string(undefined)),
              width: S$RescriptStruct.field(o, "width", S$RescriptStruct.$$int(undefined)),
              height: S$RescriptStruct.field(o, "height", S$RescriptStruct.$$int(undefined))
            };
    });

var giftDetailStruct = S$RescriptStruct.object(function (o) {
      return {
              giftID: S$RescriptStruct.field(o, "giftID", S$RescriptStruct.$$int(undefined)),
              giftName: S$RescriptStruct.field(o, "giftName", S$RescriptStruct.string(undefined)),
              arLiveName: S$RescriptStruct.field(o, "arLiveName", S$RescriptStruct.string(undefined)),
              payWalletType: S$RescriptStruct.field(o, "payWalletType", S$RescriptStruct.variant(S$RescriptStruct.$$int(undefined), (function (v) {
                          return AcLive__Message.intToGiftPayType(v);
                        }))),
              price: S$RescriptStruct.field(o, "price", S$RescriptStruct.$$int(undefined)),
              webpPic: S$RescriptStruct.field(o, "webpPic", S$RescriptStruct.string(undefined)),
              pngPic: S$RescriptStruct.field(o, "pngPic", S$RescriptStruct.string(undefined)),
              smallPngPic: S$RescriptStruct.field(o, "smallPngPic", S$RescriptStruct.string(undefined)),
              allowBatchSendSizeList: S$RescriptStruct.field(o, "allowBatchSendSizeList", S$RescriptStruct.$$null(S$RescriptStruct.array(S$RescriptStruct.$$int(undefined)))),
              canCombo: S$RescriptStruct.field(o, "canCombo", S$RescriptStruct.bool(undefined)),
              canDraw: S$RescriptStruct.field(o, "canDraw", S$RescriptStruct.bool(undefined)),
              magicFaceID: S$RescriptStruct.field(o, "magicFaceID", S$RescriptStruct.$$int(undefined)),
              vupArID: S$RescriptStruct.field(o, "vupArID", S$RescriptStruct.$$int(undefined)),
              description: S$RescriptStruct.field(o, "description", S$RescriptStruct.string(undefined)),
              redpackPrice: S$RescriptStruct.field(o, "redpackPrice", S$RescriptStruct.$$int(undefined)),
              cornerMarkerText: S$RescriptStruct.field(o, "cornerMarkerText", S$RescriptStruct.string(undefined))
            };
    });

var getAllGiftListResponseStruct = S$RescriptStruct.array(giftDetailStruct);

var getWalletBalanceResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              acCoin: S$RescriptStruct.field(o, "acCoin", S$RescriptStruct.$$int(undefined)),
              banana: S$RescriptStruct.field(o, "banana", S$RescriptStruct.$$int(undefined))
            };
    });

var userProfileStruct = S$RescriptStruct.object(function (o) {
      return {
              userID: S$RescriptStruct.field(o, "userID", S$RescriptStruct.$$int(undefined)),
              nickname: S$RescriptStruct.field(o, "nickname", S$RescriptStruct.string(undefined)),
              avatar: S$RescriptStruct.field(o, "avatar", S$RescriptStruct.string(undefined)),
              avatarFrame: S$RescriptStruct.field(o, "avatarFrame", S$RescriptStruct.string(undefined)),
              followingCount: S$RescriptStruct.field(o, "followingCount", S$RescriptStruct.$$int(undefined)),
              fansCount: S$RescriptStruct.field(o, "fansCount", S$RescriptStruct.$$int(undefined)),
              contributeCount: S$RescriptStruct.field(o, "contributeCount", S$RescriptStruct.$$int(undefined)),
              signature: S$RescriptStruct.field(o, "signature", S$RescriptStruct.string(undefined)),
              verifiedText: S$RescriptStruct.field(o, "verifiedText", S$RescriptStruct.string(undefined)),
              isJoinUpCollege: S$RescriptStruct.field(o, "isJoinUpCollege", S$RescriptStruct.bool(undefined)),
              isFollowing: S$RescriptStruct.field(o, "isFollowing", S$RescriptStruct.bool(undefined)),
              isFollowed: S$RescriptStruct.field(o, "isFollowed", S$RescriptStruct.bool(undefined))
            };
    });

var liveTypeStruct = S$RescriptStruct.object(function (o) {
      return {
              categoryID: S$RescriptStruct.field(o, "categoryID", S$RescriptStruct.$$int(undefined)),
              categoryName: S$RescriptStruct.field(o, "categoryName", S$RescriptStruct.string(undefined)),
              subCategoryID: S$RescriptStruct.field(o, "subCategoryID", S$RescriptStruct.$$int(undefined)),
              subCategoryName: S$RescriptStruct.field(o, "subCategoryName", S$RescriptStruct.string(undefined))
            };
    });

var userLiveInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              profile: S$RescriptStruct.field(o, "profile", userProfileStruct),
              liveType: S$RescriptStruct.field(o, "liveType", liveTypeStruct),
              liveID: S$RescriptStruct.field(o, "liveID", S$RescriptStruct.string(undefined)),
              streamName: S$RescriptStruct.field(o, "streamName", S$RescriptStruct.string(undefined)),
              title: S$RescriptStruct.field(o, "title", S$RescriptStruct.string(undefined)),
              liveStartTime: S$RescriptStruct.field(o, "liveStartTime", S$RescriptStruct.$$float(undefined)),
              portrait: S$RescriptStruct.field(o, "portrait", S$RescriptStruct.bool(undefined)),
              panoramic: S$RescriptStruct.field(o, "panoramic", S$RescriptStruct.bool(undefined)),
              liveCover: S$RescriptStruct.field(o, "liveCover", S$RescriptStruct.string(undefined)),
              onlineCount: S$RescriptStruct.field(o, "onlineCount", S$RescriptStruct.$$int(undefined)),
              likeCount: S$RescriptStruct.field(o, "likeCount", S$RescriptStruct.$$int(undefined)),
              hasFansClub: S$RescriptStruct.field(o, "hasFansClub", S$RescriptStruct.bool(undefined)),
              disableDanmakuShow: S$RescriptStruct.field(o, "disableDanmakuShow", S$RescriptStruct.bool(undefined)),
              paidShowUserBuyStatus: S$RescriptStruct.field(o, "paidShowUserBuyStatus", S$RescriptStruct.bool(undefined))
            };
    });

var getAllLiveListResponseStruct = S$RescriptStruct.array(userLiveInfoStruct);

var liveStatStruct = S$RescriptStruct.object(function (o) {
      return {
              duration: S$RescriptStruct.field(o, "duration", S$RescriptStruct.$$int(undefined)),
              maxPopularityValue: S$RescriptStruct.field(o, "maxPopularityValue", S$RescriptStruct.$$int(undefined)),
              watchCount: S$RescriptStruct.field(o, "watchCount", S$RescriptStruct.$$int(undefined)),
              diamondCount: S$RescriptStruct.field(o, "diamondCount", S$RescriptStruct.$$int(undefined)),
              commentCount: S$RescriptStruct.field(o, "commentCount", S$RescriptStruct.$$int(undefined)),
              bananaCount: S$RescriptStruct.field(o, "bananaCount", S$RescriptStruct.$$int(undefined))
            };
    });

var liveDetailStruct = S$RescriptStruct.object(function (o) {
      return {
              liveStartTime: S$RescriptStruct.field(o, "liveStartTime", S$RescriptStruct.$$float(undefined)),
              liveEndTime: S$RescriptStruct.field(o, "liveEndTime", S$RescriptStruct.$$float(undefined)),
              liveStat: S$RescriptStruct.field(o, "liveStat", liveStatStruct)
            };
    });

var dailyDataStruct = S$RescriptStruct.object(function (o) {
      return {
              date: S$RescriptStruct.field(o, "date", S$RescriptStruct.string(undefined)),
              liveTimes: S$RescriptStruct.field(o, "liveTimes", S$RescriptStruct.$$int(undefined)),
              liveStat: S$RescriptStruct.field(o, "liveStat", liveStatStruct)
            };
    });

var getLiveDataResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              beginDate: S$RescriptStruct.field(o, "beginDate", S$RescriptStruct.string(undefined)),
              endDate: S$RescriptStruct.field(o, "endDate", S$RescriptStruct.string(undefined)),
              overview: S$RescriptStruct.field(o, "overview", liveStatStruct),
              liveDetail: S$RescriptStruct.field(o, "liveDetail", S$RescriptStruct.dict(liveDetailStruct)),
              dailyData: S$RescriptStruct.field(o, "dailyData", S$RescriptStruct.$$null(S$RescriptStruct.array(dailyDataStruct)))
            };
    });

var getGiftListResponseStruct = S$RescriptStruct.array(giftDetailStruct);

var getUserInfoResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              userID: S$RescriptStruct.field(o, "userID", S$RescriptStruct.$$int(undefined)),
              nickname: S$RescriptStruct.field(o, "nickname", S$RescriptStruct.string(undefined)),
              avatar: S$RescriptStruct.field(o, "avatar", S$RescriptStruct.string(undefined)),
              avatarFrame: S$RescriptStruct.field(o, "avatarFrame", S$RescriptStruct.string(undefined)),
              followingCount: S$RescriptStruct.field(o, "followingCount", S$RescriptStruct.string(undefined)),
              fansCount: S$RescriptStruct.field(o, "fansCount", S$RescriptStruct.string(undefined)),
              contributeCount: S$RescriptStruct.field(o, "contributeCount", S$RescriptStruct.string(undefined)),
              signature: S$RescriptStruct.field(o, "signature", S$RescriptStruct.string(undefined)),
              verifiedText: S$RescriptStruct.field(o, "verifiedText", S$RescriptStruct.string(undefined)),
              isJoinUpCollege: S$RescriptStruct.field(o, "isJoinUpCollege", S$RescriptStruct.bool(undefined)),
              isFollowing: S$RescriptStruct.field(o, "isFollowing", S$RescriptStruct.bool(undefined)),
              isFollowed: S$RescriptStruct.field(o, "isFollowed", S$RescriptStruct.bool(undefined)),
              liveID: S$RescriptStruct.field(o, "liveID", S$RescriptStruct.string(undefined)),
              likeCount: S$RescriptStruct.field(o, "likeCount", S$RescriptStruct.$$int(undefined))
            };
    });

var getLiveCutInfoResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              status: S$RescriptStruct.field(o, "status", S$RescriptStruct.bool(undefined)),
              url: S$RescriptStruct.field(o, "url", S$RescriptStruct.string(undefined)),
              redirectURL: S$RescriptStruct.field(o, "redirectURL", S$RescriptStruct.string(undefined))
            };
    });

var managerStruct = S$RescriptStruct.object(function (o) {
      return {
              userInfo: S$RescriptStruct.field(o, "userInfo", userInfoStruct),
              customData: S$RescriptStruct.field(o, "customData", S$RescriptStruct.string(undefined)),
              online: S$RescriptStruct.field(o, "online", S$RescriptStruct.bool(undefined))
            };
    });

var getManagerListResponseStruct = S$RescriptStruct.array(managerStruct);

var kickHistoryStruct = S$RescriptStruct.object(function (o) {
      return {
              userID: S$RescriptStruct.field(o, "userID", S$RescriptStruct.$$int(undefined)),
              nickname: S$RescriptStruct.field(o, "nickname", S$RescriptStruct.string(undefined)),
              kickTime: S$RescriptStruct.field(o, "kickTime", S$RescriptStruct.$$float(undefined))
            };
    });

var getAllKickHistoryResponseStruct = S$RescriptStruct.array(kickHistoryStruct);

var medalStruct = S$RescriptStruct.object(function (o) {
      return {
              medalInfo: S$RescriptStruct.field(o, "medalInfo", medalInfoStruct),
              uperName: S$RescriptStruct.field(o, "uperName", S$RescriptStruct.string(undefined)),
              uperAvatar: S$RescriptStruct.field(o, "uperAvatar", S$RescriptStruct.string(undefined)),
              wearMedal: S$RescriptStruct.field(o, "wearMedal", S$RescriptStruct.bool(undefined)),
              friendshipDegree: S$RescriptStruct.field(o, "friendshipDegree", S$RescriptStruct.$$int(undefined)),
              joinClubTime: S$RescriptStruct.field(o, "joinClubTime", S$RescriptStruct.$$float(undefined)),
              currentDegreeLimit: S$RescriptStruct.field(o, "currentDegreeLimit", S$RescriptStruct.$$int(undefined)),
              medalCount: S$RescriptStruct.field(o, "medalCount", S$RescriptStruct.$$int(undefined))
            };
    });

var medalDegreeStruct = S$RescriptStruct.object(function (o) {
      return {
              uperID: S$RescriptStruct.field(o, "uperID", S$RescriptStruct.$$int(undefined)),
              giftDegree: S$RescriptStruct.field(o, "giftDegree", S$RescriptStruct.$$int(undefined)),
              giftDegreeLimit: S$RescriptStruct.field(o, "giftDegreeLimit", S$RescriptStruct.$$int(undefined)),
              peachDegree: S$RescriptStruct.field(o, "peachDegree", S$RescriptStruct.$$int(undefined)),
              peachDegreeLimit: S$RescriptStruct.field(o, "peachDegreeLimit", S$RescriptStruct.$$int(undefined)),
              liveWatchDegree: S$RescriptStruct.field(o, "liveWatchDegree", S$RescriptStruct.$$int(undefined)),
              liveWatchDegreeLimit: S$RescriptStruct.field(o, "liveWatchDegreeLimit", S$RescriptStruct.$$int(undefined)),
              bananaDegree: S$RescriptStruct.field(o, "bananaDegree", S$RescriptStruct.$$int(undefined)),
              bananaDegreeLimit: S$RescriptStruct.field(o, "bananaDegreeLimit", S$RescriptStruct.$$int(undefined))
            };
    });

var getMedalDetailResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              medal: S$RescriptStruct.field(o, "medal", medalStruct),
              medalDegree: S$RescriptStruct.field(o, "medalDegree", medalDegreeStruct),
              userRank: S$RescriptStruct.field(o, "userRank", S$RescriptStruct.string(undefined))
            };
    });

var getMedalListResponseStruct = S$RescriptStruct.$$null(S$RescriptStruct.array(medalStruct));

var userMedalInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              profile: S$RescriptStruct.field(o, "profile", userProfileStruct),
              friendshipDegree: S$RescriptStruct.field(o, "friendshipDegree", S$RescriptStruct.$$int(undefined)),
              level: S$RescriptStruct.field(o, "level", S$RescriptStruct.$$int(undefined))
            };
    });

var getMedalRankListResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              hasFansClub: S$RescriptStruct.field(o, "hasFansClub", S$RescriptStruct.bool(undefined)),
              rankList: S$RescriptStruct.field(o, "rankList", S$RescriptStruct.$$null(S$RescriptStruct.array(userMedalInfoStruct))),
              clubName: S$RescriptStruct.field(o, "clubName", S$RescriptStruct.string(undefined)),
              medalCount: S$RescriptStruct.field(o, "medalCount", S$RescriptStruct.$$int(undefined)),
              hasMedal: S$RescriptStruct.field(o, "hasMedal", S$RescriptStruct.bool(undefined)),
              userFriendshipDegree: S$RescriptStruct.field(o, "userFriendshipDegree", S$RescriptStruct.$$int(undefined)),
              userRank: S$RescriptStruct.field(o, "userRank", S$RescriptStruct.string(undefined))
            };
    });

var checkLiveAuthResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              liveAuth: S$RescriptStruct.field(o, "liveAuth", S$RescriptStruct.bool(undefined))
            };
    });

var getPushConfigResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              streamName: S$RescriptStruct.field(o, "streamName", S$RescriptStruct.string(undefined)),
              streamPullAddress: S$RescriptStruct.field(o, "streamPullAddress", S$RescriptStruct.string(undefined)),
              streamPushAddress: S$RescriptStruct.field(o, "streamPushAddress", S$RescriptStruct.$$null(S$RescriptStruct.array(S$RescriptStruct.string(undefined)))),
              panoramic: S$RescriptStruct.field(o, "panoramic", S$RescriptStruct.bool(undefined)),
              interval: S$RescriptStruct.field(o, "interval", S$RescriptStruct.$$int(undefined)),
              rtmpServer: S$RescriptStruct.field(o, "rtmpServer", S$RescriptStruct.string(undefined)),
              streamKey: S$RescriptStruct.field(o, "streamKey", S$RescriptStruct.string(undefined))
            };
    });

var getLiveStatusResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              liveID: S$RescriptStruct.field(o, "liveID", S$RescriptStruct.string(undefined)),
              streamName: S$RescriptStruct.field(o, "streamName", S$RescriptStruct.string(undefined)),
              title: S$RescriptStruct.field(o, "title", S$RescriptStruct.string(undefined)),
              liveCover: S$RescriptStruct.field(o, "liveCover", S$RescriptStruct.string(undefined)),
              liveStartTime: S$RescriptStruct.field(o, "liveStartTime", S$RescriptStruct.$$float(undefined)),
              panoramic: S$RescriptStruct.field(o, "panoramic", S$RescriptStruct.bool(undefined)),
              bizUnit: S$RescriptStruct.field(o, "bizUnit", S$RescriptStruct.string(undefined)),
              bizCustomData: S$RescriptStruct.field(o, "bizCustomData", S$RescriptStruct.string(undefined))
            };
    });

var transcodeInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              streamURL: S$RescriptStruct.field(o, "streamURL", streamURLStruct),
              resolution: S$RescriptStruct.field(o, "resolution", S$RescriptStruct.string(undefined)),
              frameRate: S$RescriptStruct.field(o, "frameRate", S$RescriptStruct.$$int(undefined)),
              template: S$RescriptStruct.field(o, "template", S$RescriptStruct.string(undefined))
            };
    });

var getTranscodeInfoResponseStruct = S$RescriptStruct.array(transcodeInfoStruct);

var stopLiveResponseStruct = S$RescriptStruct.object(function (o) {
      return {
              duration: S$RescriptStruct.field(o, "duration", S$RescriptStruct.$$int(undefined)),
              endReason: S$RescriptStruct.field(o, "endReason", S$RescriptStruct.string(undefined))
            };
    });

var danmuInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              sendTime: S$RescriptStruct.field(o, "sendTime", S$RescriptStruct.$$float(undefined)),
              userInfo: S$RescriptStruct.field(o, "userInfo", userInfoStruct)
            };
    });

var commentStruct = S$RescriptStruct.object(function (o) {
      return {
              danmuInfo: S$RescriptStruct.field(o, "danmuInfo", danmuInfoStruct),
              content: S$RescriptStruct.field(o, "content", S$RescriptStruct.string(undefined))
            };
    });

var throwBananaStruct = S$RescriptStruct.object(function (o) {
      return {
              danmuInfo: S$RescriptStruct.field(o, "danmuInfo", danmuInfoStruct),
              bananaCount: S$RescriptStruct.field(o, "bananaCount", S$RescriptStruct.$$int(undefined))
            };
    });

var drawPointStruct = S$RescriptStruct.object(function (o) {
      return {
              marginLeft: S$RescriptStruct.field(o, "marginLeft", S$RescriptStruct.$$int(undefined)),
              marginTop: S$RescriptStruct.field(o, "marginTop", S$RescriptStruct.$$int(undefined)),
              scaleRatio: S$RescriptStruct.field(o, "scaleRatio", S$RescriptStruct.$$int(undefined)),
              handup: S$RescriptStruct.field(o, "handup", S$RescriptStruct.bool(undefined)),
              pointWidth: S$RescriptStruct.field(o, "pointWidth", S$RescriptStruct.$$int(undefined)),
              pointHeight: S$RescriptStruct.field(o, "pointHeight", S$RescriptStruct.$$int(undefined))
            };
    });

var drawGiftInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              screenWidth: S$RescriptStruct.field(o, "screenWidth", S$RescriptStruct.$$int(undefined)),
              screenHeight: S$RescriptStruct.field(o, "screenHeight", S$RescriptStruct.$$int(undefined)),
              drawPoint: S$RescriptStruct.field(o, "drawPoint", S$RescriptStruct.$$null(S$RescriptStruct.array(drawPointStruct)))
            };
    });

var giftStruct = S$RescriptStruct.object(function (o) {
      return {
              danmuInfo: S$RescriptStruct.field(o, "danmuInfo", danmuInfoStruct),
              giftDetail: S$RescriptStruct.field(o, "giftDetail", giftDetailStruct),
              count: S$RescriptStruct.field(o, "count", S$RescriptStruct.$$int(undefined)),
              combo: S$RescriptStruct.field(o, "combo", S$RescriptStruct.$$int(undefined)),
              value: S$RescriptStruct.field(o, "value", S$RescriptStruct.$$int(undefined)),
              comboID: S$RescriptStruct.field(o, "comboID", S$RescriptStruct.string(undefined)),
              slotDisplayDuration: S$RescriptStruct.field(o, "slotDisplayDuration", S$RescriptStruct.$$int(undefined)),
              expireDuration: S$RescriptStruct.field(o, "expireDuration", S$RescriptStruct.$$int(undefined)),
              drawGiftInfo: S$RescriptStruct.field(o, "drawGiftInfo", drawGiftInfoStruct)
            };
    });

var richTextUserInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              userInfo: S$RescriptStruct.field(o, "userInfo", userInfoStruct),
              color: S$RescriptStruct.field(o, "color", S$RescriptStruct.string(undefined))
            };
    });

var richTextPlainStruct = S$RescriptStruct.object(function (o) {
      return {
              text: S$RescriptStruct.field(o, "text", S$RescriptStruct.string(undefined)),
              color: S$RescriptStruct.field(o, "color", S$RescriptStruct.string(undefined))
            };
    });

var richTextImageStruct = S$RescriptStruct.object(function (o) {
      return {
              pictures: S$RescriptStruct.field(o, "pictures", S$RescriptStruct.array(S$RescriptStruct.string(undefined))),
              alternativeText: S$RescriptStruct.field(o, "alternativeText", S$RescriptStruct.string(undefined)),
              alternativeColor: S$RescriptStruct.field(o, "alternativeColor", S$RescriptStruct.string(undefined))
            };
    });

var richTextSegmentStruct = S$RescriptStruct.union([
      S$RescriptStruct.object(function (o) {
            S$RescriptStruct.field(o, "type", S$RescriptStruct.literal({
                      TAG: "Int",
                      _0: 1900
                    }));
            return {
                    type: "UserInfo",
                    segment: S$RescriptStruct.field(o, "segment", richTextUserInfoStruct)
                  };
          }),
      S$RescriptStruct.object(function (o) {
            S$RescriptStruct.field(o, "type", S$RescriptStruct.literal({
                      TAG: "Int",
                      _0: 1901
                    }));
            return {
                    type: "Plain",
                    segment: S$RescriptStruct.field(o, "segment", richTextPlainStruct)
                  };
          }),
      S$RescriptStruct.object(function (o) {
            S$RescriptStruct.field(o, "type", S$RescriptStruct.literal({
                      TAG: "Int",
                      _0: 1902
                    }));
            return {
                    type: "Image",
                    segment: S$RescriptStruct.field(o, "segment", richTextImageStruct)
                  };
          })
    ]);

var richTextStruct = S$RescriptStruct.object(function (o) {
      return {
              sendTime: S$RescriptStruct.field(o, "sendTime", S$RescriptStruct.$$float(undefined)),
              segments: S$RescriptStruct.field(o, "segments", S$RescriptStruct.array(richTextSegmentStruct))
            };
    });

var joinClubStruct = S$RescriptStruct.object(function (o) {
      return {
              joinTime: S$RescriptStruct.field(o, "joinTime", S$RescriptStruct.$$float(undefined)),
              fansInfo: S$RescriptStruct.field(o, "fansInfo", userInfoStruct),
              uperInfo: S$RescriptStruct.field(o, "uperInfo", userInfoStruct)
            };
    });

var shareLiveStruct = S$RescriptStruct.object(function (o) {
      return {
              danmuInfo: S$RescriptStruct.field(o, "danmuInfo", danmuInfoStruct),
              sharePlatform: S$RescriptStruct.field(o, "sharePlatform", S$RescriptStruct.variant(S$RescriptStruct.$$int(undefined), (function (v) {
                          return AcLive__Message.intToSharePlatformType(v);
                        }))),
              sharePlatformIcon: S$RescriptStruct.field(o, "sharePlatformIcon", S$RescriptStruct.string(undefined))
            };
    });

var bananaCountStruct = S$RescriptStruct.object(function (o) {
      return {
              bananaCount: S$RescriptStruct.field(o, "bananaCount", S$RescriptStruct.string(undefined))
            };
    });

var displayInfoStruct = S$RescriptStruct.object(function (o) {
      return {
              watchingCount: S$RescriptStruct.field(o, "watchingCount", S$RescriptStruct.string(undefined)),
              likeCount: S$RescriptStruct.field(o, "likeCount", S$RescriptStruct.string(undefined)),
              likeDelta: S$RescriptStruct.field(o, "likeDelta", S$RescriptStruct.$$int(undefined))
            };
    });

var watchingUserStruct$1 = S$RescriptStruct.object(function (o) {
      return {
              userInfo: S$RescriptStruct.field(o, "userInfo", userInfoStruct),
              anonymousUser: S$RescriptStruct.field(o, "anonymousUser", S$RescriptStruct.bool(undefined)),
              displaySendAmount: S$RescriptStruct.field(o, "displaySendAmount", S$RescriptStruct.string(undefined)),
              customData: S$RescriptStruct.field(o, "customData", S$RescriptStruct.string(undefined))
            };
    });

var topUsersStruct = S$RescriptStruct.array(watchingUserStruct$1);

var recentCommentsStruct = S$RescriptStruct.array(commentStruct);

var redpackStruct = S$RescriptStruct.object(function (o) {
      return {
              userInfo: S$RescriptStruct.field(o, "userInfo", userInfoStruct),
              displayStatus: S$RescriptStruct.field(o, "displayStatus", S$RescriptStruct.variant(S$RescriptStruct.$$int(undefined), (function (v) {
                          return AcLive__Message.intToRedpackDisplayStatus(v);
                        }))),
              grabBeginTime: S$RescriptStruct.field(o, "grabBeginTime", S$RescriptStruct.$$float(undefined)),
              getTokenLatestTime: S$RescriptStruct.field(o, "getTokenLatestTime", S$RescriptStruct.$$float(undefined)),
              redpackID: S$RescriptStruct.field(o, "redpackID", S$RescriptStruct.string(undefined)),
              redpackBizUnit: S$RescriptStruct.field(o, "redpackBizUnit", S$RescriptStruct.string(undefined)),
              redpackAmount: S$RescriptStruct.field(o, "redpackAmount", S$RescriptStruct.$$int(undefined)),
              settleBeginTime: S$RescriptStruct.field(o, "settleBeginTime", S$RescriptStruct.$$float(undefined))
            };
    });

var redpackListStruct = S$RescriptStruct.array(redpackStruct);

var chatCallStruct = S$RescriptStruct.object(function (o) {
      return {
              chatID: S$RescriptStruct.field(o, "chatID", S$RescriptStruct.string(undefined)),
              liveID: S$RescriptStruct.field(o, "liveID", S$RescriptStruct.string(undefined)),
              callTime: S$RescriptStruct.field(o, "callTime", S$RescriptStruct.$$float(undefined))
            };
    });

var chatAcceptStruct = S$RescriptStruct.object(function (o) {
      return {
              chatID: S$RescriptStruct.field(o, "chatID", S$RescriptStruct.string(undefined)),
              mediaType: S$RescriptStruct.field(o, "mediaType", S$RescriptStruct.variant(S$RescriptStruct.$$int(undefined), (function (v) {
                          return AcLive__Message.intToChatMediaType(v);
                        }))),
              signalInfo: S$RescriptStruct.field(o, "signalInfo", S$RescriptStruct.string(undefined))
            };
    });

var chatReadyStruct = S$RescriptStruct.object(function (o) {
      return {
              chatID: S$RescriptStruct.field(o, "chatID", S$RescriptStruct.string(undefined)),
              guest: S$RescriptStruct.field(o, "guest", userInfoStruct),
              mediaType: S$RescriptStruct.field(o, "mediaType", S$RescriptStruct.variant(S$RescriptStruct.$$int(undefined), (function (v) {
                          return AcLive__Message.intToChatMediaType(v);
                        })))
            };
    });

var chatEndStruct = S$RescriptStruct.object(function (o) {
      return {
              chatID: S$RescriptStruct.field(o, "chatID", S$RescriptStruct.string(undefined)),
              endType: S$RescriptStruct.field(o, "endType", S$RescriptStruct.variant(S$RescriptStruct.$$int(undefined), (function (v) {
                          return AcLive__Message.intToChatEndType(v);
                        })))
            };
    });

var danmakuStopErrorStruct = S$RescriptStruct.object(function (o) {
      return {
              error: S$RescriptStruct.field(o, "error", S$RescriptStruct.string(undefined))
            };
    });

var kickedOutStruct = S$RescriptStruct.object(function (o) {
      return {
              kickedOutReason: S$RescriptStruct.field(o, "kickedOutReason", S$RescriptStruct.string(undefined))
            };
    });

var violationAlertStruct = S$RescriptStruct.object(function (o) {
      return {
              violationContent: S$RescriptStruct.field(o, "violationContent", S$RescriptStruct.string(undefined))
            };
    });

var managerStateStruct = S$RescriptStruct.object(function (o) {
      return {
              managerState: S$RescriptStruct.field(o, "managerState", S$RescriptStruct.variant(S$RescriptStruct.$$int(undefined), (function (v) {
                          return AcLive__Message.intToManagerStateType(v);
                        })))
            };
    });

var responseModelStruct = S$RescriptStruct.object(function (o) {
      return {
              type_: S$RescriptStruct.field(o, "type", responseTypeStruct),
              liverUID: S$RescriptStruct.field(o, "liverUID", S$RescriptStruct.default(S$RescriptStruct.option(S$RescriptStruct.$$int(undefined)), (function () {
                          return 0;
                        }))),
              requestID: S$RescriptStruct.field(o, "requestID", S$RescriptStruct.default(S$RescriptStruct.option(S$RescriptStruct.string(undefined)), (function () {
                          return "";
                        }))),
              result: S$RescriptStruct.field(o, "result", S$RescriptStruct.default(S$RescriptStruct.option(responseResultStruct), (function () {
                          return {
                                  TAG: "UnknownResult",
                                  _0: 0
                                };
                        }))),
              error: S$RescriptStruct.field(o, "error", S$RescriptStruct.default(S$RescriptStruct.option(S$RescriptStruct.string(undefined)), (function () {
                          return "";
                        })))
            };
    });

function makeEmptyResponseData(param, constructor) {
  var result = param.result;
  var requestID = param.requestID;
  if (typeof result !== "object") {
    if (result === "Success") {
      return constructor({
                  TAG: "Ok",
                  _0: {
                    requestID: requestID
                  }
                });
    } else {
      return constructor({
                  TAG: "Error",
                  _0: {
                    requestID: requestID,
                    result: result,
                    error: param.error
                  }
                });
    }
  } else {
    return S$RescriptStruct.fail(undefined, "unknown result type: " + result._0.toString());
  }
}

function makeResponseData(data, param, struct, constructor) {
  var result = param.result;
  var requestID = param.requestID;
  if (typeof result === "object") {
    return S$RescriptStruct.fail(undefined, "unknown result type: " + result._0.toString());
  }
  if (result !== "Success") {
    return constructor({
                TAG: "Error",
                _0: {
                  requestID: requestID,
                  result: result,
                  error: param.error
                }
              });
  }
  var d = S$RescriptStruct.parseAnyWith(data, S$RescriptStruct.object(function (o) {
            return S$RescriptStruct.field(o, "data", struct);
          }));
  if (d.TAG !== "Ok") {
    return S$RescriptStruct.advancedFail(d._0);
  }
  var message_data = d._0;
  var message = {
    requestID: requestID,
    data: message_data
  };
  return constructor({
              TAG: "Ok",
              _0: message
            });
}

function makeDanmakuData(data, param, struct, constructor) {
  var liverUID = param.liverUID;
  if (liverUID <= 0) {
    return S$RescriptStruct.fail(undefined, "missing liverUID or illegal liverUID");
  }
  var d = S$RescriptStruct.parseAnyWith(data, S$RescriptStruct.object(function (o) {
            return S$RescriptStruct.field(o, "data", struct);
          }));
  if (d.TAG === "Ok") {
    return constructor({
                liverUID: liverUID,
                data: d._0
              });
  } else {
    return S$RescriptStruct.advancedFail(d._0);
  }
}

var responseDataStruct = S$RescriptStruct.custom("responseData", (function (data) {
        var model = S$RescriptStruct.parseAnyWith(data, responseModelStruct);
        if (model.TAG !== "Ok") {
          return S$RescriptStruct.advancedFail(model._0);
        }
        var model$1 = model._0;
        var v = model$1.type_;
        if (typeof v === "object") {
          return S$RescriptStruct.fail(undefined, "unsupported message type: " + v._0.toString());
        }
        switch (v) {
          case 2 :
              return makeResponseData(data, model$1, loginResponseStruct, (function (v) {
                            return {
                                    TAG: 2,
                                    _0: v
                                  };
                          }));
          case 3 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 3,
                                    _0: v
                                  };
                          }));
          case 4 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 4,
                                    _0: v
                                  };
                          }));
          case 6 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 6,
                                    _0: v
                                  };
                          }));
          case 100 :
              var constructor = function (v) {
                return {
                        TAG: 100,
                        _0: v
                      };
              };
              var result = model$1.result;
              var requestID = model$1.requestID;
              if (typeof result === "object") {
                return S$RescriptStruct.fail(undefined, "unknown result type: " + result._0.toString());
              }
              if (result !== "Success") {
                return constructor({
                            TAG: "Error",
                            _0: {
                              requestID: requestID,
                              result: result,
                              error: model$1.error
                            }
                          });
              }
              var e = S$RescriptStruct.parseAnyWith(data, S$RescriptStruct.object(function (o) {
                        return S$RescriptStruct.field(o, "data", S$RescriptStruct.option(getDanmakuResponse));
                      }));
              if (e.TAG !== "Ok") {
                return S$RescriptStruct.advancedFail(e._0);
              }
              var d = e._0;
              if (d !== undefined) {
                return constructor({
                            TAG: "Ok",
                            _0: {
                              requestID: requestID,
                              data: Caml_option.some(Caml_option.valFromOption(d))
                            }
                          });
              } else {
                return constructor({
                            TAG: "Ok",
                            _0: {
                              requestID: requestID
                            }
                          });
              }
          case 101 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 101,
                                    _0: v
                                  };
                          }));
          case 102 :
              return makeResponseData(data, model$1, getWatchingListResponseStruct, (function (v) {
                            return {
                                    TAG: 102,
                                    _0: v
                                  };
                          }));
          case 103 :
              return makeResponseData(data, model$1, getBillboardResponseStruct, (function (v) {
                            return {
                                    TAG: 103,
                                    _0: v
                                  };
                          }));
          case 104 :
              return makeResponseData(data, model$1, getSummaryResponseStruct, (function (v) {
                            return {
                                    TAG: 104,
                                    _0: v
                                  };
                          }));
          case 105 :
              return makeResponseData(data, model$1, getLuckListResponseStruct, (function (v) {
                            return {
                                    TAG: 105,
                                    _0: v
                                  };
                          }));
          case 106 :
              return makeResponseData(data, model$1, getPlaybackResponseStruct, (function (v) {
                            return {
                                    TAG: 106,
                                    _0: v
                                  };
                          }));
          case 107 :
              return makeResponseData(data, model$1, getAllGiftListResponseStruct, (function (v) {
                            return {
                                    TAG: 107,
                                    _0: v
                                  };
                          }));
          case 108 :
              return makeResponseData(data, model$1, getWalletBalanceResponseStruct, (function (v) {
                            return {
                                    TAG: 108,
                                    _0: v
                                  };
                          }));
          case 109 :
              return makeResponseData(data, model$1, userLiveInfoStruct, (function (v) {
                            return {
                                    TAG: 109,
                                    _0: v
                                  };
                          }));
          case 110 :
              return makeResponseData(data, model$1, getAllLiveListResponseStruct, (function (v) {
                            return {
                                    TAG: 110,
                                    _0: v
                                  };
                          }));
          case 112 :
              return makeResponseData(data, model$1, getLiveDataResponseStruct, (function (v) {
                            return {
                                    TAG: 112,
                                    _0: v
                                  };
                          }));
          case 114 :
              return makeResponseData(data, model$1, getGiftListResponseStruct, (function (v) {
                            return {
                                    TAG: 114,
                                    _0: v
                                  };
                          }));
          case 115 :
              return makeResponseData(data, model$1, getUserInfoResponseStruct, (function (v) {
                            return {
                                    TAG: 115,
                                    _0: v
                                  };
                          }));
          case 116 :
              return makeResponseData(data, model$1, getLiveCutInfoResponseStruct, (function (v) {
                            return {
                                    TAG: 116,
                                    _0: v
                                  };
                          }));
          case 200 :
              return makeResponseData(data, model$1, getManagerListResponseStruct, (function (v) {
                            return {
                                    TAG: 200,
                                    _0: v
                                  };
                          }));
          case 201 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 201,
                                    _0: v
                                  };
                          }));
          case 202 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 202,
                                    _0: v
                                  };
                          }));
          case 203 :
              return makeResponseData(data, model$1, getAllKickHistoryResponseStruct, (function (v) {
                            return {
                                    TAG: 203,
                                    _0: v
                                  };
                          }));
          case 204 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 204,
                                    _0: v
                                  };
                          }));
          case 205 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 205,
                                    _0: v
                                  };
                          }));
          case 300 :
              return makeResponseData(data, model$1, getMedalDetailResponseStruct, (function (v) {
                            return {
                                    TAG: 300,
                                    _0: v
                                  };
                          }));
          case 301 :
              return makeResponseData(data, model$1, getMedalListResponseStruct, (function (v) {
                            return {
                                    TAG: 301,
                                    _0: v
                                  };
                          }));
          case 302 :
              return makeResponseData(data, model$1, getMedalRankListResponseStruct, (function (v) {
                            return {
                                    TAG: 302,
                                    _0: v
                                  };
                          }));
          case 303 :
              return makeResponseData(data, model$1, medalStruct, (function (v) {
                            return {
                                    TAG: 303,
                                    _0: v
                                  };
                          }));
          case 304 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 304,
                                    _0: v
                                  };
                          }));
          case 305 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 305,
                                    _0: v
                                  };
                          }));
          case 900 :
              return makeResponseData(data, model$1, checkLiveAuthResponseStruct, (function (v) {
                            return {
                                    TAG: 900,
                                    _0: v
                                  };
                          }));
          case 901 :
              return makeResponseData(data, model$1, liveTypeStruct, (function (v) {
                            return {
                                    TAG: 901,
                                    _0: v
                                  };
                          }));
          case 902 :
              return makeResponseData(data, model$1, getPushConfigResponseStruct, (function (v) {
                            return {
                                    TAG: 902,
                                    _0: v
                                  };
                          }));
          case 903 :
              return makeResponseData(data, model$1, getLiveStatusResponseStruct, (function (v) {
                            return {
                                    TAG: 903,
                                    _0: v
                                  };
                          }));
          case 904 :
              return makeResponseData(data, model$1, getTranscodeInfoResponseStruct, (function (v) {
                            return {
                                    TAG: 904,
                                    _0: v
                                  };
                          }));
          case 905 :
              return makeResponseData(data, model$1, liveIDStruct, (function (v) {
                            return {
                                    TAG: 905,
                                    _0: v
                                  };
                          }));
          case 906 :
              return makeResponseData(data, model$1, stopLiveResponseStruct, (function (v) {
                            return {
                                    TAG: 906,
                                    _0: v
                                  };
                          }));
          case 907 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 907,
                                    _0: v
                                  };
                          }));
          case 908 :
              return makeResponseData(data, model$1, canCutLiveStruct, (function (v) {
                            return {
                                    TAG: 908,
                                    _0: v
                                  };
                          }));
          case 909 :
              return makeEmptyResponseData(model$1, (function (v) {
                            return {
                                    TAG: 909,
                                    _0: v
                                  };
                          }));
          case 1 :
              return 1;
          case 5 :
              return makeResponseData(data, model$1, forwardDataStruct, (function (v) {
                            return {
                                    TAG: 5,
                                    _0: v
                                  };
                          }));
          case 1000 :
              return makeDanmakuData(data, model$1, commentStruct, (function (v) {
                            return {
                                    TAG: 1000,
                                    _0: v
                                  };
                          }));
          case 1001 :
              return makeDanmakuData(data, model$1, danmuInfoStruct, (function (v) {
                            return {
                                    TAG: 1001,
                                    _0: v
                                  };
                          }));
          case 1002 :
              return makeDanmakuData(data, model$1, danmuInfoStruct, (function (v) {
                            return {
                                    TAG: 1002,
                                    _0: v
                                  };
                          }));
          case 1003 :
              return makeDanmakuData(data, model$1, danmuInfoStruct, (function (v) {
                            return {
                                    TAG: 1003,
                                    _0: v
                                  };
                          }));
          case 1004 :
              return makeDanmakuData(data, model$1, throwBananaStruct, (function (v) {
                            return {
                                    TAG: 1004,
                                    _0: v
                                  };
                          }));
          case 1005 :
              return makeDanmakuData(data, model$1, giftStruct, (function (v) {
                            return {
                                    TAG: 1005,
                                    _0: v
                                  };
                          }));
          case 1006 :
              return makeDanmakuData(data, model$1, richTextStruct, (function (v) {
                            return {
                                    TAG: 1006,
                                    _0: v
                                  };
                          }));
          case 1007 :
              return makeDanmakuData(data, model$1, joinClubStruct, (function (v) {
                            return {
                                    TAG: 1007,
                                    _0: v
                                  };
                          }));
          case 1008 :
              return makeDanmakuData(data, model$1, shareLiveStruct, (function (v) {
                            return {
                                    TAG: 1008,
                                    _0: v
                                  };
                          }));
          case 2000 :
              var constructor$1 = function (v) {
                return {
                        TAG: 2000,
                        _0: v
                      };
              };
              var liverUID = model$1.liverUID;
              if (liverUID <= 0) {
                return S$RescriptStruct.fail(undefined, "missing liverUID or illegal liverUID");
              }
              var danmaku = {
                liverUID: liverUID
              };
              return constructor$1(danmaku);
          case 2001 :
              return makeDanmakuData(data, model$1, bananaCountStruct, (function (v) {
                            return {
                                    TAG: 2001,
                                    _0: v
                                  };
                          }));
          case 2002 :
              return makeDanmakuData(data, model$1, displayInfoStruct, (function (v) {
                            return {
                                    TAG: 2002,
                                    _0: v
                                  };
                          }));
          case 2003 :
              return makeDanmakuData(data, model$1, topUsersStruct, (function (v) {
                            return {
                                    TAG: 2003,
                                    _0: v
                                  };
                          }));
          case 2004 :
              return makeDanmakuData(data, model$1, recentCommentsStruct, (function (v) {
                            return {
                                    TAG: 2004,
                                    _0: v
                                  };
                          }));
          case 2005 :
              return makeDanmakuData(data, model$1, redpackListStruct, (function (v) {
                            return {
                                    TAG: 2005,
                                    _0: v
                                  };
                          }));
          case 2100 :
              return makeDanmakuData(data, model$1, chatCallStruct, (function (v) {
                            return {
                                    TAG: 2100,
                                    _0: v
                                  };
                          }));
          case 2101 :
              return makeDanmakuData(data, model$1, chatAcceptStruct, (function (v) {
                            return {
                                    TAG: 2101,
                                    _0: v
                                  };
                          }));
          case 2102 :
              return makeDanmakuData(data, model$1, chatReadyStruct, (function (v) {
                            return {
                                    TAG: 2102,
                                    _0: v
                                  };
                          }));
          case 2103 :
              return makeDanmakuData(data, model$1, chatEndStruct, (function (v) {
                            return {
                                    TAG: 2103,
                                    _0: v
                                  };
                          }));
          case 2999 :
              return makeDanmakuData(data, model$1, danmakuStopErrorStruct, (function (v) {
                            return {
                                    TAG: 2999,
                                    _0: v
                                  };
                          }));
          case 3000 :
              return makeDanmakuData(data, model$1, kickedOutStruct, (function (v) {
                            return {
                                    TAG: 3000,
                                    _0: v
                                  };
                          }));
          case 3001 :
              return makeDanmakuData(data, model$1, violationAlertStruct, (function (v) {
                            return {
                                    TAG: 3001,
                                    _0: v
                                  };
                          }));
          case 3002 :
              return makeDanmakuData(data, model$1, managerStateStruct, (function (v) {
                            return {
                                    TAG: 3002,
                                    _0: v
                                  };
                          }));
          
        }
      }), undefined, undefined, undefined);

function parseResponse(response) {
  return S$RescriptStruct.parseJsonWith(response, responseDataStruct);
}

export {
  serializeRequest ,
  parseResponse ,
}
/* loginRequestStruct Not a pure module */
