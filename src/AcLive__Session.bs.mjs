// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Uuid from "uuid";
import * as Core__Dict from "@rescript/core/src/Core__Dict.bs.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as AcLive__Struct from "./data/AcLive__Struct.bs.mjs";
import * as AcLive__Message from "./data/AcLive__Message.bs.mjs";
import * as AcLive__Subject from "./AcLive__Subject.bs.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var NotConnectBackend = /* @__PURE__ */Caml_exceptions.create("AcLive__Session.NotConnectBackend");

var AsyncRequestTimeout = /* @__PURE__ */Caml_exceptions.create("AcLive__Session.AsyncRequestTimeout");

var ResponseError = /* @__PURE__ */Caml_exceptions.create("AcLive__Session.ResponseError");

function setResponse(subject, v) {
  subject.set(v, AcLive__Message.getResponseRequestId(v));
}

function setEmptyResponse(subject, v) {
  subject.set(v, AcLive__Message.getEmptyResponseRequestId(v));
}

function setDanmaku(subject, v) {
  subject.set(v, v.liverUID.toString());
}

function fixKeyCallback(subject, key, onData) {
  return subject.subcribe((function (v, param) {
                onData(v);
              }), key);
}

function responseCallback(subject, key, onData, onError) {
  return subject.subcribe((function (value, param) {
                if (value.TAG === "Ok") {
                  return onData(value._0);
                } else if (onError !== undefined) {
                  return onError(value._0);
                } else {
                  return ;
                }
              }), key);
}

function danmakuCallback(subject, key, onData) {
  return subject.subcribe((function (v, param) {
                onData(v);
              }), Core__Option.map(key, (function (prim) {
                    return prim.toString();
                  })));
}

function make($$WebSocket, $staropt$star) {
  var config = $staropt$star !== undefined ? $staropt$star : ({
        websocketUrl: "ws://localhost:15368",
        autoReconnect: true,
        asyncRequestTimeout: 10000
      });
  var id = {
    contents: 0
  };
  var ws = {
    contents: undefined
  };
  var isReConnecting = {
    contents: false
  };
  var unitSubject = AcLive__Subject.make();
  var websocketErrorSubject = AcLive__Subject.make();
  var jsonErrorSubject = AcLive__Subject.make();
  var loginSubject = AcLive__Subject.make();
  var setClientIDSubject = AcLive__Subject.make();
  var requestForwardSubject = AcLive__Subject.make();
  var receiveForwardSubject = AcLive__Subject.make();
  var setTokenSubject = AcLive__Subject.make();
  var getDanmakuSubject = AcLive__Subject.make();
  var stopDanmakuSubject = AcLive__Subject.make();
  var getWatchingListSubject = AcLive__Subject.make();
  var getBillboardSubject = AcLive__Subject.make();
  var getSummarySubject = AcLive__Subject.make();
  var getLuckListSubject = AcLive__Subject.make();
  var getPlaybackSubject = AcLive__Subject.make();
  var getAllGiftListSubject = AcLive__Subject.make();
  var getWalletBalanceSubject = AcLive__Subject.make();
  var getUserLiveInfoSubject = AcLive__Subject.make();
  var getAllLiveListSubject = AcLive__Subject.make();
  var getLiveDataSubject = AcLive__Subject.make();
  var getGiftListSubject = AcLive__Subject.make();
  var getUserInfoSubject = AcLive__Subject.make();
  var getLiveCutInfoSubject = AcLive__Subject.make();
  var getManagerListSubject = AcLive__Subject.make();
  var addManagerSubject = AcLive__Subject.make();
  var deleteManagerSubject = AcLive__Subject.make();
  var getAllKickHistorySubject = AcLive__Subject.make();
  var managerKickSubject = AcLive__Subject.make();
  var authorKickSubject = AcLive__Subject.make();
  var getMedalDetailSubject = AcLive__Subject.make();
  var getMedalListSubject = AcLive__Subject.make();
  var getMedalRankListSubject = AcLive__Subject.make();
  var getUserMedalSubject = AcLive__Subject.make();
  var wearMedalSubject = AcLive__Subject.make();
  var cancelWearMedalSubject = AcLive__Subject.make();
  var checkLiveAuthSubject = AcLive__Subject.make();
  var getLiveTypeListSubject = AcLive__Subject.make();
  var getPushConfigSubject = AcLive__Subject.make();
  var getLiveStatusSubject = AcLive__Subject.make();
  var getTranscodeInfoSubject = AcLive__Subject.make();
  var startLiveSubject = AcLive__Subject.make();
  var stopLiveSubject = AcLive__Subject.make();
  var changeTitleAndCoverSubject = AcLive__Subject.make();
  var getLiveCutStatusSubject = AcLive__Subject.make();
  var setLiveCutStatusSubject = AcLive__Subject.make();
  var commentSubject = AcLive__Subject.make();
  var likeSubject = AcLive__Subject.make();
  var enterRoomSubject = AcLive__Subject.make();
  var followAuthorSubject = AcLive__Subject.make();
  var throwBananaSubject = AcLive__Subject.make();
  var giftSubject = AcLive__Subject.make();
  var richTextSubject = AcLive__Subject.make();
  var joinClubSubject = AcLive__Subject.make();
  var shareLiveSubject = AcLive__Subject.make();
  var danmakuStopSubject = AcLive__Subject.make();
  var bananaCountSubject = AcLive__Subject.make();
  var displayInfoSubject = AcLive__Subject.make();
  var topUsersSubject = AcLive__Subject.make();
  var recentCommentsSubject = AcLive__Subject.make();
  var redpackListSubject = AcLive__Subject.make();
  var chatCallSubject = AcLive__Subject.make();
  var chatAcceptSubject = AcLive__Subject.make();
  var chatReadySubject = AcLive__Subject.make();
  var chatEndSubject = AcLive__Subject.make();
  var danmakuStopErrorStopSubject = AcLive__Subject.make();
  var kickedOutSubject = AcLive__Subject.make();
  var violationAlertSubject = AcLive__Subject.make();
  var managerStateSubject = AcLive__Subject.make();
  var uuidDict = {};
  var isConnecting = function () {
    var w = ws.contents;
    if (w !== undefined) {
      return $$WebSocket.isOpen(Caml_option.valFromOption(w));
    } else {
      return false;
    }
  };
  var disconnect = function () {
    var w = ws.contents;
    if (w !== undefined) {
      ws.contents = undefined;
      $$WebSocket.close(Caml_option.valFromOption(w));
      isReConnecting.contents = false;
      return ;
    }
    
  };
  var connect = function () {
    if (!(!isConnecting() && !isReConnecting.contents)) {
      return ;
    }
    id.contents = id.contents + 1 | 0;
    var wid = id.contents;
    var w = $$WebSocket.make(config.websocketUrl);
    ws.contents = Caml_option.some(w);
    var heartbeatInterval = {
      contents: undefined
    };
    var cleanupFn = {
      contents: undefined
    };
    var cleanup = function () {
      var id$1 = heartbeatInterval.contents;
      if (id$1 !== undefined) {
        clearInterval(Caml_option.valFromOption(id$1));
        heartbeatInterval.contents = undefined;
      }
      var fn = cleanupFn.contents;
      if (fn !== undefined) {
        fn();
        cleanupFn.contents = undefined;
      }
      if (wid === id.contents && Core__Option.isSome(ws.contents)) {
        disconnect();
        if (config.autoReconnect) {
          isReConnecting.contents = true;
          setTimeout((function () {
                  isReConnecting.contents = false;
                  connect();
                }), 5000);
          return ;
        } else {
          return ;
        }
      }
      
    };
    var openListener = function (param) {
      heartbeatInterval.contents = Caml_option.some(setInterval((function () {
                  $$WebSocket.send(w, AcLive__Message.heartbeat);
                }), 5000));
      unitSubject.set(undefined, "websocketOpen");
    };
    var closeListener = function (param) {
      unitSubject.set(undefined, "websocketClose");
      cleanup();
    };
    var errorListener = function (e) {
      websocketErrorSubject.set({
            error: e.error,
            message: e.message
          }, "websocketError");
      cleanup();
    };
    $$WebSocket.addOpenListener(w, openListener);
    $$WebSocket.addCloseListener(w, closeListener);
    $$WebSocket.addErrorListener(w, errorListener);
    var messageListener = function (param) {
      var data = param.data;
      var response = AcLive__Struct.parseResponse(data);
      if (response.TAG !== "Ok") {
        return jsonErrorSubject.set({
                    json: data,
                    error: response._0
                  }, "jsonError");
      }
      var response$1 = response._0;
      if (typeof response$1 !== "object") {
        return unitSubject.set(undefined, "heartbeat");
      }
      switch (response$1.TAG) {
        case 2 :
            return setResponse(loginSubject, response$1._0);
        case 3 :
            return setEmptyResponse(setClientIDSubject, response$1._0);
        case 4 :
            return setEmptyResponse(requestForwardSubject, response$1._0);
        case 5 :
            return setResponse(receiveForwardSubject, response$1._0);
        case 6 :
            return setEmptyResponse(setTokenSubject, response$1._0);
        case 100 :
            return setResponse(getDanmakuSubject, response$1._0);
        case 101 :
            return setResponse(stopDanmakuSubject, response$1._0);
        case 102 :
            return setResponse(getWatchingListSubject, response$1._0);
        case 103 :
            return setResponse(getBillboardSubject, response$1._0);
        case 104 :
            return setResponse(getSummarySubject, response$1._0);
        case 105 :
            return setResponse(getLuckListSubject, response$1._0);
        case 106 :
            return setResponse(getPlaybackSubject, response$1._0);
        case 107 :
            return setResponse(getAllGiftListSubject, response$1._0);
        case 108 :
            return setResponse(getWalletBalanceSubject, response$1._0);
        case 109 :
            return setResponse(getUserLiveInfoSubject, response$1._0);
        case 110 :
            return setResponse(getAllLiveListSubject, response$1._0);
        case 112 :
            return setResponse(getLiveDataSubject, response$1._0);
        case 114 :
            return setResponse(getGiftListSubject, response$1._0);
        case 115 :
            return setResponse(getUserInfoSubject, response$1._0);
        case 116 :
            return setResponse(getLiveCutInfoSubject, response$1._0);
        case 200 :
            return setResponse(getManagerListSubject, response$1._0);
        case 201 :
            return setEmptyResponse(addManagerSubject, response$1._0);
        case 202 :
            return setEmptyResponse(deleteManagerSubject, response$1._0);
        case 203 :
            return setResponse(getAllKickHistorySubject, response$1._0);
        case 204 :
            return setEmptyResponse(managerKickSubject, response$1._0);
        case 205 :
            return setEmptyResponse(authorKickSubject, response$1._0);
        case 300 :
            return setResponse(getMedalDetailSubject, response$1._0);
        case 301 :
            return setResponse(getMedalListSubject, response$1._0);
        case 302 :
            return setResponse(getMedalRankListSubject, response$1._0);
        case 303 :
            return setResponse(getUserMedalSubject, response$1._0);
        case 304 :
            return setEmptyResponse(wearMedalSubject, response$1._0);
        case 305 :
            return setEmptyResponse(cancelWearMedalSubject, response$1._0);
        case 900 :
            return setResponse(checkLiveAuthSubject, response$1._0);
        case 901 :
            return setResponse(getLiveTypeListSubject, response$1._0);
        case 902 :
            return setResponse(getPushConfigSubject, response$1._0);
        case 903 :
            return setResponse(getLiveStatusSubject, response$1._0);
        case 904 :
            return setResponse(getTranscodeInfoSubject, response$1._0);
        case 905 :
            return setResponse(startLiveSubject, response$1._0);
        case 906 :
            return setResponse(stopLiveSubject, response$1._0);
        case 907 :
            return setEmptyResponse(changeTitleAndCoverSubject, response$1._0);
        case 908 :
            return setResponse(getLiveCutStatusSubject, response$1._0);
        case 909 :
            return setEmptyResponse(setLiveCutStatusSubject, response$1._0);
        case 1000 :
            return setDanmaku(commentSubject, response$1._0);
        case 1001 :
            return setDanmaku(likeSubject, response$1._0);
        case 1002 :
            return setDanmaku(enterRoomSubject, response$1._0);
        case 1003 :
            return setDanmaku(followAuthorSubject, response$1._0);
        case 1004 :
            return setDanmaku(throwBananaSubject, response$1._0);
        case 1005 :
            return setDanmaku(giftSubject, response$1._0);
        case 1006 :
            return setDanmaku(richTextSubject, response$1._0);
        case 1007 :
            return setDanmaku(joinClubSubject, response$1._0);
        case 1008 :
            return setDanmaku(shareLiveSubject, response$1._0);
        case 2000 :
            var v = response$1._0;
            return danmakuStopSubject.set(v, v.liverUID.toString());
        case 2001 :
            return setDanmaku(bananaCountSubject, response$1._0);
        case 2002 :
            return setDanmaku(displayInfoSubject, response$1._0);
        case 2003 :
            return setDanmaku(topUsersSubject, response$1._0);
        case 2004 :
            return setDanmaku(recentCommentsSubject, response$1._0);
        case 2005 :
            return setDanmaku(redpackListSubject, response$1._0);
        case 2100 :
            return setDanmaku(chatCallSubject, response$1._0);
        case 2101 :
            return setDanmaku(chatAcceptSubject, response$1._0);
        case 2102 :
            return setDanmaku(chatReadySubject, response$1._0);
        case 2103 :
            return setDanmaku(chatEndSubject, response$1._0);
        case 2999 :
            return setDanmaku(danmakuStopErrorStopSubject, response$1._0);
        case 3000 :
            return setDanmaku(kickedOutSubject, response$1._0);
        case 3001 :
            return setDanmaku(violationAlertSubject, response$1._0);
        case 3002 :
            return setDanmaku(managerStateSubject, response$1._0);
        
      }
    };
    $$WebSocket.addMessageListener(w, messageListener);
    cleanupFn.contents = (function () {
        $$WebSocket.removeOpenListener(w, openListener);
        $$WebSocket.removeCloseListener(w, closeListener);
        $$WebSocket.removeErrorListener(w, errorListener);
        $$WebSocket.removeMessageListener(w, messageListener);
      });
  };
  var on = function ($$event, onData, key, onError) {
    switch ($$event) {
      case "websocketOpen" :
          return fixKeyCallback(unitSubject, "websocketOpen", onData);
      case "websocketClose" :
          return fixKeyCallback(unitSubject, "websocketClose", onData);
      case "websocketError" :
          return fixKeyCallback(websocketErrorSubject, "websocketError", onData);
      case "jsonError" :
          return fixKeyCallback(jsonErrorSubject, "jsonError", onData);
      case "heartbeat" :
          return fixKeyCallback(unitSubject, "heartbeat", onData);
      case "login" :
          return responseCallback(loginSubject, key, onData, onError);
      case "setClientID" :
          return responseCallback(setClientIDSubject, key, onData, onError);
      case "requestForward" :
          return responseCallback(requestForwardSubject, key, onData, onError);
      case "receiveForward" :
          return responseCallback(receiveForwardSubject, key, onData, onError);
      case "setToken" :
          return responseCallback(setTokenSubject, key, onData, onError);
      case "getDanmaku" :
          return responseCallback(getDanmakuSubject, key, onData, onError);
      case "stopDanmaku" :
          return responseCallback(stopDanmakuSubject, key, onData, onError);
      case "getWatchingList" :
          return responseCallback(getWatchingListSubject, key, onData, onError);
      case "getBillboard" :
          return responseCallback(getBillboardSubject, key, onData, onError);
      case "getSummary" :
          return responseCallback(getSummarySubject, key, onData, onError);
      case "getLuckList" :
          return responseCallback(getLuckListSubject, key, onData, onError);
      case "getPlayback" :
          return responseCallback(getPlaybackSubject, key, onData, onError);
      case "getAllGiftList" :
          return responseCallback(getAllGiftListSubject, key, onData, onError);
      case "getWalletBalance" :
          return responseCallback(getWalletBalanceSubject, key, onData, onError);
      case "getUserLiveInfo" :
          return responseCallback(getUserLiveInfoSubject, key, onData, onError);
      case "getAllLiveList" :
          return responseCallback(getAllLiveListSubject, key, onData, onError);
      case "getLiveData" :
          return responseCallback(getLiveDataSubject, key, onData, onError);
      case "getGiftList" :
          return responseCallback(getGiftListSubject, key, onData, onError);
      case "getUserInfo" :
          return responseCallback(getUserInfoSubject, key, onData, onError);
      case "getLiveCutInfo" :
          return responseCallback(getLiveCutInfoSubject, key, onData, onError);
      case "getManagerList" :
          return responseCallback(getManagerListSubject, key, onData, onError);
      case "addManager" :
          return responseCallback(addManagerSubject, key, onData, onError);
      case "deleteManager" :
          return responseCallback(deleteManagerSubject, key, onData, onError);
      case "getAllKickHistory" :
          return responseCallback(getAllKickHistorySubject, key, onData, onError);
      case "managerKick" :
          return responseCallback(managerKickSubject, key, onData, onError);
      case "authorKick" :
          return responseCallback(authorKickSubject, key, onData, onError);
      case "getMedalDetail" :
          return responseCallback(getMedalDetailSubject, key, onData, onError);
      case "getMedalList" :
          return responseCallback(getMedalListSubject, key, onData, onError);
      case "getMedalRankList" :
          return responseCallback(getMedalRankListSubject, key, onData, onError);
      case "getUserMedal" :
          return responseCallback(getUserMedalSubject, key, onData, onError);
      case "wearMedal" :
          return responseCallback(wearMedalSubject, key, onData, onError);
      case "cancelWearMedal" :
          return responseCallback(cancelWearMedalSubject, key, onData, onError);
      case "checkLiveAuth" :
          return responseCallback(checkLiveAuthSubject, key, onData, onError);
      case "getLiveTypeList" :
          return responseCallback(getLiveTypeListSubject, key, onData, onError);
      case "getPushConfig" :
          return responseCallback(getPushConfigSubject, key, onData, onError);
      case "getLiveStatus" :
          return responseCallback(getLiveStatusSubject, key, onData, onError);
      case "getTranscodeInfo" :
          return responseCallback(getTranscodeInfoSubject, key, onData, onError);
      case "startLive" :
          return responseCallback(startLiveSubject, key, onData, onError);
      case "stopLive" :
          return responseCallback(stopLiveSubject, key, onData, onError);
      case "changeTitleAndCover" :
          return responseCallback(changeTitleAndCoverSubject, key, onData, onError);
      case "getLiveCutStatus" :
          return responseCallback(getLiveCutStatusSubject, key, onData, onError);
      case "setLiveCutStatus" :
          return responseCallback(setLiveCutStatusSubject, key, onData, onError);
      case "comment" :
          return danmakuCallback(commentSubject, key, onData);
      case "like" :
          return danmakuCallback(likeSubject, key, onData);
      case "enterRoom" :
          return danmakuCallback(enterRoomSubject, key, onData);
      case "followAuthor" :
          return danmakuCallback(followAuthorSubject, key, onData);
      case "throwBanana" :
          return danmakuCallback(throwBananaSubject, key, onData);
      case "gift" :
          return danmakuCallback(giftSubject, key, onData);
      case "richText" :
          return danmakuCallback(richTextSubject, key, onData);
      case "joinClub" :
          return danmakuCallback(joinClubSubject, key, onData);
      case "shareLive" :
          return danmakuCallback(shareLiveSubject, key, onData);
      case "danmakuStop" :
          return danmakuCallback(danmakuStopSubject, key, onData);
      case "bananaCount" :
          return danmakuCallback(bananaCountSubject, key, onData);
      case "displayInfo" :
          return danmakuCallback(displayInfoSubject, key, onData);
      case "topUsers" :
          return danmakuCallback(topUsersSubject, key, onData);
      case "recentComments" :
          return danmakuCallback(recentCommentsSubject, key, onData);
      case "redpackList" :
          return danmakuCallback(redpackListSubject, key, onData);
      case "chatCall" :
          return danmakuCallback(chatCallSubject, key, onData);
      case "chatAccept" :
          return danmakuCallback(chatAcceptSubject, key, onData);
      case "chatReady" :
          return danmakuCallback(chatReadySubject, key, onData);
      case "chatEnd" :
          return danmakuCallback(chatEndSubject, key, onData);
      case "danmakuStopError" :
          return danmakuCallback(danmakuStopErrorStopSubject, key, onData);
      case "kickedOut" :
          return danmakuCallback(kickedOutSubject, key, onData);
      case "violationAlert" :
          return danmakuCallback(violationAlertSubject, key, onData);
      case "managerState" :
          return danmakuCallback(managerStateSubject, key, onData);
      
    }
  };
  var sendRequest = function (data, ws) {
    var d = AcLive__Struct.serializeRequest(data);
    if (d.TAG === "Ok") {
      return $$WebSocket.send(ws, d._0);
    } else {
      return jsonErrorSubject.set({
                  error: d._0
                }, "jsonError");
    }
  };
  var request = function (request$1, data, requestID) {
    var w = ws.contents;
    if (w === undefined) {
      return ;
    }
    var w$1 = Caml_option.valFromOption(w);
    switch (request$1) {
      case "login" :
          return sendRequest({
                      TAG: 2,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "setClientID" :
          return sendRequest({
                      TAG: 3,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "requestForward" :
          return sendRequest({
                      TAG: 4,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "setToken" :
          return sendRequest({
                      TAG: 6,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getDanmaku" :
          return sendRequest({
                      TAG: 100,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "stopDanmaku" :
          return sendRequest({
                      TAG: 101,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getWatchingList" :
          return sendRequest({
                      TAG: 102,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getBillboard" :
          return sendRequest({
                      TAG: 103,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getSummary" :
          return sendRequest({
                      TAG: 104,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getLuckList" :
          return sendRequest({
                      TAG: 105,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getPlayback" :
          return sendRequest({
                      TAG: 106,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getAllGiftList" :
          return sendRequest({
                      TAG: 107,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "getWalletBalance" :
          return sendRequest({
                      TAG: 108,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "getUserLiveInfo" :
          return sendRequest({
                      TAG: 109,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getAllLiveList" :
          return sendRequest({
                      TAG: 110,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "getLiveData" :
          return sendRequest({
                      TAG: 112,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getGiftList" :
          return sendRequest({
                      TAG: 114,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getUserInfo" :
          return sendRequest({
                      TAG: 115,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getLiveCutInfo" :
          return sendRequest({
                      TAG: 116,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getManagerList" :
          return sendRequest({
                      TAG: 200,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "addManager" :
          return sendRequest({
                      TAG: 201,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "deleteManager" :
          return sendRequest({
                      TAG: 202,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getAllKickHistory" :
          return sendRequest({
                      TAG: 203,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "managerKick" :
          return sendRequest({
                      TAG: 204,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "authorKick" :
          return sendRequest({
                      TAG: 205,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getMedalDetail" :
          return sendRequest({
                      TAG: 300,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getMedalList" :
          return sendRequest({
                      TAG: 301,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "getMedalRankList" :
          return sendRequest({
                      TAG: 302,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getUserMedal" :
          return sendRequest({
                      TAG: 303,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "wearMedal" :
          return sendRequest({
                      TAG: 304,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "cancelWearMedal" :
          return sendRequest({
                      TAG: 305,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "checkLiveAuth" :
          return sendRequest({
                      TAG: 900,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "getLiveTypeList" :
          return sendRequest({
                      TAG: 901,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "getPushConfig" :
          return sendRequest({
                      TAG: 902,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "getLiveStatus" :
          return sendRequest({
                      TAG: 903,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "getTranscodeInfo" :
          return sendRequest({
                      TAG: 904,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "startLive" :
          return sendRequest({
                      TAG: 905,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "stopLive" :
          return sendRequest({
                      TAG: 906,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "changeTitleAndCover" :
          return sendRequest({
                      TAG: 907,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      case "getLiveCutStatus" :
          return sendRequest({
                      TAG: 908,
                      _0: AcLive__Message.makeEmptyMessage(requestID)
                    }, w$1);
      case "setLiveCutStatus" :
          return sendRequest({
                      TAG: 909,
                      _0: AcLive__Message.makeMessage(data, requestID)
                    }, w$1);
      
    }
  };
  var generateUuid = function () {
    while(true) {
      var uuid = Uuid.v4();
      var match = uuidDict[uuid];
      if (match !== undefined) {
        _param = undefined;
        continue ;
      }
      uuidDict[uuid] = 0;
      return [
              uuid,
              (function(uuid){
              return function () {
                Core__Dict.$$delete(uuidDict, uuid);
              }
              }(uuid))
            ];
    };
  };
  var asyncRequest = function (request, data, requestIDPrefix, timeout) {
    var w = ws.contents;
    if (w === undefined) {
      return Promise.reject({
                  RE_EXN_ID: NotConnectBackend
                });
    }
    var w$1 = Caml_option.valFromOption(w);
    return new Promise((function (resolve, reject) {
                  var match = generateUuid();
                  var deleteUuid = match[1];
                  var requestID = Core__Option.getWithDefault(requestIDPrefix, "") + "#" + match[0];
                  var unsubscribe = {
                    contents: undefined
                  };
                  var timeout$1 = setTimeout((function () {
                          var f = unsubscribe.contents;
                          if (f !== undefined) {
                            f();
                            unsubscribe.contents = undefined;
                          }
                          deleteUuid();
                          reject({
                                RE_EXN_ID: AsyncRequestTimeout
                              });
                        }), Core__Option.getWithDefault(timeout, config.asyncRequestTimeout));
                  var handleEmptyMessage = function (subject, constructor) {
                    sendRequest(constructor(AcLive__Message.makeEmptyMessage(requestID)), w$1);
                    unsubscribe.contents = subject.oneshot((function (value, param) {
                            clearTimeout(timeout$1);
                            deleteUuid();
                            if (value.TAG === "Ok") {
                              return resolve(value._0);
                            } else {
                              return reject({
                                          RE_EXN_ID: ResponseError,
                                          _1: value._0
                                        });
                            }
                          }), requestID);
                  };
                  var handleMessage = function (subject, constructor) {
                    sendRequest(constructor(AcLive__Message.makeMessage(data, requestID)), w$1);
                    unsubscribe.contents = subject.oneshot((function (value, param) {
                            clearTimeout(timeout$1);
                            deleteUuid();
                            if (value.TAG === "Ok") {
                              return resolve(value._0);
                            } else {
                              return reject({
                                          RE_EXN_ID: ResponseError,
                                          _1: value._0
                                        });
                            }
                          }), requestID);
                  };
                  switch (request) {
                    case "login" :
                        return handleMessage(loginSubject, (function (v) {
                                      return {
                                              TAG: 2,
                                              _0: v
                                            };
                                    }));
                    case "setClientID" :
                        return handleMessage(setClientIDSubject, (function (v) {
                                      return {
                                              TAG: 3,
                                              _0: v
                                            };
                                    }));
                    case "requestForward" :
                        return handleMessage(requestForwardSubject, (function (v) {
                                      return {
                                              TAG: 4,
                                              _0: v
                                            };
                                    }));
                    case "setToken" :
                        return handleMessage(setTokenSubject, (function (v) {
                                      return {
                                              TAG: 6,
                                              _0: v
                                            };
                                    }));
                    case "getDanmaku" :
                        return handleMessage(getDanmakuSubject, (function (v) {
                                      return {
                                              TAG: 100,
                                              _0: v
                                            };
                                    }));
                    case "stopDanmaku" :
                        return handleMessage(stopDanmakuSubject, (function (v) {
                                      return {
                                              TAG: 101,
                                              _0: v
                                            };
                                    }));
                    case "getWatchingList" :
                        return handleMessage(getWatchingListSubject, (function (v) {
                                      return {
                                              TAG: 102,
                                              _0: v
                                            };
                                    }));
                    case "getBillboard" :
                        return handleMessage(getBillboardSubject, (function (v) {
                                      return {
                                              TAG: 103,
                                              _0: v
                                            };
                                    }));
                    case "getSummary" :
                        return handleMessage(getSummarySubject, (function (v) {
                                      return {
                                              TAG: 104,
                                              _0: v
                                            };
                                    }));
                    case "getLuckList" :
                        return handleMessage(getLuckListSubject, (function (v) {
                                      return {
                                              TAG: 105,
                                              _0: v
                                            };
                                    }));
                    case "getPlayback" :
                        return handleMessage(getPlaybackSubject, (function (v) {
                                      return {
                                              TAG: 106,
                                              _0: v
                                            };
                                    }));
                    case "getAllGiftList" :
                        return handleEmptyMessage(getAllGiftListSubject, (function (v) {
                                      return {
                                              TAG: 107,
                                              _0: v
                                            };
                                    }));
                    case "getWalletBalance" :
                        return handleEmptyMessage(getWalletBalanceSubject, (function (v) {
                                      return {
                                              TAG: 108,
                                              _0: v
                                            };
                                    }));
                    case "getUserLiveInfo" :
                        return handleMessage(getUserLiveInfoSubject, (function (v) {
                                      return {
                                              TAG: 109,
                                              _0: v
                                            };
                                    }));
                    case "getAllLiveList" :
                        return handleEmptyMessage(getAllLiveListSubject, (function (v) {
                                      return {
                                              TAG: 110,
                                              _0: v
                                            };
                                    }));
                    case "getLiveData" :
                        return handleMessage(getLiveDataSubject, (function (v) {
                                      return {
                                              TAG: 112,
                                              _0: v
                                            };
                                    }));
                    case "getGiftList" :
                        return handleMessage(getGiftListSubject, (function (v) {
                                      return {
                                              TAG: 114,
                                              _0: v
                                            };
                                    }));
                    case "getUserInfo" :
                        return handleMessage(getUserInfoSubject, (function (v) {
                                      return {
                                              TAG: 115,
                                              _0: v
                                            };
                                    }));
                    case "getLiveCutInfo" :
                        return handleMessage(getLiveCutInfoSubject, (function (v) {
                                      return {
                                              TAG: 116,
                                              _0: v
                                            };
                                    }));
                    case "getManagerList" :
                        return handleEmptyMessage(getManagerListSubject, (function (v) {
                                      return {
                                              TAG: 200,
                                              _0: v
                                            };
                                    }));
                    case "addManager" :
                        return handleMessage(addManagerSubject, (function (v) {
                                      return {
                                              TAG: 201,
                                              _0: v
                                            };
                                    }));
                    case "deleteManager" :
                        return handleMessage(deleteManagerSubject, (function (v) {
                                      return {
                                              TAG: 202,
                                              _0: v
                                            };
                                    }));
                    case "getAllKickHistory" :
                        return handleMessage(getAllKickHistorySubject, (function (v) {
                                      return {
                                              TAG: 203,
                                              _0: v
                                            };
                                    }));
                    case "managerKick" :
                        return handleMessage(managerKickSubject, (function (v) {
                                      return {
                                              TAG: 204,
                                              _0: v
                                            };
                                    }));
                    case "authorKick" :
                        return handleMessage(authorKickSubject, (function (v) {
                                      return {
                                              TAG: 205,
                                              _0: v
                                            };
                                    }));
                    case "getMedalDetail" :
                        return handleMessage(getMedalDetailSubject, (function (v) {
                                      return {
                                              TAG: 300,
                                              _0: v
                                            };
                                    }));
                    case "getMedalList" :
                        return handleEmptyMessage(getMedalListSubject, (function (v) {
                                      return {
                                              TAG: 301,
                                              _0: v
                                            };
                                    }));
                    case "getMedalRankList" :
                        return handleMessage(getMedalRankListSubject, (function (v) {
                                      return {
                                              TAG: 302,
                                              _0: v
                                            };
                                    }));
                    case "getUserMedal" :
                        return handleMessage(getUserMedalSubject, (function (v) {
                                      return {
                                              TAG: 303,
                                              _0: v
                                            };
                                    }));
                    case "wearMedal" :
                        return handleMessage(wearMedalSubject, (function (v) {
                                      return {
                                              TAG: 304,
                                              _0: v
                                            };
                                    }));
                    case "cancelWearMedal" :
                        return handleEmptyMessage(cancelWearMedalSubject, (function (v) {
                                      return {
                                              TAG: 305,
                                              _0: v
                                            };
                                    }));
                    case "checkLiveAuth" :
                        return handleEmptyMessage(checkLiveAuthSubject, (function (v) {
                                      return {
                                              TAG: 900,
                                              _0: v
                                            };
                                    }));
                    case "getLiveTypeList" :
                        return handleEmptyMessage(getLiveTypeListSubject, (function (v) {
                                      return {
                                              TAG: 901,
                                              _0: v
                                            };
                                    }));
                    case "getPushConfig" :
                        return handleEmptyMessage(getPushConfigSubject, (function (v) {
                                      return {
                                              TAG: 902,
                                              _0: v
                                            };
                                    }));
                    case "getLiveStatus" :
                        return handleEmptyMessage(getLiveStatusSubject, (function (v) {
                                      return {
                                              TAG: 903,
                                              _0: v
                                            };
                                    }));
                    case "getTranscodeInfo" :
                        return handleMessage(getTranscodeInfoSubject, (function (v) {
                                      return {
                                              TAG: 904,
                                              _0: v
                                            };
                                    }));
                    case "startLive" :
                        return handleMessage(startLiveSubject, (function (v) {
                                      return {
                                              TAG: 905,
                                              _0: v
                                            };
                                    }));
                    case "stopLive" :
                        return handleMessage(stopLiveSubject, (function (v) {
                                      return {
                                              TAG: 906,
                                              _0: v
                                            };
                                    }));
                    case "changeTitleAndCover" :
                        return handleMessage(changeTitleAndCoverSubject, (function (v) {
                                      return {
                                              TAG: 907,
                                              _0: v
                                            };
                                    }));
                    case "getLiveCutStatus" :
                        return handleEmptyMessage(getLiveCutStatusSubject, (function (v) {
                                      return {
                                              TAG: 908,
                                              _0: v
                                            };
                                    }));
                    case "setLiveCutStatus" :
                        return handleMessage(setLiveCutStatusSubject, (function (v) {
                                      return {
                                              TAG: 909,
                                              _0: v
                                            };
                                    }));
                    
                  }
                }));
  };
  return {
          connect: connect,
          disconnect: disconnect,
          isConnecting: isConnecting,
          on: on,
          request: request,
          asyncRequest: asyncRequest
        };
}

export {
  NotConnectBackend ,
  AsyncRequestTimeout ,
  ResponseError ,
  make ,
}
/* uuid Not a pure module */
