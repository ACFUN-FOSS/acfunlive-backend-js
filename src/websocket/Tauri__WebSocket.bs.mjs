// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as Core__Promise from "@rescript/core/src/Core__Promise.bs.mjs";
import * as TauriPluginWebsocketApi from "tauri-plugin-websocket-api";

function convertCloseFrame(ws, frame) {
  if (frame === null) {
    return {
            type: "close",
            target: ws
          };
  } else {
    return {
            type: "close",
            target: ws,
            code: frame.code,
            reason: frame.reason
          };
  }
}

function notifyListeners(arr, $$event) {
  arr.forEach(function (fn) {
        fn($$event);
      });
}

function clear(ws) {
  ws.webSocket = undefined;
  ws.openListeners.length = 0;
  ws.closeListeners.length = 0;
  ws.messageListeners.length = 0;
  ws.errorListeners.length = 0;
}

function notifyError(ws, e) {
  var $$event = e.RE_EXN_ID === Js_exn.$$Error ? ({
        type: "error",
        target: ws,
        error: Caml_option.some(e._1)
      }) : ({
        type: "error",
        target: ws
      });
  notifyListeners(ws.errorListeners, $$event);
}

function isOpen(ws) {
  return Core__Option.isSome(ws.webSocket);
}

function clearAndNotifyClose(ws) {
  if (!Core__Option.isSome(ws.webSocket)) {
    return ;
  }
  var $$event = {
    type: "close",
    target: ws
  };
  notifyListeners(ws.closeListeners, $$event);
  clear(ws);
}

function close(ws) {
  var w = ws.webSocket;
  if (w !== undefined) {
    Core__Promise.$$catch(Caml_option.valFromOption(w).disconnect(), (function (e) {
              notifyError(ws, e);
              return Promise.resolve(clearAndNotifyClose(ws));
            })).finally(function () {
          setTimeout((function () {
                  clearAndNotifyClose(ws);
                }), 15000);
        });
    return ;
  }
  
}

function make(url) {
  var ws = {
    webSocket: undefined,
    openListeners: [],
    closeListeners: [],
    messageListeners: [],
    errorListeners: []
  };
  Core__Promise.$$catch(TauriPluginWebsocketApi.default.connect(url).then(function (w) {
            ws.webSocket = Caml_option.some(w);
            w.addListener(function (m) {
                  if (m === null) {
                    return ;
                  }
                  switch (m.type) {
                    case "Text" :
                        var event_data = m.data;
                        var $$event = {
                          type: "message",
                          target: ws,
                          data: event_data
                        };
                        return notifyListeners(ws.messageListeners, $$event);
                    case "Close" :
                        if (!Core__Option.isSome(ws.webSocket)) {
                          return ;
                        }
                        var $$event$1 = convertCloseFrame(ws, m.data);
                        notifyListeners(ws.closeListeners, $$event$1);
                        return clear(ws);
                    case "Error" :
                        var event_message = m.data;
                        var $$event$2 = {
                          type: "error",
                          target: ws,
                          message: event_message
                        };
                        return notifyListeners(ws.errorListeners, $$event$2);
                    default:
                      return ;
                  }
                });
            var $$event = {
              type: "open",
              target: ws
            };
            notifyListeners(ws.openListeners, $$event);
          }), (function (e) {
          notifyError(ws, e);
          return Promise.resolve(close(ws));
        }));
  return ws;
}

function send(ws, message) {
  var w = ws.webSocket;
  if (w !== undefined) {
    Core__Promise.$$catch(Caml_option.valFromOption(w).send(message), (function (e) {
            return Promise.resolve(notifyError(ws, e));
          }));
    return ;
  }
  
}

function addOpenListener(ws, fn) {
  ws.openListeners.push(fn);
}

function addCloseListener(ws, fn) {
  ws.closeListeners.push(fn);
}

function addMessageListener(ws, fn) {
  ws.messageListeners.push(fn);
}

function addErrorListener(ws, fn) {
  ws.errorListeners.push(fn);
}

export {
  make ,
  isOpen ,
  send ,
  close ,
  addOpenListener ,
  addCloseListener ,
  addMessageListener ,
  addErrorListener ,
}
/* tauri-plugin-websocket-api Not a pure module */
