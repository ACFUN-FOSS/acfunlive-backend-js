// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as AcFunLiveBackend from "../src/AcFunLiveBackend.bs.mjs";
import * as Caml_js_exceptions from "@rescript/std/lib/es6/caml_js_exceptions.js";

var session = AcFunLiveBackend.makeNodeSession(undefined);

session.connect(undefined);

session.on("heartbeat", undefined, (function () {
        console.log("heartbeat");
      }), undefined);

session.on("login", undefined, (function (v) {
        console.log("login: ", v);
      }), undefined);

session.on("getDanmaku", "aaa", (function (v) {
        console.log("get danmaku: ", v);
      }), (function (e) {
        console.log("get danmaku error: ", e);
      }));

async function action() {
  try {
    var info = await session.oneshot("login", {
          account: "",
          password: ""
        }, undefined, undefined);
    console.log("login call: ", info);
    var liveList = await session.oneshot("getAllLiveList", undefined, undefined, undefined);
    console.log("live list: ", liveList);
    var stream = await session.oneshot("getDanmaku", {
          liverUID: Core__Option.getExn(liveList.data[0]).profile.userID
        }, undefined, undefined);
    console.log("get danmaku stream: ", stream);
    return ;
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    console.log("action error: ", e);
    return ;
  }
}

session.on("websocketOpen", undefined, (function () {
        console.log("websocket open");
        action(undefined);
      }), undefined);

session.on("jsonError", undefined, (function (v) {
        console.log("json error: ", v);
      }), undefined);

session.on("websocketError", undefined, (function (e) {
        console.log("websocket error: ", e);
      }), undefined);

session.on("websocketClose", undefined, (function () {
        console.log("websocket close");
      }), undefined);

session.on("danmakuStop", undefined, (function (param) {
        console.log("danmaku stop");
        session.disConnect(undefined);
      }), undefined);

session.on("danmakuStopError", undefined, (function (e) {
        console.log("danmaku stop error: ", e);
        session.disConnect(undefined);
      }), undefined);

export {
  session ,
  action ,
}
/* session Not a pure module */
